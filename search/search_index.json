{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WICWIU \u00b6 \ucd5c\uadfc \ub525\ub7ec\ub2dd \uc5f0\uad6c\uac00 \uc138\uacc4\uc801\uc73c\ub85c \ube60\ub974\uac8c \ubc1c\uc804\ud560 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc0ac\ud68c \uc804\ubc18\uc801\uc73c\ub85c \ud070 \uc774\uc288\ud654\uac00 \ub418\uace0 \uc788\uace0, \uc0b0\uc5c5\uacc4 \uad6c\uc870\uc5d0\uc11c\ub3c4 \uc778\uacf5\uc9c0\ub2a5\uc758 \ub3c4\uc785\uc774 \ud65c\ubc1c\ud788 \uc9c4\ud589\uc911\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uad6d\ub0b4\uc5d0\uc11c \uc5f0\uad6c \uc911\uc774\uac70\ub098 \uc0b0\uc5c5\uccb4\uc5d0 \ud65c\uc6a9\ud558\ub294 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\ub294 \ub300\ubd80\ubd84 \ud574\uc678\uc5d0\uc11c \uac1c\ubc1c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \uc774\uc720\ub294 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c \uc790\uccb4\uac00 \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8\ub97c \uc218\ud589\ud558\uae30 \uc704\ud55c \ubcf5\uc7a1\ud55c \uc5d4\uc9c4\uc744 \uac1c\ubc1c\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8 \uacb0\uacfc \uad6d\ub0b4 \ub525\ub7ec\ub2dd \uc0ac\uc6a9\uc790\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ubd88\ud3b8\ud568\uc744 \uacaa\uc2b5\ub2c8\ub2e4. \uc601\uc5b4\ub85c \uc791\uc131\ub41c \uc124\uba85\uc11c\ub85c \uc778\ud574 \uad6d\ub0b4 \uc0ac\uc6a9\uc790\ub4e4\uc740 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc774\ud574\ud558\ub294\ub370 \ubd88\ud3b8\ud568\uc774 \uc788\ub2e4. \ud30c\uc774\uc36c \ud658\uacbd\uc758 \ud574\uc678 \ud504\ub808\uc784\uc6cc\ud06c\ub294 \uc790\uccb4 \uc218\uc815 \ubc0f \ud655\uc7a5\uc5d0 \uc5b4\ub824\uc6c0\uc744 \uac00\uc9c0\uba70 \ub2e4\uc591\ud55c \ud658\uacbd\uc5d0\uc11c\uc758 \uc774\uc2dd\uc774 \uc27d\uc9c0 \uc54a\ub2e4. \ud574\uc678 \uae30\uc220\uc758 \uc758\uc874\uc131\uc774 \ub192\uc544\uc9c4\ub2e4. WICWIU \ub294 \uc774\ub7ec\ud55c \ubb38\uc81c\uc810\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec \ud55c\ub3d9\ub300\ud559\uad50 \uae40\uc778\uc911 \uad50\uc218\ub2d8 \ub525\ub7ec\ub2dd \uc5f0\uad6c\uc2e4\uc5d0\uc11c \ud559\ubd80\uc0dd \uc8fc\ub3c4\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4. WICWIU \ub294 \uc54c\uace0\ub9ac\uc998\uc758 \ud655\uc7a5\uc131\uacfc \uac00\ub3c5\uc131\uc744 \uace0\ub824\ud558\uc5ec, \uc77c\uad00\uc131 \ub192\uc740 C++\ucf54\ub4dc\uc640 API\ub85c \uad6c\uc131\ub418\uc5c8\uc73c\uba70, \ud55c\uae00 \uc124\uba85\uc11c\ub97c \uc81c\uacf5\ud558\uc5ec \uad6d\ub0b4 \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \ud3b8\uc758\ub97c \uc81c\uacf5\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. About \u00b6 \uc774 \ud398\uc774\uc9c0\uac00 \ub9cc\ub4e4\uc5b4\uc9c4 \uc774\uc720\ub97c \uc54c\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud574\uc8fc\uc138\uc694! About WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc \u00b6 WICWIU \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc API \u00b6 WICWIU \uc758 API \ub97c \ud655\uc778\ud574\ubcf4\uc138\uc694! API WICWIU \ud611\uc5c5\uc744 \uc704\ud55c \uc9c0\uc2dd \ub3d9\uae30\ud654 \u00b6 \uc774\uacf3\uc740 WICWIU \uac1c\ubc1c \ud300\uc6d0\uc774 WICWIU \ub97c \ubd84\uc11d\ud558\uace0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\ud604\ud558\ub294 \ucf54\ub529\uc744 \ud560 \ub54c, \uadf8 \uacfc\uc815\uc744 \uae30\ub85d\ud558\uace0 \uacf5\uc720\ud558\uc5ec \ub2e4\ub978 \ud300\uc6d0\uacfc \uc9c0\uc2dd\uc744 \ub3d9\uae30\ud654\uc2dc\ud0a4\uae30 \uc704\ud55c \uacf5\uac04\uc785\ub2c8\ub2e4. fewshot \ud300 Fewshot Diary Info \uc5b4\ucc28\ud53c WICWIU \ub97c \ubd84\uc11d\ud558\uace0 \ucf54\ub529\ud55c \uacfc\uc815\uc744 \ub2e4\ub978 \ud300\uc6d0\uc5d0\uac8c \uc124\uba85\ud574\uc57c \ud558\ubbc0\ub85c \uadf8\uac83\uc744 \uae30\ub85d\uc73c\ub85c \ub0a8\uaca8\uc11c \uacf5\uc720\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uae30\ub85d\uc73c\ub85c \ub0a8\uae30\ub294 \uacfc\uc815\uc5d0\uc11c \uc790\uc2e0\uc758 \uc9c0\uc2dd\uc774 \ub354\uc6b1 \uccb4\uacc4\uc801\uc73c\ub85c \uc815\ub9ac\uac00 \ub418\uace0, \uc774\ud6c4\uc5d0 \ub2e4\ub978 \ud300\ub4e4\ub3c4 \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc744 \ucc38\uace0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. WICWIU \uc758 \uac1c\ubc1c \ud300\uc774\ub77c\uba74 \ub2e4\ub978 \ud300\uc758 \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc774\ub77c\ub3c4 \uc9c0\uc2dd \ub3d9\uae30\ud654\ub97c \uc2dc\ucf1c\uc8fc\uc138\uc694. \ud639\uc2dc \ub611\uac19\uc740 \ucf54\ub4dc\ub97c \ub2e4\uc2dc \ubd84\uc11d\ud55c\ub2e4\uba74 \uc2dc\uac04\ub0ad\ube44\uac00 \ub420 \ubfd0\ub354\ub7ec \ub611\uac19\uc740 \ubd84\uc11d\uc774 2\ubc88 \uc774\uc0c1 \uc0dd\uae30\uba74 \uc911\ubcf5\ub41c \ub0b4\uc6a9\uc758 \ubb38\uc11c\uac00 \uc0dd\uaca8\uc11c \ud63c\ub780\uc774 \ucd08\ub798\ub420 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. WICWIU \ubb38\uc11c \uc791\uc131\ud558\uae30 \uac00\uc774\ub4dc \u00b6 WICWIU Github Pages \uc5d0 \ubb38\uc11c\ub97c \uc791\uc131\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU Github Pages \ubb38\uc11c \uc791\uc131 \uac00\uc774\ub4dc","title":"Home"},{"location":"#wicwiu","text":"\ucd5c\uadfc \ub525\ub7ec\ub2dd \uc5f0\uad6c\uac00 \uc138\uacc4\uc801\uc73c\ub85c \ube60\ub974\uac8c \ubc1c\uc804\ud560 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc0ac\ud68c \uc804\ubc18\uc801\uc73c\ub85c \ud070 \uc774\uc288\ud654\uac00 \ub418\uace0 \uc788\uace0, \uc0b0\uc5c5\uacc4 \uad6c\uc870\uc5d0\uc11c\ub3c4 \uc778\uacf5\uc9c0\ub2a5\uc758 \ub3c4\uc785\uc774 \ud65c\ubc1c\ud788 \uc9c4\ud589\uc911\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uad6d\ub0b4\uc5d0\uc11c \uc5f0\uad6c \uc911\uc774\uac70\ub098 \uc0b0\uc5c5\uccb4\uc5d0 \ud65c\uc6a9\ud558\ub294 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\ub294 \ub300\ubd80\ubd84 \ud574\uc678\uc5d0\uc11c \uac1c\ubc1c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \uc774\uc720\ub294 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c \uc790\uccb4\uac00 \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8\ub97c \uc218\ud589\ud558\uae30 \uc704\ud55c \ubcf5\uc7a1\ud55c \uc5d4\uc9c4\uc744 \uac1c\ubc1c\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8 \uacb0\uacfc \uad6d\ub0b4 \ub525\ub7ec\ub2dd \uc0ac\uc6a9\uc790\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ubd88\ud3b8\ud568\uc744 \uacaa\uc2b5\ub2c8\ub2e4. \uc601\uc5b4\ub85c \uc791\uc131\ub41c \uc124\uba85\uc11c\ub85c \uc778\ud574 \uad6d\ub0b4 \uc0ac\uc6a9\uc790\ub4e4\uc740 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc774\ud574\ud558\ub294\ub370 \ubd88\ud3b8\ud568\uc774 \uc788\ub2e4. \ud30c\uc774\uc36c \ud658\uacbd\uc758 \ud574\uc678 \ud504\ub808\uc784\uc6cc\ud06c\ub294 \uc790\uccb4 \uc218\uc815 \ubc0f \ud655\uc7a5\uc5d0 \uc5b4\ub824\uc6c0\uc744 \uac00\uc9c0\uba70 \ub2e4\uc591\ud55c \ud658\uacbd\uc5d0\uc11c\uc758 \uc774\uc2dd\uc774 \uc27d\uc9c0 \uc54a\ub2e4. \ud574\uc678 \uae30\uc220\uc758 \uc758\uc874\uc131\uc774 \ub192\uc544\uc9c4\ub2e4. WICWIU \ub294 \uc774\ub7ec\ud55c \ubb38\uc81c\uc810\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec \ud55c\ub3d9\ub300\ud559\uad50 \uae40\uc778\uc911 \uad50\uc218\ub2d8 \ub525\ub7ec\ub2dd \uc5f0\uad6c\uc2e4\uc5d0\uc11c \ud559\ubd80\uc0dd \uc8fc\ub3c4\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4. WICWIU \ub294 \uc54c\uace0\ub9ac\uc998\uc758 \ud655\uc7a5\uc131\uacfc \uac00\ub3c5\uc131\uc744 \uace0\ub824\ud558\uc5ec, \uc77c\uad00\uc131 \ub192\uc740 C++\ucf54\ub4dc\uc640 API\ub85c \uad6c\uc131\ub418\uc5c8\uc73c\uba70, \ud55c\uae00 \uc124\uba85\uc11c\ub97c \uc81c\uacf5\ud558\uc5ec \uad6d\ub0b4 \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \ud3b8\uc758\ub97c \uc81c\uacf5\ud558\uace0\uc790 \ud569\ub2c8\ub2e4.","title":"WICWIU"},{"location":"#about","text":"\uc774 \ud398\uc774\uc9c0\uac00 \ub9cc\ub4e4\uc5b4\uc9c4 \uc774\uc720\ub97c \uc54c\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud574\uc8fc\uc138\uc694! About","title":"About"},{"location":"#wicwiu_1","text":"WICWIU \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc","title":"WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc"},{"location":"#api","text":"WICWIU \uc758 API \ub97c \ud655\uc778\ud574\ubcf4\uc138\uc694! API","title":"API"},{"location":"#wicwiu_2","text":"\uc774\uacf3\uc740 WICWIU \uac1c\ubc1c \ud300\uc6d0\uc774 WICWIU \ub97c \ubd84\uc11d\ud558\uace0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\ud604\ud558\ub294 \ucf54\ub529\uc744 \ud560 \ub54c, \uadf8 \uacfc\uc815\uc744 \uae30\ub85d\ud558\uace0 \uacf5\uc720\ud558\uc5ec \ub2e4\ub978 \ud300\uc6d0\uacfc \uc9c0\uc2dd\uc744 \ub3d9\uae30\ud654\uc2dc\ud0a4\uae30 \uc704\ud55c \uacf5\uac04\uc785\ub2c8\ub2e4. fewshot \ud300 Fewshot Diary Info \uc5b4\ucc28\ud53c WICWIU \ub97c \ubd84\uc11d\ud558\uace0 \ucf54\ub529\ud55c \uacfc\uc815\uc744 \ub2e4\ub978 \ud300\uc6d0\uc5d0\uac8c \uc124\uba85\ud574\uc57c \ud558\ubbc0\ub85c \uadf8\uac83\uc744 \uae30\ub85d\uc73c\ub85c \ub0a8\uaca8\uc11c \uacf5\uc720\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uae30\ub85d\uc73c\ub85c \ub0a8\uae30\ub294 \uacfc\uc815\uc5d0\uc11c \uc790\uc2e0\uc758 \uc9c0\uc2dd\uc774 \ub354\uc6b1 \uccb4\uacc4\uc801\uc73c\ub85c \uc815\ub9ac\uac00 \ub418\uace0, \uc774\ud6c4\uc5d0 \ub2e4\ub978 \ud300\ub4e4\ub3c4 \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc744 \ucc38\uace0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. WICWIU \uc758 \uac1c\ubc1c \ud300\uc774\ub77c\uba74 \ub2e4\ub978 \ud300\uc758 \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc774\ub77c\ub3c4 \uc9c0\uc2dd \ub3d9\uae30\ud654\ub97c \uc2dc\ucf1c\uc8fc\uc138\uc694. \ud639\uc2dc \ub611\uac19\uc740 \ucf54\ub4dc\ub97c \ub2e4\uc2dc \ubd84\uc11d\ud55c\ub2e4\uba74 \uc2dc\uac04\ub0ad\ube44\uac00 \ub420 \ubfd0\ub354\ub7ec \ub611\uac19\uc740 \ubd84\uc11d\uc774 2\ubc88 \uc774\uc0c1 \uc0dd\uae30\uba74 \uc911\ubcf5\ub41c \ub0b4\uc6a9\uc758 \ubb38\uc11c\uac00 \uc0dd\uaca8\uc11c \ud63c\ub780\uc774 \ucd08\ub798\ub420 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"WICWIU \ud611\uc5c5\uc744 \uc704\ud55c \uc9c0\uc2dd \ub3d9\uae30\ud654"},{"location":"#wicwiu_3","text":"WICWIU Github Pages \uc5d0 \ubb38\uc11c\ub97c \uc791\uc131\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU Github Pages \ubb38\uc11c \uc791\uc131 \uac00\uc774\ub4dc","title":"WICWIU \ubb38\uc11c \uc791\uc131\ud558\uae30 \uac00\uc774\ub4dc"},{"location":"about/","text":"\uc774\uacf3\uc740 WICWIU \ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud558\uc5ec \ud544\uc694\ud55c \ub0b4\uc6a9\uacfc WICWIU \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\ud558\uae30 \uc704\ud558\uc5ec \ud544\uc694\ud55c \ub0b4\uc6a9\uc744 Markdown \ud30c\uc77c \ud615\uc2dd\uc73c\ub85c \uc27d\uac8c \uac8c\uc2dc\ud574\ub450\uae30 \uc704\ud558\uc5ec \uc81c\uc791\ub41c WICWIU Github Pages \uc785\ub2c8\ub2e4. \ud55c\ub3d9\ub300\ud559\uad50 \ud559\ubd80\uc0dd \uc8fc\ub3c4\ub85c \uc81c\uc791\ub41c \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c WICWIU \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\ud558\uae30 \uc704\ud574\uc11c\ub294 (1) \ubc29\ub300\ud55c \uc591\uc758 C++ \ucf54\ub4dc\uc640 (2) \uadf8 \ucf54\ub4dc\uc5d0 \uad6c\ud604\ub418\uc5b4 \uc788\ub294 \ub525\ub7ec\ub2dd \uae30\uc220\ub4e4, (3) GPU \ucf54\ub529\uc744 \uc704\ud55c CUDA \ud504\ub85c\uadf8\ub798\ubc0d \uae30\uc220\ub4e4, (4) \ud611\uc5c5\uc744 \uc704\ud55c Git , Github , Pull Requests , (5) Coding Convention \uc5d0 \ub300\ud55c \uc774\ud574, (6) C++ \ucf54\ub529\uc744 \uc704\ud558\uc5ec \uc8fc\uc758\ud574\uc57c \ud560 \ub0b4\uc6a9\ub4e4, (7) Makefile \uc5d0 \ub300\ud55c \uc774\ud574, \uae30\ud0c0\ub4f1\ub4f1\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub807\uac8c WICWIU \uac1c\ubc1c\uc5d0 \ud544\uc694\ud55c \ub0b4\uc6a9\ub4e4\uc774 \uc9c0\uae08\uae4c\uc9c0 \uc804\uc784 \uac1c\ubc1c\uc790\uc5d0 \uc758\ud558\uc5ec \uc778\uc218\uc778\uacc4\ub418\uc11c (1) \uc77c\uad00\ub41c \ub0b4\uc6a9\uc73c\ub85c \uc804\ub2ec\ub418\uc9c0 \uc54a\uac70\ub098 \ubb38\uc11c( .docx \ub610\ub294 .pdf \ud30c\uc77c)\uc5d0 \uc758\ud558\uc5ec \uc804\ub2ec\ub418\uc5c8\uae30\uc5d0 (2) \uc811\uadfc\uc131\uc774 \ub5a8\uc5b4\uc84c\uc2b5\ub2c8\ub2e4. \uc774 \ub450 \uac00\uc9c0 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec WICWIU \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\ud558\uae30 \uc704\ud55c (1) \uc77c\uad00\uc131 \uc788\ub294 \ud1b5\uc77c\ub41c \ub0b4\uc6a9\uc744, (2) \uc811\uadfc\uc131\uc774 \uc6b0\uc218\ud55c \ud50c\ub7ab\ud3fc\uc5d0 \uac8c\uc2dc\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc870\uac74\uc744 \ubaa8\ub450 \ucda9\uc871\uc2dc\ucf1c\uc8fc\ub294 \ud50c\ub7ab\ud3fc\uc740 Github Pages \uc785\ub2c8\ub2e4. \ub610 \uc774 WICWIU Github Pages \ub85c\uc368 WICWIU \uc5d0 \ucc38\uc5ec\ud558\uace0 \uc2f6\uc9c0\ub9cc \uc790\uc2e0\uc5d0\uac8c \uc5b4\ub5a4 \uac83\uc774 \ubd80\uc871\ud55c\uc9c0 \ubab0\ub77c\uc11c \ub9c9\uc5f0\ud55c \ub450\ub824\uc6c0\uc744 \uac16\uace0 \uc788\ub294 \ud55c\ub3d9\ub300\uc0dd\ub4e4\uc5d0\uac8c \ubb34\uc5c7\uc774 \ud544\uc694\ud558\uace0 \uc5b4\ub5a4 \uc9c0\uc2dd\ub4e4\uc774 \uc788\uc5b4\uc57c \ud558\ub294\uc9c0 \uba85\ud655\ud558\uac8c \uc54c\ub824\uc90c\uc73c\ub85c\uc368 WICWIU \ucc38\uc5ec\uc5d0 \uc790\uc2e0\uac10\uacfc \ud655\uc2e0\uc744 \uc2ec\uc5b4\uc904 \uc218\ub3c4 \uc788\ub2e4\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4.","title":"About"},{"location":"api/","text":"Summary \u00b6 Members Descriptions class AdagradOptimizer class Adam class AdamOptimizer class Addall \uac12\ub4e4\uc744 \uc11c\ub85c \ub354\ud558\ub294 class class AddChannelWise \uc11c\ub85c \ub354\ud558\ub294 class class AddColWise \uc911 Colunm\uc5d0\ub9cc \uac12\uc744 \ub354\ud558\ub294 class class AvaragePooling2D class BatchNormalize class BatchNormalizeLayer \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class BEGAN class BEGANDiscriminatorLoss class BEGANGeneratorLoss class ConcatenateChannelWise class Container \uc800\uc7a5\ud558\uae30 \uc704\ud55c Queue\uc5d0 \ud574\ub2f9\ud558\ub294 \ud074\ub798\uc2a4 class Convolution2D class ConvolutionLayer2D \uad6c\uc131\ud574 2-Dimensional Convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class CrossEntropy Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class DataLoader class Dataset class Dropout class FewShotClassifier class GAN class GaussianNoiseGenerator class GlobalAvaragePooling2D Row * Colunm \uacf5\uac04\uc744 GlobalAvaragePooling\ud558\ub294 \ud074\ub798\uc2a4. class GradientDescentOptimizer class HingeLoss Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class KNearestNeighbor class Linear \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class LongArray \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4. class LossFunction \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class LRelu class MatMul class Maxpooling2D class Module \uad6c\uc131\ud574 \ubaa8\ub4c8\ud654\ud558\ub294 \ud074\ub798\uc2a4 class MSE Squared Error) Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class NagOptimizer class NeuralNetwork \ubaa8\ub378 \uc0dd\uc131, \ud559\uc2b5 \ubc0f \ud3c9\uac00\ub97c \ucd1d\uad04\ud558\ub294 \ud074\ub798\uc2a4 class NoiseGenerator Tensor \ud074\ub798\uc2a4\uc758 Random_normal \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubc94\uc704 \ub0b4\uc758 \uc784\uc758\uc758 \uac12\uc744 \uac16\ub294 Tensor \uc0dd\uc131 class Operator \ubcf8 \ud504\ub798\uc784\uc6cc\ud06c\uc758 \uac00\uc7a5 \uc791\uc740 \uc5f0\uc0b0 \ub2e8\uc704. class Optimizer class PRelu class ReconstructionError class Recurrent class Relu class ReShape class RMSPropOptimizer class Sequential class Shape \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 class Sigmoid class Softmax class SoftmaxCrossEntropy \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class Switch class Tanh class Tensor \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 class Tensorholder Result\ub9cc \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. class TransposedConvolution2D class TransposedConvolutionLayer2D \uad6c\uc131\ud574 2-Dimensional TransposedConvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class TripletLoss class UniformNoiseGenerator class VanillaGANDiscriminatorLoss class VanillaGANGeneratorLoss class WData class WGANDiscriminatorLoss class WGANGeneratorLoss class AdagradOptimizer \u00b6 class AdagradOptimizer : public Optimizer< DTYPE > Summary Members Descriptions public inline AdagradOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection) AdagradOptimizer \uc0dd\uc131\uc790. public inline AdagradOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float epsilon,OptimizeDirection pOptimizeDirection) AdagradOptimizer \uc0dd\uc131\uc790. public inline ~AdagradOptimizer () AdagradOptimizer \uc18c\uba78\uc790 public inline void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc public inline int Alloc () public inline int Alloc (float epsilon) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline void InitializeAttributeForGPU (unsigned int idOfDevice) public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pGradientSquared) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Members public inline AdagradOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection) AdagradOptimizer \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(epsilon) public inline AdagradOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float epsilon,OptimizeDirection pOptimizeDirection) AdagradOptimizer \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 weightDecayRate \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud074 \ub54c \ud328\ub110\ud2f0\ub97c \ubd80\uacfc\ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(epsilon) public inline ~AdagradOptimizer () AdagradOptimizer \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_aaGradientSquared \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline int Alloc () public inline int Alloc (float epsilon) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_ppParameter, m_numOfParameter, m_ppParameter, m_aaGradientSquared \ucd08\uae30\ud654\ud55c\ub2e4. m_aaGradientSquared m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. Parameters epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 Returns \uc131\uacf5 \uc2dc TRUE See also : Container < Operator > GetTrainableTensor() See also : int GetTrainableTensorDegree() public inline void InitializeAttributeForGPU (unsigned int idOfDevice) public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_epsilon \uc720\ubb34\uc5d0 \ub530\ub77c UpdateParameter \ud638\ucd9c\uacfc \uc5d0\ub7ec \uba54\uc138\uc9c0 \ud638\ucd9c Returns \uc131\uacf5 \uc2dc TRUE See also : int UpdateParameter(Operator *pParameter, Tensor *m_pGradientSquared) public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 Returns \uc131\uacf5 \uc2dc TRUE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pGradientSquared) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc gradient \uc81c\uacf1 \uac12\uc73c\ub85c pGradientSquared \uc5c5\ub370\uc774\ud2b8 signed_learning_rate\uc640 gradient\uc758 \uacf1\uc744 \uc5c5\ub370\uc774\ud2b8 \ub41c pGradientSquared\uac12\uc5d0 root\ub97c \uc801\uc6a9 \ud55c \uac12\uc73c\ub85c \ub098\ub204\uc5b4 \ud30c\ub77c\ubbf8\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pGradientSquared \uc5c5\ub370\uc774\ud2b8 \ud560 pGradientSquared Returns \uc131\uacf5 \uc2dc TURE class Adam \u00b6 Summary Members Descriptions Members class AdamOptimizer \u00b6 class AdamOptimizer : public Optimizer< DTYPE > Summary Members Descriptions public inline AdamOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float Beta1,float Beta2,float epsilon,OptimizeDirection pOptimizeDirection) AdamOptimizer\uc758 \uc0dd\uc131\uc790. public inline AdamOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float Beta1,float Beta2,float epsilon,float weightDecayRate,OptimizeDirection pOptimizeDirection) AdamOptimizer\uc758 \uc0dd\uc131\uc790. public inline ~AdamOptimizer () AdamOptimizer \uc18c\uba78\uc790 public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc public inline int Alloc (float Beta1,float Beta2,float epsilon) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pFirstMomentum, Tensor < DTYPE > * pFirstVelocity, Tensor < DTYPE > * pUnbiasedMomentum, Tensor < DTYPE > * pUnbiasedVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Members public inline AdamOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float Beta1,float Beta2,float epsilon,OptimizeDirection pOptimizeDirection) AdamOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer pLearningRate Optimizer\uc758 learning rate Beta1 FirstMomentum \uc870\uc815 \uac00\uc911\uce58 \uac12 Beta2 FirstVelocity \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(Beta1, Beta2, epsilon) public inline AdamOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float Beta1,float Beta2,float epsilon,float weightDecayRate,OptimizeDirection pOptimizeDirection) AdamOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer pLearningRate Optimizer\uc758 learning rate Beta1 FirstMomentum \uc870\uc815 \uac00\uc911\uce58 \uac12 Beta2 FirstVelocity \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 weightDecayRate \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud074 \ub54c \ud328\ub110\ud2f0\ub97c \ubd80\uacfc\ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(Beta1, Beta2, epsilon) public inline ~AdamOptimizer () AdamOptimizer \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_aaFirstVelocity, m_aaFirstMomentum m_aaUnbiasedVelocity, m_aaUnbiasedMomentum \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline int Alloc (float Beta1,float Beta2,float epsilon) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_ppParameter, m_numOfParameter, m_aaFirstVelocity, m_aaUnbiasedVelocity, m_aaFirstMomentum m_aaUnbiasedMomentum\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. m_aaFirstVelocity\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. m_aaUnbiasedVelocity\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. m_aaFirstMomentum\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. m_aaUnbiasedMomentum\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. Parameters Beta1 FirstMomentum \uc870\uc815 \uac00\uc911\uce58 \uac12 Beta2 FirstVelocity \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon Root Sqaure \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 Returns \uc131\uacf5 \uc2dc TRUE See also : Container < Operator > GetTrainableTensor() See also : int GetTrainableTensorDegree() public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_Beta1 \uc720\ubb34\uc5d0 \ub530\ub77c UpdateParameter \ud638\ucd9c\uacfc \uc5d0\ub7ec \uba54\uc138\uc9c0 \ud638\ucd9c Returns \uc131\uacf5 \uc2dc TRUE See also : int UpdateParameter(Operator *pParameter, Tensor *pFirstMomentum, Tensor *pFirstVelocity, Tensor *pUnbiasedMomentum, Tensor *pUnbiasedVelocity) public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 Returns \uc131\uacf5 \uc2dc TRUE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pFirstMomentum, Tensor < DTYPE > * pFirstVelocity, Tensor < DTYPE > * pUnbiasedMomentum, Tensor < DTYPE > * pUnbiasedVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_Beta1\uac12\uc73c\ub85c \uac00\uc911\uce58\uac00 \uc870\uc815\ub41c pFirstMomentum\uc640 gradinet\ub85c pFirstMomentum\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. m_Beta2\uac12\uc73c\ub85c \uac00\uc911\uce58\uac00 \uc870\uc815\ub41c pFirstVelocity\uc640 elementwise \uc5f0\uc0b0\uc774 \ub41c gradient\ub85c pFirstVelocity\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. \ud559\uc2b5 \ucd08\ubc18 \ubd80, pFirstMomentum, pFirstVelocity\ub294 0\uc73c\ub85c biased \uc0c1\ud0dc\uc774\ubbc0\ub85c \uc774\ub97c unbiased \ud574\uc8fc\ub294 \uc5f0\uc0b0\ud558\uc5ec \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. signed_learning_rate\uc640 pUnbiasedMomentum\uacf1\uc744 root\uac00 \uc801\uc6a9\ub41c pUnbiasedVelocity\uc640 m_epsilon\uc73c\ub85c \ub098\ub208 \uac12\uc73c\ub85c weight(trainable_data)\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pFirstMomentum \uc5c5\ub370\uc774\ud2b8 \ud560 pFirstMomentum pFirstVelocity \uc5c5\ub370\uc774\ud2b8 \ud560 pFirstVelocity pUnbiasedMomentum \uc5c5\ub370\uc774\ud2b8 \ud560 pUnbiasedMomentum pUnbiasedVelocity \uc5c5\ub370\uc774\ud2b8 \ud560 pUnbiasedVelocity Returns \uc131\uacf5 \uc2dc TURE class Addall \u00b6 class Addall : public Operator< DTYPE > \uac12\ub4e4\uc744 \uc11c\ub85c \ub354\ud558\ub294 class Summary Members Descriptions public inline Addall ( Operator < DTYPE > * pLeftInput, Operator < DTYPE > * pRightInput,std::string pName,int pLoadflag) Addall\uc758 \uc0dd\uc131\uc790 public inline ~Addall () Addall\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pLeftInput, Operator < DTYPE > * pRightInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pLeftInput\uc744 \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud55c\ub2e4. public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. public inline virtual int ForwardPropagate (int pTime) Addall\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) Addall\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline Addall ( Operator < DTYPE > * pLeftInput, Operator < DTYPE > * pRightInput,std::string pName,int pLoadflag) Addall\uc758 \uc0dd\uc131\uc790 pLeftInput, pRightInput\uc744 Alloc\uc2dc\ud0a8\ub2e4. Parameters pLeftInput Alloc\ud560 \ub300\uc0c1 Operator . pRightInput Alloc\ud560 \ub300\uc0c1 Operator . pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pLeftInput, Operator *pRightInput) public inline ~Addall () Addall\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pLeftInput, Operator < DTYPE > * pRightInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pLeftInput\uc744 \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud55c\ub2e4. \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pLeftInput\uacfc m_pRightInput\uc758 Shape\uc815\ubcf4\ub97c \ub9f4\ubc84\ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uace0 \ub2e4\ub978 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc740 pLeftInput\uc758 Shape\uac12\uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. Result\uac12\uacfc gradient\uac12\uc744 \uc800\uc7a5 \ud560 Tensor\ub97c \uc0c8\ub85c \ub9cc\ub4e0\ub2e4. Parameters \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator pRightInput \uc5f0\uc0b0\uc5d0 \uc0ac\uc6a9 \ud560 inputTensor. Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. cudnnDescriptor\ub4e4\uc744 GPU\uba54\ubaa8\ub9ac\uc5d0\uc11c \ud574\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c null\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Addall\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c left, right\uc758 Result\uac12\uc744 \uc11c\ub85c \ub354\ud574 result\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) Addall\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c pLeftInput, pRightInput\uc758 Gradient\uac12\uc5d0 \uacc4\uc0b0\ud55c Gradient\uac12\uc744 \uac01\uac01 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. class AddChannelWise \u00b6 class AddChannelWise : public Operator< DTYPE > \uc11c\ub85c \ub354\ud558\ub294 class Summary Members Descriptions public inline AddChannelWise ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias,std::string pName,int pLoadflag) AddChannelWise\uc758 \uc0dd\uc131\uc790 public inline ~AddChannelWise () AddChannelWise\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\ub97c \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4 public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. public inline virtual int ForwardPropagate (int pTime) AddChannelWise\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) AddColWise\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline AddChannelWise ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias,std::string pName,int pLoadflag) AddChannelWise\uc758 \uc0dd\uc131\uc790 pInput, pBias\uc744 Alloc\uc2dc\ud0a8\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator . pBias Alloc\ud560 \ub300\uc0c1 Operator . pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput, Operator *pBias) public inline ~AddChannelWise () AddChannelWise\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\ub97c \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4 \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\uc758 Shape\uc815\ubcf4\ub97c \ub9f4\ubc84 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uace0 \ub2e4\ub978 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc740 pInput\uc758 Shape\uac12\uc73c\ub85c \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uac12\uacfc gradient\uac12\uc744 \uc800\uc7a5 \ud560 Tensor\ub97c \uc0c8\ub85c \ub9cc\ub4e0\ub2e4. Parameters \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator . pBias \ub354\ud560 Operator . Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. cudnnDescriptor\ub4e4\uc744 GPU\uba54\ubaa8\ub9ac\uc5d0\uc11c \ud574\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c null\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) AddChannelWise\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c Input, bias\uc758 Channel\uac12\uc744 Result\uc5d0 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) AddColWise\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c pInput, pBias\uc758 Gradient\uac12\uc560 \uacc4\uc0b0\uc744 \ud1b5\ud574 \uad6c\ud55c gradient\uac12\uc744 \uac01\uac01 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. class AddColWise \u00b6 class AddColWise : public Operator< DTYPE > \uc911 Colunm\uc5d0\ub9cc \uac12\uc744 \ub354\ud558\ub294 class Summary Members Descriptions public inline AddColWise ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias,std::string pName,int pLoadflag) AddColWise\uc758 \uc0dd\uc131\uc790 public inline ~AddColWise () AddColWise\uc758 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\ub97c \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4 public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. public inline virtual int ForwardPropagate (int pTime) AddColWise\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) AddColWise\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline AddColWise ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias,std::string pName,int pLoadflag) AddColWise\uc758 \uc0dd\uc131\uc790 pInput, pBias\uc744 Alloc\uc2dc\ud0a8\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator . pBais Alloc\ud560 \ub300\uc0c1 Operator . pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput, Operator *pBias) public inline ~AddColWise () AddColWise\uc758 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\ub97c \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4 \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\uc758 Shape\uc815\ubcf4\ub97c \ub9f4\ubc84 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uace0 \ub2e4\ub978 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc740 pInput\uc758 Shape\uac12\uc73c\ub85c \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uac12\uacfc gradient\uac12\uc744 \uc800\uc7a5 \ud560 Tensor\ub97c \uc0c8\ub85c \ub9cc\ub4e0\ub2e4. Parameters \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator . pBias \ub354\ud560 Operator . Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. cudnnDescriptor\ub4e4\uc744 GPU\uba54\ubaa8\ub9ac\uc5d0\uc11c \ud574\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c null\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) AddColWise\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c Input\uacfc bias\uc758 Colunm\uac12\uc744 \uc11c\ub85c \ub354\ud574 result\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) AddColWise\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c pInput, pBias\uc758 Gradient\uac12\uc5d0 \uacc4\uc0b0\uc744 \ud1b5\ud574 \uad6c\ud55c gradient\uac12\uc744 \uac01\uac01 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. class AvaragePooling2D \u00b6 class AvaragePooling2D : public Operator< DTYPE > Summary Members Descriptions public inline AvaragePooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,std::string pName,int pLoadflag) public inline AvaragePooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,int padding,std::string pName,int pLoadflag) public inline ~AvaragePooling2D () public inline int Alloc ( Operator < DTYPE > * pInput,int strideRow,int strideCol,int maskRow,int maskCol,int padding1,int padding2) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline AvaragePooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,std::string pName,int pLoadflag) public inline AvaragePooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,int padding,std::string pName,int pLoadflag) public inline ~AvaragePooling2D () public inline int Alloc ( Operator < DTYPE > * pInput,int strideRow,int strideCol,int maskRow,int maskCol,int padding1,int padding2) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class BatchNormalize \u00b6 class BatchNormalize : public Operator< DTYPE > Summary Members Descriptions public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,std::string pName) public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pEpsilon,std::string pName) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) public inline virtual void SetModeTrain () public inline virtual void SetModeAccumulate () public inline virtual void SetModeInference () public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,std::string pName,int pLoadflag) public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pMomentum,std::string pName,int pLoadflag) public inline ~BatchNormalize () public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pMomentum,double pEpsilon) public inline virtual int SetModeTrain () public inline virtual int SetModeAccumulate () public inline virtual int SetModeInference () Members public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,std::string pName) public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pEpsilon,std::string pName) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) public inline virtual void SetModeTrain () public inline virtual void SetModeAccumulate () public inline virtual void SetModeInference () public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,std::string pName,int pLoadflag) public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pMomentum,std::string pName,int pLoadflag) public inline ~BatchNormalize () public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pMomentum,double pEpsilon) public inline virtual int SetModeTrain () public inline virtual int SetModeAccumulate () public inline virtual int SetModeInference () class BatchNormalizeLayer \u00b6 class BatchNormalizeLayer : public Module< DTYPE > \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4 Summary Members Descriptions public inline BatchNormalizeLayer ( Operator < DTYPE > * pInput,int pIsChannelwise,std::string pName) BatchNormalizeLayer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~BatchNormalizeLayer () BatchNormalizeLayer \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int pIsChannelwise,std::string pName) Batch Normalize Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Members public inline BatchNormalizeLayer ( Operator < DTYPE > * pInput,int pIsChannelwise,std::string pName) BatchNormalizeLayer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 BatchNormalizeLayer \ud074\ub798\uc2a4\uc758 Alloc \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. See also : BatchNormalizeLayer ::Alloc(Operator *pInput, int pIsChannelwise, std::string pName) public inline virtual ~BatchNormalizeLayer () BatchNormalizeLayer \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub2e8, \ub3d9\uc801 \ud560\ub2f9 \ubc1b\uc740 Operator\ub4e4\uc740 NeuralNetwork\uc5d0\uc11c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. public inline int Alloc ( Operator < DTYPE > * pInput,int pIsChannelwise,std::string pName) Batch Normalize Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Input Operator\uc758 Element\uc5d0 \ub300\ud574 \ubc30\uce58 \uc815\uaddc\ud654(Batch Normailzation)\uc744 \uc218\ud589\ud55c\ub2e4. Parameters pInput \ud574\ub2f9 Layer\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pIsChannelWise Column-Wise Normalization \uc720\ubb34, 0\uc77c \uc2dc Column-Wise\ub864 \uc5f0\uc0b0, 0\uc774 \uc544\ub2d0 \uc2dc Channel-Wise\ub85c \uc5f0\uc0b0 pName Module\uc758 \uc774\ub984 Returns TRUE See also : BatchNormalize ::BatchNormalize( Operator *pInput, Operator *pScale, Operator *pBias, int pIsChannelwise = TRUE, std::string pName = NULL) Module ::AnalyzeGraph(Operator *pResultOperator) class BEGAN \u00b6 class BEGAN : public GAN< DTYPE > Summary Members Descriptions public BEGAN () public virtual ~BEGAN () public int SetBEGANParameter (float pK,float pLamda,float pGamma) public virtual int TrainGeneratorOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnCPU () public virtual int TrainGeneratorOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnGPU () public float SaveLossX () public float SaveLossG () public int MultiplyKOnOutput () public int MultiplyKOnGradient () public float UpdateK () public float GetK () public float ComputeConvergenceMeasure () public float GetConvergenceMeasure () Members public BEGAN () public virtual ~BEGAN () public int SetBEGANParameter (float pK,float pLamda,float pGamma) public virtual int TrainGeneratorOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnCPU () public virtual int TrainGeneratorOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnGPU () public float SaveLossX () public float SaveLossG () public int MultiplyKOnOutput () public int MultiplyKOnGradient () public float UpdateK () public float GetK () public float ComputeConvergenceMeasure () public float GetConvergenceMeasure () class BEGANDiscriminatorLoss \u00b6 class BEGANDiscriminatorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline BEGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~BEGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline BEGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~BEGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class BEGANGeneratorLoss \u00b6 class BEGANGeneratorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline BEGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~BEGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline BEGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~BEGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class ConcatenateChannelWise \u00b6 class ConcatenateChannelWise : public Operator< DTYPE > Summary Members Descriptions public inline ConcatenateChannelWise ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public inline ~ConcatenateChannelWise () public inline int Alloc (int noOperator,...) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline ConcatenateChannelWise ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public inline ~ConcatenateChannelWise () public inline int Alloc (int noOperator,...) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class Container \u00b6 \uc800\uc7a5\ud558\uae30 \uc704\ud55c Queue\uc5d0 \ud574\ub2f9\ud558\ub294 \ud074\ub798\uc2a4 Tensor , Operator , Tensorholder \uc138 \uac00\uc9c0 \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c Queue\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c\ub2e4. \uae30\ubcf8 queue \uad6c\uc870\uc5d0 \uc778\ub371\uc2a4\ub97c \uc774\uc6a9\ud55c \uc811\uadfc \ubc0f \uc5ed\uc21c\uc73c\ub85c \uc811\uadfc \ub4f1 \ucd94\uac00\uc801\uc778 \uba54\uc18c\ub4dc\uac00 \uad6c\ud604\ub418\uc5b4 \uc788\ub2e4. Summary Members Descriptions public inline Container () Container \uc0dd\uc131\uc790 public inline virtual ~Container () Container \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Push (DTYPE pElement) Queue\uc758 push \uba54\uc18c\ub4dc public inline DTYPE Pop () Queue\uc758 pop \uba54\uc18c\ub4dc public inline DTYPE Pop (DTYPE pElement) Queue\uc5d0\uc11c Element\ub97c \ucc3e\uc544 \ubc18\ud658\ud558\ub294 pop \uba54\uc18c\ub4dc public inline int Reverse () Queue\ub97c \uc5ed\uc21c\uc73c\ub85c \uc7ac\ud560\ub2f9\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc public inline int SetElement (DTYPE pElement,unsigned int index) public inline int GetSize () public inline DTYPE GetLast () public inline DTYPE * GetRawData () const public inline DTYPE GetElement (unsigned int index) public inline DTYPE & operator[] (unsigned int index) []\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 Members public inline Container () Container \uc0dd\uc131\uc790 \uac01 \uba64\ubc84 \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\uc5ec Container \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual ~Container () Container \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ud574\ub2f9 Container \ud074\ub798\uc2a4\ub97c \uc704\ud574 \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ubc18\ud658\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\ud55c\ub2e4. Returns \uc5c6\uc74c public inline int Push (DTYPE pElement) Queue\uc758 push \uba54\uc18c\ub4dc \uae30\uc874\uc758 queue\ub97c \ud560\ub2f9 \ud574\uc81c\ud558\uace0 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Element\ub97c \ub9c8\uc9c0\ub9c9\uc5d0 \ucd94\uac00\ud558\uc5ec \uc0c8\ub85c\uc6b4 Queue\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c\ub2e4. Parameters pElement Queue\uc5d0 \ucd94\uac00\ud558\uace0\uc790 \ud558\ub294 \ubcc0\uc218 Returns \uc131\uacf5 \uc2dc TRUE, \uc2e4\ud328 \uc2dc FALSE public inline DTYPE Pop () Queue\uc758 pop \uba54\uc18c\ub4dc \uae30\uc874\uc758 queue\ub97c \ud560\ub2f9 \ud574\uc81c\ud558\uace0 Queue\uc758 \uccab\ubc88\uc9f8 Element\ub97c \ubc18\ud658\ud55c \ud6c4 \uc0c8\ub85c\uc6b4 Queue\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c\ub2e4. Returns Queue\uc758 \uccab\ubc88\uc9f8 Element public inline DTYPE Pop (DTYPE pElement) Queue\uc5d0\uc11c Element\ub97c \ucc3e\uc544 \ubc18\ud658\ud558\ub294 pop \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Element\uac00 Queue\uc5d0 \uc874\uc7ac\ud560 \uacbd\uc6b0, \ud574\ub2f9 Element\ub97c \ubc18\ud658\ud558\uace0 Queue\ub97c \uc0c8\ub85c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c\ub2e4. Parameters pElement Queue\uc5d0\uc11c \ucc3e\uace0\uc790 \ud558\ub294 Element Returns \uc2e4\ud328 \uc2dc NULL, \uc131\uacf5 \uc2dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Element\uc640 \ub3d9\uc77c\ud55c Queue\uc758 Element public inline int Reverse () Queue\ub97c \uc5ed\uc21c\uc73c\ub85c \uc7ac\ud560\ub2f9\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc Queue\uc758 Element\ub97c \ubc18\ub300 \uc21c\uc11c\ub85c \uc800\uc7a5\ud558\ub294 \uc0c8\ub85c\uc6b4 Queue\ub97c \ud560\ub2f9\ud558\uace0, \uae30\uc874\uc758 Queue\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns TRUE public inline int SetElement (DTYPE pElement,unsigned int index) public inline int GetSize () public inline DTYPE GetLast () public inline DTYPE * GetRawData () const public inline DTYPE GetElement (unsigned int index) public inline DTYPE & operator[] (unsigned int index) []\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 Queue\uc5d0\uc11c \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \uc778\ub371\uc2a4\uc5d0 \ud574\ub2f9\ud558\ub294 ELement\ub97c \ubc18\ud658\ud55c\ub2e4. Parameters index \ucc3e\uace0\uc790 \ud558\ub294 Queue\uc758 Element\uc758 \uc778\ub371\uc2a4 Returns m_aElement[index] class Convolution2D \u00b6 class Convolution2D : public Operator< DTYPE > Summary Members Descriptions public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. public inline virtual ~Convolution2D () Convolution2D\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Convolution2D\uc758 ForwardPropagate \uba54\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) CONVOLUTION_2D\uc758 BackPropagate \uba54\uc18c\ub4dc. public inline int * GetStrideList () public inline int * GetPaddingList () Members public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2\ub85c Alloc\ud55c\ub2e4. Parameters pInput Convolution\ud560 Operator pWeight Convolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding\ub85c Alloc\ud55c\ub2e4. Parameters pInput Convolution\ud560 Operator pWeight Convolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding padding \ud560 \uac12. height, width \ubaa8\ub450 \uc774 \uac12\uc73c\ub85c \ud55c\ub2e4. pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\ub85c Alloc\ud55c\ub2e4. Parameters pInput Convolution\ud560 Operator pWeight Convolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding1 height padding\uac12 padding2 width padding\uac12 pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline virtual ~Convolution2D () Convolution2D\uc758 \uc18c\uba78\uc790. Delete\ub9e4\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uac12\ub4e4\uc744 \ud574\uc81c\ud55c\ub2e4. void Delete() public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. pInput\uacfc pWeight\uc758 Shape\uacfc stride, padding\uac12\uc73c\ub85c output\uc73c\ub85c Result\uc640 Delta\ub85c \uc0ac\uc6a9 \ud560 Tensor\uc758 Shape\uc744 \uc815\uc758\ud55c\ub2e4. Parameters pInput Convolution\ud560 Operator pWeight Convolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding1 height padding\uac12 padding2 width padding\uac12 public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. inputTensorDesc, outputTensorDesc,deltaDesc, inputDeltaDesc, convDesc, filterDesc,filterDeltaDesc\ub4e4\uc744 \uc0ad\uc81c\ud558\uace0 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. cudnn\uc5f0\uc0b0\uc744 \uc704\ud574 \ud560\ub2f9 \ud588\ub358 \uba54\ubaa8\ub9ac\ub4e4\uc744 \ud574\uc81c\uc2dc\ud0a8\ub2e4. public inline virtual int ForwardPropagate (int pTime) Convolution2D\uc758 ForwardPropagate \uba54\uc18c\ub4dc. weight(filter size = rowsizeOfWeight * colsizeOfWeight)\uc640 input\uc758 \uacf1\ud55c \uac12\uc744 result\uc5d0 \ub354\ud574 \ub123\ub294\ub2e4. \uc774\ub54c m_stride\uac12\ub4e4 \ub9cc\ud07c \uc774\ub3d9\ud558\uba70 result\ub97c \uacc4\uc0b0\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) CONVOLUTION_2D\uc758 BackPropagate \uba54\uc18c\ub4dc. Convolution\uc758 \ubbf8\ubd84 \uac12(weight * this_delta, input * this_delta)\uc744 \uacc4\uc0b0\ud558\uc5ec input_delta\uc640 weight_gradient\uc5d0 \uac01\uac01 \ub354\ud574 \ub123\ub294\ub2e4. \uc774\ub54c m_stride\uac12\ub4e4 \ub9cc\ud07c \uc774\ub3d9\ud558\uba70 \ubbf8\ubd84 \uac12\uc744 \ub123\uc744 \uc704\uce58\ub97c \uacc4\uc0b0\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline int * GetStrideList () public inline int * GetPaddingList () class ConvolutionLayer2D \u00b6 class ConvolutionLayer2D : public Module< DTYPE > \uad6c\uc131\ud574 2-Dimensional Convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 2-Dimensional convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4 Summary Members Descriptions public inline ConvolutionLayer2D ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPadding,int use_bias,std::string pName) ConvolutionLayer2D \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~ConvolutionLayer2D () ConvolutionLayer2D \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPaddingRow,int pPaddingCol,int use_bias,std::string pName) 2D convolution Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Members public inline ConvolutionLayer2D ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPadding,int use_bias,std::string pName) ConvolutionLayer2D \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 ConvouutionLayer2D \ud074\ub798\uc2a4\uc758 Alloc \ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4. See also : Convolution2D ::Alloc(Operator *pInput, int pNumInputChannel, int pNumOutputChannel, int pNumKernelRow, int pNumKernelCol, int pStrideRow, int pStrideCol, int pPaddingRow, int pPaddingCol, int use_bias, std::string pName) public inline virtual ~ConvolutionLayer2D () ConvolutionLayer2D \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub2e8, \ub3d9\uc801 \ud560\ub2f9 \ubc1b\uc740 Operator\ub4e4\uc740 NeuralNetwork\uc5d0\uc11c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPaddingRow,int pPaddingCol,int use_bias,std::string pName) 2D convolution Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Input Operator\uc758 Element\uc5d0 \ub300\ud574 2D Convolution\uc744 \uc218\ud589\ud55c\ub2e4. Input Operator\uc758 Element\uc5d0 \ub300\ud574 Weight\ub97c \uc774\uc6a9\ud574 2\ucc28\uc6d0 \ud569\uc131 \uacf1(2D Convolution)\uc744 \uc218\ud589\ud558\uace0 Bias\uac00 \uc874\uc7ac\ud560 \uc2dc Bias\ub97c \ud569(Column Wise Addition)\ud574 Output Operator\ub85c \ub0b4\ubcf4\ub0b4\ub294 layer\ub97c \uad6c\uc131\ud55c\ub2e4. Parameters pInput \ud574\ub2f9 Layer\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pNumInputChannel \ud574\ub2f9 Layer\uc758 Input Operator\uc758 Channel\uc758 \uac2f\uc218, Input Channel\uc5d0 \ub300\ud55c Dimension pNumOutputChannel \ud574\ub2f9 Layer\uc758 Output Operator\uc758 Channel\uc758 \uac2f\uc218, Output Channel\uc5d0 \ub300\ud55c Dimension pNumKernelRow 2D Convolution Layer \ucee4\ub110\uc758 Row Size pNumKernelCol 2D Convolution Layer \ucee4\ub110\uc758 Column Size pStrideRow 2D Convolution Layer\uc758 Row Stride Size pStrideCol 2D Convolution Layer\uc758 Column Stride Size pPaddingRow 2D Convolution Layer\uc758 Row Padding \uac12 pPaddingCol 2D Convolution Layer\uc758 Column Padding \uac12 use_bias Bias \uc0ac\uc6a9 \uc720\ubb34, 0\uc77c \uc2dc \uc0ac\uc6a9 \uc548 \ud568, 0\uc774 \uc544\ub2d0 \uc2dc \uc0ac\uc6a9 pName Module\uc758 \uc774\ub984 Returns TRUE See also : Convolution2D ::Convolution2D ( Operator *pInput, Operator *pWeight, int stride1, int stride2, std::string pName = \"NO NAME\") AddColWise ::AddColWise(Operator *pInput, Operator *pBias, std::string pName) Module ::AnalyzeGraph(Operator *pResultOperator) class CrossEntropy \u00b6 class CrossEntropy : public LossFunction< DTYPE > Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Cross Entropy \uacc4\uc0b0\uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4 Summary Members Descriptions public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,int epsilon) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,int epsilon,std::string pName) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline ~CrossEntropy () CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline virtual int Alloc ( Operator < DTYPE > * pOperator,int epsilon) CrossEntropy Lossfunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) CrossEntropy LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) CrossEntropy LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,int epsilon) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 epsilon\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator epsilon \ub354\ubbf8 \ubcc0\uc218, \uac12\uc744 \ubbf8 \uc9c0\uc815\uc2dc 1e-6f\ub85c \ucd08\uae30\ud654 Returns \uc5c6\uc74c See also : CrossEntropy ::Alloc(Operator *pOperator, int epsilon) public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 1e-6f\uc5d0 \ud574\ub2f9\ud558\ub294 epsilon \uac12\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pName LossFunction\uc758 \uc774\ub984 Returns \uc5c6\uc74c See also : CrossEntropy ::Alloc(Operator *pOperator, int epsilon) public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,int epsilon,std::string pName) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 epsilon\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator epsilon \ub354\ubbf8 \ubcc0\uc218 pName LossFunction\uc758 \uc774\ub984 Returns \uc5c6\uc74c See also : CrossEntropy ::Alloc(Operator *pOperator, int epsilon) public inline ~CrossEntropy () CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline virtual int Alloc ( Operator < DTYPE > * pOperator,int epsilon) CrossEntropy Lossfunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Operator\ub97c Input Operator\uc5d0 \ud560\ub2f9\ud558\uace0 \ucd08\uae30\ud654 \ub41c Result \ud150\uc11c\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uc0dd\uc131\ud55c\ub2e4. Parameters pOperator CrossEntropy LossFunction\uc758 \uc785\ub825\uc5d0 \ud574\ub2f9\ud558\ub294 Operator epsilon \ub354\ubbf8 \ubcc0\uc218 Returns TRUE public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) CrossEntropy LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 \uacb0\uacfc \uac12\uc744 \ub808\uc774\ube14 \uac12\uacfc \ube44\uad50\ud574 Cross Entropy\ub97c \uad6c\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uacb0\uacfc \uac12\uc5d0 \ub300\ud55c Cross Entropy public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) CrossEntropy LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 CrossEntropy LossFunction\uc5d0 \ub300\ud55c \uc785\ub825 Tensor\uc758 Gradient\ub97c \uacc4\uc0b0\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns NULL class DataLoader \u00b6 Summary Members Descriptions public DataLoader ( Dataset < DTYPE > * dataset,int batchSize,int useShuffle,int numOfWorker,int dropLast) public virtual ~DataLoader () public void StartProcess () public void StopProcess () public void DistributeIdxOfData2Thread () public virtual void MakeAllOfIndex (std::vector< int > * pAllOfIndex) public virtual void DataPreprocess () public void Push2IdxBuffer (std::vector< int > * setOfIdx) public std::vector< int > * GetIdxSetFromIdxBuffer () public Tensor < DTYPE > * Concatenate (std::queue< Tensor < DTYPE > * > & setOfData) public void Push2GlobalBuffer (std::vector< Tensor < DTYPE > * > * preprocessedData) public std::vector< Tensor < DTYPE > * > * GetDataFromGlobalBuffer () public inline int GetBatchSize () public inline int GetWorkingSignal () public inline int GetNumOfEachDatasetMember () public inline Dataset < DTYPE > * GetDataset () Members public DataLoader ( Dataset < DTYPE > * dataset,int batchSize,int useShuffle,int numOfWorker,int dropLast) public virtual ~DataLoader () public void StartProcess () public void StopProcess () public void DistributeIdxOfData2Thread () public virtual void MakeAllOfIndex (std::vector< int > * pAllOfIndex) public virtual void DataPreprocess () public void Push2IdxBuffer (std::vector< int > * setOfIdx) public std::vector< int > * GetIdxSetFromIdxBuffer () public Tensor < DTYPE > * Concatenate (std::queue< Tensor < DTYPE > * > & setOfData) public void Push2GlobalBuffer (std::vector< Tensor < DTYPE > * > * preprocessedData) public std::vector< Tensor < DTYPE > * > * GetDataFromGlobalBuffer () public inline int GetBatchSize () public inline int GetWorkingSignal () public inline int GetNumOfEachDatasetMember () public inline Dataset < DTYPE > * GetDataset () class Dataset \u00b6 Summary Members Descriptions public Dataset () public virtual ~Dataset () public virtual void Alloc () public virtual void Dealloc () public virtual std::vector< Tensor < DTYPE > * > * GetData (int idx) public virtual std::vector< Tensor < DTYPE > * > * GetDataOfPositiveLabel (int anchorIdx,int * pPosIdx) public virtual std::vector< Tensor < DTYPE > * > * GetDataOfNegativeLabel (int anchorIdx,int * pNegIdx) public void SetLabel (const int * pLabel,int noLabel) public void SetLabel (const unsigned char * pLabel,int noLabel) public inline virtual int GetLabel (int idx) public inline virtual int GetLength () public int GetNumOfDatasetMember () public inline virtual void CopyData (int idx,DTYPE * pDest) public inline virtual void SetPosNegIndices (std::vector< int > * pvPosIndex,std::vector< int > * pvNegIndex) public inline std::vector< int > & GetPositiveIndices () public inline std::vector< int > & GetNegativeIndices () public inline virtual int GetPositiveIndex (int idx) public inline virtual int GetNegativeIndex (int idx) Members public Dataset () public virtual ~Dataset () public virtual void Alloc () public virtual void Dealloc () public virtual std::vector< Tensor < DTYPE > * > * GetData (int idx) public virtual std::vector< Tensor < DTYPE > * > * GetDataOfPositiveLabel (int anchorIdx,int * pPosIdx) public virtual std::vector< Tensor < DTYPE > * > * GetDataOfNegativeLabel (int anchorIdx,int * pNegIdx) public void SetLabel (const int * pLabel,int noLabel) public void SetLabel (const unsigned char * pLabel,int noLabel) public inline virtual int GetLabel (int idx) public inline virtual int GetLength () public int GetNumOfDatasetMember () public inline virtual void CopyData (int idx,DTYPE * pDest) public inline virtual void SetPosNegIndices (std::vector< int > * pvPosIndex,std::vector< int > * pvNegIndex) public inline std::vector< int > & GetPositiveIndices () public inline std::vector< int > & GetNegativeIndices () public inline virtual int GetPositiveIndex (int idx) public inline virtual int GetNegativeIndex (int idx) class Dropout \u00b6 class Dropout : public Operator< DTYPE > Summary Members Descriptions public inline Dropout ( Operator < DTYPE > * pInput) public inline Dropout ( Operator < DTYPE > * pInput,float pDroprate,std::string pName,int pLoadflag) public inline ~Dropout () public inline int Alloc ( Operator < DTYPE > * pInput,float pDroprate,int pLoadflag) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline Dropout ( Operator < DTYPE > * pInput) public inline Dropout ( Operator < DTYPE > * pInput,float pDroprate,std::string pName,int pLoadflag) public inline ~Dropout () public inline int Alloc ( Operator < DTYPE > * pInput,float pDroprate,int pLoadflag) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class FewShotClassifier \u00b6 Summary Members Descriptions public FewShotClassifier (int inputDim,int featureDim,const std::vector< std::string > vClassName, NeuralNetwork < float > * pNN,int noRef,int * pRefLabel,float * pRefSample,int batchSize) public FewShotClassifier (int inputDim,int featureDim,const std::vector< std::string > vClassName, NeuralNetwork < float > * pNN, KNearestNeighbor * kNN) public std::string Recognize (float * pInputSample,int k) public float GetAccuracy (int noTestSample,float * pTestSample,int * pLabel) public void AddReference (const char * className,float * pRefSample) public int FindClass (const char * className) Members public FewShotClassifier (int inputDim,int featureDim,const std::vector< std::string > vClassName, NeuralNetwork < float > * pNN,int noRef,int * pRefLabel,float * pRefSample,int batchSize) public FewShotClassifier (int inputDim,int featureDim,const std::vector< std::string > vClassName, NeuralNetwork < float > * pNN, KNearestNeighbor * kNN) public std::string Recognize (float * pInputSample,int k) public float GetAccuracy (int noTestSample,float * pTestSample,int * pLabel) public void AddReference (const char * className,float * pRefSample) public int FindClass (const char * className) class GAN \u00b6 class GAN : public NeuralNetwork< DTYPE > Summary Members Descriptions public GAN () public virtual ~GAN () public int AllocLabel (float plabelValue) public NeuralNetwork < DTYPE > * SetGenerator ( NeuralNetwork < DTYPE > * pGen) public NeuralNetwork < DTYPE > * SetDiscriminator ( NeuralNetwork < DTYPE > * pDiscLoss) public Tensorholder < DTYPE > * SetLabel ( Tensorholder < DTYPE > * pLabel) public Switch < DTYPE > * SetSwitch ( Switch < DTYPE > * pSwitch) public void SetGANLossFunctions ( LossFunction < DTYPE > * pGenLoss, LossFunction < DTYPE > * pDiscLoss) public LossFunction < DTYPE > * SetGeneratorLossFunction ( LossFunction < DTYPE > * pGenLoss) public LossFunction < DTYPE > * SetDiscriminatorLossFunction ( LossFunction < DTYPE > * pDiscLoss) public void SetGANOptimizers ( Optimizer < DTYPE > * pGenOpt, Optimizer < DTYPE > * pDiscOpt) public Optimizer < DTYPE > * SetGeneratorOptimizer ( Optimizer < DTYPE > * pGenOpt) public Optimizer < DTYPE > * SetDiscriminatorOptimizer ( Optimizer < DTYPE > * pDiscOpt) public NeuralNetwork < DTYPE > * GetGenerator () public NeuralNetwork < DTYPE > * GetDiscriminator () public Tensorholder < DTYPE > * GetLabel () public Switch < DTYPE > * GetSwitch () public LossFunction < DTYPE > * GetGeneratorLossFunction () public LossFunction < DTYPE > * GetDiscriminatorLossFunction () public Optimizer < DTYPE > * GetGeneratorOptimizer () public Optimizer < DTYPE > * GetDiscriminatorOptimizer () public int TrainGenerator () public int TrainDiscriminator () public int Generate () public virtual int TrainGeneratorOnCPU () public virtual int TrainDiscriminatorOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnCPU () public int GenerateOnCPU () public virtual int TrainGeneratorOnGPU () public virtual int TrainDiscriminatorOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnGPU () public int GenerateOnGPU () public int ResetParameterGradient () public int ResetGeneratorLossFunctionResult () public int ResetGeneratorLossFunctionGradient () public int ResetDiscriminatorLossFunctionResult () public int ResetDiscriminatorLossFunctionGradient () public void Clip (float min,float max) Members public GAN () public virtual ~GAN () public int AllocLabel (float plabelValue) public NeuralNetwork < DTYPE > * SetGenerator ( NeuralNetwork < DTYPE > * pGen) public NeuralNetwork < DTYPE > * SetDiscriminator ( NeuralNetwork < DTYPE > * pDiscLoss) public Tensorholder < DTYPE > * SetLabel ( Tensorholder < DTYPE > * pLabel) public Switch < DTYPE > * SetSwitch ( Switch < DTYPE > * pSwitch) public void SetGANLossFunctions ( LossFunction < DTYPE > * pGenLoss, LossFunction < DTYPE > * pDiscLoss) public LossFunction < DTYPE > * SetGeneratorLossFunction ( LossFunction < DTYPE > * pGenLoss) public LossFunction < DTYPE > * SetDiscriminatorLossFunction ( LossFunction < DTYPE > * pDiscLoss) public void SetGANOptimizers ( Optimizer < DTYPE > * pGenOpt, Optimizer < DTYPE > * pDiscOpt) public Optimizer < DTYPE > * SetGeneratorOptimizer ( Optimizer < DTYPE > * pGenOpt) public Optimizer < DTYPE > * SetDiscriminatorOptimizer ( Optimizer < DTYPE > * pDiscOpt) public NeuralNetwork < DTYPE > * GetGenerator () public NeuralNetwork < DTYPE > * GetDiscriminator () public Tensorholder < DTYPE > * GetLabel () public Switch < DTYPE > * GetSwitch () public LossFunction < DTYPE > * GetGeneratorLossFunction () public LossFunction < DTYPE > * GetDiscriminatorLossFunction () public Optimizer < DTYPE > * GetGeneratorOptimizer () public Optimizer < DTYPE > * GetDiscriminatorOptimizer () public int TrainGenerator () public int TrainDiscriminator () public int Generate () public virtual int TrainGeneratorOnCPU () public virtual int TrainDiscriminatorOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnCPU () public int GenerateOnCPU () public virtual int TrainGeneratorOnGPU () public virtual int TrainDiscriminatorOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnGPU () public int GenerateOnGPU () public int ResetParameterGradient () public int ResetGeneratorLossFunctionResult () public int ResetGeneratorLossFunctionGradient () public int ResetDiscriminatorLossFunctionResult () public int ResetDiscriminatorLossFunctionGradient () public void Clip (float min,float max) class GaussianNoiseGenerator \u00b6 class GaussianNoiseGenerator : public NoiseGenerator< DTYPE > Summary Members Descriptions public inline GaussianNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float mean,float stddev,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator ( Shape * pShape,float mean,float stddev,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float mean,float stddev,float pTrunc,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator ( Shape * pShape,float mean,float stddev,float pTrunc,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline ~GaussianNoiseGenerator () public inline void StartProduce () public inline void StopProduce () public inline int GenerateNoise () public inline int AddNoise2Buffer ( Tensor < DTYPE > * noise) public inline Tensor < DTYPE > * GetNoiseFromBuffer () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline GaussianNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float mean,float stddev,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator ( Shape * pShape,float mean,float stddev,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float mean,float stddev,float pTrunc,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator ( Shape * pShape,float mean,float stddev,float pTrunc,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline ~GaussianNoiseGenerator () public inline void StartProduce () public inline void StopProduce () public inline int GenerateNoise () public inline int AddNoise2Buffer ( Tensor < DTYPE > * noise) public inline Tensor < DTYPE > * GetNoiseFromBuffer () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class GlobalAvaragePooling2D \u00b6 class GlobalAvaragePooling2D : public Operator< DTYPE > Row * Colunm \uacf5\uac04\uc744 GlobalAvaragePooling\ud558\ub294 \ud074\ub798\uc2a4. Summary Members Descriptions public inline GlobalAvaragePooling2D ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) GlobalAvaragePooling2D\uc758 \uc0dd\uc131\uc790. public inline virtual ~GlobalAvaragePooling2D () GlobalAvaragePooling2D\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) GlobalAvaragePooling2D\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc public inline virtual int BackPropagate (int pTime) GlobalAvaragePooling2D\uc758 BackPropagate \ub9e4\uc18c\ub4dc Members public inline GlobalAvaragePooling2D ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) GlobalAvaragePooling2D\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput GlobalAvaragePooling2D\ud560 \ub300\uc0c1 Operator . pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput) . public inline virtual ~GlobalAvaragePooling2D () GlobalAvaragePooling2D\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int ForwardPropagate (int pTime) GlobalAvaragePooling2D\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc input\uc758 row, col\uc0c1\uc758 \uac12\ub4e4\ub4e4 \ubaa8\ub450 \ub354\ud558\uace0 m_divisor\ub85c \ub098\ub208 \uac12\uc744 result Tensor\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) GlobalAvaragePooling2D\uc758 BackPropagate \ub9e4\uc18c\ub4dc Input_grad\uc5d0 \uacc4\uc0b0\ud55c Gradient / m_divisor \ud55c \uac12\uc744 \ub354\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class GradientDescentOptimizer \u00b6 class GradientDescentOptimizer : public Optimizer< DTYPE > Summary Members Descriptions public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,float weightDecayRate,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. public inline ~GradientDescentOptimizer () GradientDescentOptimizer\uc758 \uc18c\uba78\uc790 public inline int Alloc () Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline int Alloc (float momentum) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline int Delete () public inline void InitializeAttributeForGPU (unsigned int idOfDevice) m_aaVelocity\ub0b4\ubd80\uc758 Tensor\uc758 device\ub97c idOfDevice\ubc88\uc9f8 GPU\ub85c \ubc14\uafbc\ub2e4. public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Members public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer pLearningRate Optimizer\uc758 learning rate pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc() public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 momentum\uac12\uc744 \ud30c\ub77c\ubbf8\ud130\ub85c \ud558\ub294 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pParameterContainer pLearningRate Optimizer\uc758 learning rate momentum Optimize\uc758 momentum pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(float momentum) public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,float weightDecayRate,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 momentum\uac12\uc744 \ud30c\ub77c\ubbf8\ud130\ub85c \ud558\ub294 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pParameterContainer pLearningRate Optimizer\uc758 learning rate momentum Optimize\uc758 momentum weightDecayRate @paramp OptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(float momentum) public inline ~GradientDescentOptimizer () GradientDescentOptimizer\uc758 \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline int Alloc () Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_ppParameter\uc640 m_numOfParameter\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE See also : Container < Operator > GetTrainableTensor() See also : int GetTrainableTensorDegree() public inline int Alloc (float momentum) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_aaVelocity, m_momentum\ub97c \ucd08\uae30\ud654 \ud55c\ub2e4. m_aaVelocity\uc5d0 m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. Parameters momentum Optimizer\uc758 monentum\uac12 Returns \uc131\uacf5 \uc2dc TRUE See also : int Alloc() public inline int Delete () public inline void InitializeAttributeForGPU (unsigned int idOfDevice) m_aaVelocity\ub0b4\ubd80\uc758 Tensor\uc758 device\ub97c idOfDevice\ubc88\uc9f8 GPU\ub85c \ubc14\uafbc\ub2e4. Parameters idOfDevice \uc0ac\uc6a9 \ud558\ub294 GPU\ubc88\ud638 public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_momentum\uac12\uc5d0 \ub530\ub77c \ub2e4\ub978 UpdataParameter\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE See also : int UpdateParameter(Operator *pParameter) See also : int UpdateParameter(Operator *pParameter, Tensor *pVelocity) public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Parameter\uc548\uc5d0 \uc788\ub294 Tensor\uc758 \uc0c8\ub85c \uacc4\uc0b0\ub41c gradinet\uac12\uacfc learning_rate\uc758 \uacf1, weightDecayRate\uc640 \uae30\uc874 weight(trainable_date)\uc758 \uacf1\uc73c\ub85c weight(trainable_date)\uac12\uc744 \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 Returns \uc131\uacf5 \uc2dc TRUE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Parameter\uc548\uc5d0 \uc788\ub294 Tensor\uc758 \uc0c8\ub85c \uacc4\uc0b0\ub41c gradinet\uac12\uacfc learning_rate\uc758 \uacf1, weightDecayRate\uc640 \uae30\uc874 weight(trainable_date)\uc758 \uacf1\uc73c\ub85c weight(trainable_date)\uac12\uc744 \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. momentum\uacfc pVelocity\uc758 \uacf1\uacfc learnung_rate\uc640 gradient\uc758 \uacf1\uc73c\ub85c pVelocity\uc758 \uac12\uc744 \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pVelocity \uc5c5\ub370\uc774\ud2b8 \ud560 pVelocity Returns \uc131\uacf5 \uc2dc TURE class HingeLoss \u00b6 class HingeLoss : public LossFunction< DTYPE > Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Hinge Loss \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4 Summary Members Descriptions public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,float theta) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,float theta,std::string pName) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline ~HingeLoss () HingeLoss LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pOperator,float theta) HingeLoss Lossfunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual void Delete () LossFunction \ud074\ub798\uc2a4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int timeIdx) GPU \ub3d9\uc791 \ubaa8\ub4dc\uc5d0\uc11c\uc758 HingeLoss LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) GPU \ub3d9\uc791 \ubaa8\ub4dc\uc5d0\uc11c\uc758 HingeLoss LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,float theta) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 theta\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator theta alloc \uba54\uc18c\ub4dc\uc758 theta \uac12\uc73c\ub85c \uc804\ub2ec\ud560 \ud30c\ub77c\ubbf8\ud130, \uac12\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc744 \uc2dc 1.f\ub85c \ucd08\uae30\ud654 Returns \uc5c6\uc74c See also : HingeLoss ::Alloc(Operator *pOperator, float theta) public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 1.f\uc5d0 \ud574\ub2f9\ud558\ub294 theta \uac12 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pName LossFunction\uc758 \uc774\ub984 Returns \uc5c6\uc74c See also : HingeLoss ::Alloc(Operator *pOperator, float theta) public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,float theta,std::string pName) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 theta\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator theta alloc \uba54\uc18c\ub4dc\uc758 theta \uac12\uc73c\ub85c \uc804\ub2ec\ud560 \ud30c\ub77c\ubbf8\ud130 See also : HingeLoss ::Alloc(Operator *pOperator, float theta) public inline ~HingeLoss () HingeLoss LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline int Alloc ( Operator < DTYPE > * pOperator,float theta) HingeLoss Lossfunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Operator\ub97c Input Operator\uc5d0 \ud560\ub2f9\ud558\uace0 \ucd08\uae30\ud654 \ub41c Result \ud150\uc11c\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uc0dd\uc131\ud55c\ub2e4. \uc5ed\uc804\ud30c\ub97c \uc704\ud55c \uc778\ub371\uc2a4 \ub354\ubbf8 \ud150\uc11c\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uc0dd\uc131\ud558\uace0 theta \uac12\uc744 \ucd08\uae30\ud654\ud55c\ub2e4. Parameters pOperator CrossEntropy LossFunction\uc758 \uc785\ub825\uc5d0 \ud574\ub2f9\ud558\ub294 Operator theta LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218 theta\uc5d0 \ud560\ub2f9\ud560 \uac12 Returns TRUE public inline virtual void Delete () LossFunction \ud074\ub798\uc2a4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Index for BackPropagation Tensor\uac00 \uc874\uc7ac\ud560 \uacbd\uc6b0 Tensor\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud558\uace0 0\uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int timeIdx) GPU \ub3d9\uc791 \ubaa8\ub4dc\uc5d0\uc11c\uc758 HingeLoss LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 \uacb0\uacfc \uac12\uc744 \ub808\uc774\ube14 \uac12\uacfc \ube44\uad50\ud574 Hinge Loss \uac12\uc744 \uad6c\ud55c\ub2e4 Parameters timeIdx Time \ucd95\uc758 \uc778\ub371\uc2a4, \ubbf8\uc9c0\uc815 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 Returns \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c \uacb0\uacfc \uac12\uc5d0 \ub300\ud55c Hinge Loss public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) GPU \ub3d9\uc791 \ubaa8\ub4dc\uc5d0\uc11c\uc758 HingeLoss LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 HingeLoss LossFunction\uc5d0 \ub300\ud55c \uc785\ub825 Tensor\uc758 Gradient\ub97c \uacc4\uc0b0\ud55c\ub2e4 Parameters pTIme Time \ucd95\uc758 \uc778\ub371\uc2a4, \ubbf8\uc9c0\uc815 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 Returns NULL class KNearestNeighbor \u00b6 Summary Members Descriptions public inline KNearestNeighbor () public KNearestNeighbor (int dim,int noClass,int noRef,int * pRefLabel,float * pRefVector) public virtual ~KNearestNeighbor () public void AddReference (int label,float * pRefVector) public int Recognize (float * pInput,int k) public float GetAccuracy (int noTestSamples,int * pTestLabels,float * pTestVectors,int k) Members public inline KNearestNeighbor () public KNearestNeighbor (int dim,int noClass,int noRef,int * pRefLabel,float * pRefVector) public virtual ~KNearestNeighbor () public void AddReference (int label,float * pRefVector) public int Recognize (float * pInput,int k) public float GetAccuracy (int noTestSamples,int * pTestLabels,float * pTestVectors,int k) class Linear \u00b6 class Linear : public Module< DTYPE > \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4 Summary Members Descriptions public inline Linear ( Operator < DTYPE > * pInput,int pNumInputCol,int pNumOutputCol,int use_bias,std::string pName) Linear \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~Linear () Linear \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputCol,int pNumOutputCol,int use_bias,std::string pName) Linear(Fully Connected) Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Members public inline Linear ( Operator < DTYPE > * pInput,int pNumInputCol,int pNumOutputCol,int use_bias,std::string pName) Linear \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 Linear \ud074\ub798\uc2a4\uc758 Alloc \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. See also : linear ::Alloc(Operator *pInput, int pNumInputCol, int pNumOutputCol, int use_bias, std::string pName) public inline virtual ~Linear () Linear \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub2e8, \ub3d9\uc801 \ud560\ub2f9 \ubc1b\uc740 Operator\ub4e4\uc740 NeuralNetwork\uc5d0\uc11c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputCol,int pNumOutputCol,int use_bias,std::string pName) Linear(Fully Connected) Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Input Operator\uc758 Element\uc5d0 \ub300\ud574 Weight\ub97c \uc774\uc6a9\ud574 \ud589\ub82c \uacf1(Matrix Multiplication)\uc744 \uc218\ud589\ud558\uace0 Bias\uac00 \uc874\uc7ac\ud560 \uc2dc Bias\ub97c \ud569(Column Wise Addition)\ud574 Output Operator\ub85c \ub0b4\ubcf4\ub0b4\ub294 layer\ub97c \uad6c\uc131\ud55c\ub2e4. Parameters pInput \ud574\ub2f9 Layer\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pNumInputCol \ud574\ub2f9 Layer\uc758 Input Operator\uc758 Column\uc758 \uac2f\uc218, Input Column\uc5d0 \ub300\ud55c Dimension pNumOutputCol \ud574\ub2f9 Layer\uc758 Output Operator\uc758 Column\uc758 \uac2f\uc218, Output Column\uc5d0 \ub300\ud55c Dimension use_bias Bias \uc0ac\uc6a9 \uc720\ubb34, 0\uc77c \uc2dc \uc0ac\uc6a9 \uc548 \ud568, 0\uc774 \uc544\ub2d0 \uc2dc \uc0ac\uc6a9 pName Module\uc758 \uc774\ub984 Returns TRUE See also : MatMul ::MatMul(Operator *pWeight, Operator *pInput, std::string pName) AddColWise ::AddColWise(Operator *pInput, Operator *pBias, std::string pName) Module ::AnalyzeGraph(Operator *pResultOperator) class LongArray \u00b6 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4. \ud559\uc2b5\uc5d0 \uc0ac\uc6a9 \ub420 Tensor\uc758 \ub9f4\ubc84\ubcc0\uc218 \uc911 LongArray\ub97c \uc815\uc758\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. \uc2e4\uc9c8\uc801\uc73c\ub85c Tensor\ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\uae30\uc704\ud55c \ud074\ub798\uc2a4. \ub370\uc774\ud130\ub97c \ucd08\uae30\ud654\ud558\uace0 CPU\uc640 GPU\uac04 \ub370\uc774\ud130\uc758 \uc774\ub3d9\uc744 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4. Summary Members Descriptions public LongArray (unsigned int pCapacity) public LongArray (unsigned int pTimeSize,unsigned int pCapacityPerTime) \uc785\ub825\ubc1b\uc740 TimeSize\uc640 Capacity\ud06c\uae30\uc758 LongArray\ub97c Alloc\ud558\ub294 \uc0dd\uc131\uc790. public LongArray ( LongArray * pLongArray) LongArray\ub97c deep copy\ud558\ub294 \uba54\uc18c\ub4dc. public virtual ~LongArray () LongArray\uc758 \uc18c\uba78\uc790. public int GetCapacity () public int GetTimeSize () public int GetCapacityPerTime () public DTYPE GetElement (unsigned int index) LongArray\uc758 \ud2b9\uc815 \uc6d0\uc18c\uc758 \uac12\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc. public DTYPE & operator[] (unsigned int index) []\uc5f0\uc0b0\uc790 Overloading public Device GetDevice () public int GetDeviceID () public DTYPE * GetCPULongArray (unsigned int pTime) m_aaHostLongArray\uc911 pTime\uc5d0 \uc788\ub294 LongArray\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc. public int SetDeviceCPU () LongArray\uc758 m_Device\ub97c CPU\ub85c \ubc14\uafb8\ub294 \uba54\uc18c\ub4dc. public int Save (FILE * fp) LongArray\uc758 \ub370\uc774\ud130\ub97c \ud30c\uc77c\uc5d0 \uc800\uc7a5\ud558\ub294 \uba54\uc18c\ub4dc. public int Load (FILE * fp) Members public LongArray (unsigned int pCapacity) public LongArray (unsigned int pTimeSize,unsigned int pCapacityPerTime) \uc785\ub825\ubc1b\uc740 TimeSize\uc640 Capacity\ud06c\uae30\uc758 LongArray\ub97c Alloc\ud558\ub294 \uc0dd\uc131\uc790. Parameters pTimeSize Alloc\ud560 LongArray\uc758 TimeSize pCapacity Alloc\ud560 LongArray\uc758 Capacity Returns \uc5c6\uc74c. See also : LongArray ::Alloc(unsigned int pTimeSize, unsigned int pCapacityPerTime) public LongArray ( LongArray * pLongArray) LongArray\ub97c deep copy\ud558\ub294 \uba54\uc18c\ub4dc. Parameters *pLongArray deep copy\ud560 \ub300\uc0c1 LongArray Returns \uc5c6\uc74c. See also : LongArray ::Alloc(LongArray *pLongArray) public virtual ~LongArray () LongArray\uc758 \uc18c\uba78\uc790. Delete\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9 LongArray\ub97c \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc0ad\uc81c\ud55c\ub2e4 Returns \uc5c6\uc74c. See also : void LongArray ::Delete() public int GetCapacity () public int GetTimeSize () public int GetCapacityPerTime () public DTYPE GetElement (unsigned int index) LongArray\uc758 \ud2b9\uc815 \uc6d0\uc18c\uc758 \uac12\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc. \uba54\ubaa8\ub9ac\uc5d0 \uc788\ub294 LongArray\ub370\uc774\ud130 \uc911 index\ubc88\uc9f8 \uc788\ub294 \uc6d0\uc18c\uc758 \uac12\uc744 \ubc18\ud658\ud55c\ub2e4. \ub2e8, m_Device\uac00 GPU\uc774\uba74 \ubc14\ub85c \uac12\uc744 \uaebc\ub0b4\uc62c \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 CPU\ub85c \ubc14\uafd4 \uc900 \ud6c4 \uac12\uc744 \ucc3e\uc544 \ubc18\ud658\ud55c\ub2e4. Returns m_aaHostLongArray[index / m_CapacityPerTime][index % m_CapacityPerTime] See also : LongArray ::SetDeviceCPU() public DTYPE & operator[] (unsigned int index) []\uc5f0\uc0b0\uc790 Overloading m_aLongArray\uc758 \ud2b9\uc815 \uc704\uce58\uc5d0 \uc788\ub294 \uac12\uc744 return\ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. \ub2e8, m_Device\uac00 GPU\uc77c \uc2dc CPU\ub85c \ubc14\uafd4 \uc900 \ud6c4 \uac12\uc744 \ucc3e\uc544 \ubc18\ud658\ud55c\ub2e4. GetElement\uc640 \ub2e4\ub974\uac8c \uc8fc\uc18c\uac12\uc744 \ubc18\ud658\ud558\uae30 \ub54c\ubb38\uc5d0 LongArray\uc758 \uac12\uc744 \ubcc0\uacbd \ud560 \uc218 \uc788\ub2e4. See also : LongArray ::SetDeviceCPU() public Device GetDevice () public int GetDeviceID () public DTYPE * GetCPULongArray (unsigned int pTime) m_aaHostLongArray\uc911 pTime\uc5d0 \uc788\ub294 LongArray\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc. m_CapacityOfLongArray\ub97c m_TimeSize\ub85c \ub098\ub208 LongArray\ube14\ub7ed \uc911 pTime\ubc88\uc9f8\uc758 LongArray\ube14\ub7ed\uc744 \ubc18\ud658\ud55c\ub2e4. \ub2e8, m_Device\uac00 GPU\uc77c \uc2dc CPU\ub85c \ubc14\uafd4 \uc900 \ud6c4 \uac12\uc744 \ucc3e\uc544 \ubc18\ud658\ud55c\ub2e4. Returns m_aaHostLongArray[pTime] See also : LongArray ::SetDeviceCPU() public int SetDeviceCPU () LongArray\uc758 m_Device\ub97c CPU\ub85c \ubc14\uafb8\ub294 \uba54\uc18c\ub4dc. m_Device\ub97c CPU\ub85c \ubc14\uafbc\ub2e4. CUDNN\uc774 \uc788\uc744 \uacbd\uc6b0 GPU \uba54\ubaa8\ub9ac\uc758 \uac12\ub4e4\uc744 CPU\uba54\ubaa8\ub9ac\ub85c \ubcf5\uc0ac\ud55c\ub2e4. Returns \uc5c6\uc74c. See also : MemcpyGPU2CPU() public int Save (FILE * fp) LongArray\uc758 \ub370\uc774\ud130\ub97c \ud30c\uc77c\uc5d0 \uc800\uc7a5\ud558\ub294 \uba54\uc18c\ub4dc. fwrite\ud568\uc218\ub97c \ud1b5\ud574 *fileForSave\uac00 \uac00\ub9ac\ud0a4\ub294 \ud30c\uc77c\uc5d0 LongArray\ub370\uc774\ud130\ub97c \uc4f4\ub2e4. \ub2e8, m_Device\uac00 GPU\uc77c \uc2dc CPU\ub85c \ubc14\uafd4 \uc900 \ud6c4 \uac12\uc744 \ucc3e\uc544 \ubc18\ud658\ud55c\ub2e4. Parameters *fileForSave \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 file\uc744 \uac00\ub9ac\ub294 \ud3ec\uc778\ud130. Returns \uc131\uacf5 \uc2dc TRUE. See also : LongArray ::SetDeviceCPU() public int Load (FILE * fp) class LossFunction \u00b6 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc744 \ube44\uad50\ud574 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4. Summary Members Descriptions public LossFunction (std::string pName) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public LossFunction ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public virtual ~LossFunction () LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public virtual int Alloc ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel) LossFunction\uc758 \uc785\ub825\uacfc \ub808\uc774\ube14\uc744 \uc9c0\uc815\ud558\ub294 \uba54\uc18c\ub4dc public virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public void SetResult ( Tensor < DTYPE > * pTensor) public void SetGradient ( Tensor < DTYPE > * pTensor) public Tensor < DTYPE > * GetResult () const public Tensor < DTYPE > * GetGradient () const public Operator < DTYPE > * GetOperator () const public Tensor < DTYPE > * GetTensor () const public Operator < DTYPE > * GetLabel () const public std::string GetName () const public virtual Device GetDevice () public virtual int GetDeviceID () public virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public DTYPE & operator[] (unsigned int index) [] \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 public virtual void SetDeviceCPU () public int ResetResult () Result \ud150\uc11c\uc758 ELement\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc public int ResetGradient () Gradient \ud150\uc11c\uc758 ELement\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc Members public LossFunction (std::string pName) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\uac12\uc73c\ub85c \ucd08\uae30\ud654\ud558\uace0, \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 \uc2a4\ud2b8\ub9c1\uc744 m_name\uc5d0 \uc800\uc7a5\ud558\uace0, m_Device\ub97c CPU\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. Parameters pName m_name\uc5d0 \ud560\ub2f9\ud560 LossFunction\uc758 \uc774\ub984, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc \"NO NAME\"\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns \uc5c6\uc74c public LossFunction ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\uac12\uc73c\ub85c \ucd08\uae30\ud654\ud558\uace0, \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 \uc2a4\ud2b8\ub9c1\uc744 m_name\uc5d0 \uc800\uc7a5\ud558\uace0, m_Device\ub97c CPU\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. pOperator\uc640 pLabel\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c LossFunction ::Alloc(Operator *pOperator, Operator *pLabel) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator Alloc \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 LossFunction\uc758 \uc785\ub825\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pLabel Alloc \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 LossFunction\uc758 \uc785\ub825\uc5d0 \ud574\ub2f9\ud558\ub294 \ub808\uc774\ube14 pName m_name\uc5d0 \ud560\ub2f9\ud560 LossFunction\uc758 \uc774\ub984, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc \"NO NAME\"\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns \uc5c6\uc74c public virtual ~LossFunction () LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 LossFunction ::Delete() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4. Returns \uc5c6\uc74c public virtual int Alloc ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel) LossFunction\uc758 \uc785\ub825\uacfc \ub808\uc774\ube14\uc744 \uc9c0\uc815\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Operator\uc640 Operator\uc758 Result \ud3ec\uc778\ud130 \uac12\uacfc \ub808\uc774\ube14 \uac12\uc744 \uc800\uc7a5\ud55c\ub2e4. Parameters pOperator LossFunction\uc758 \uc785\ub825\uc774 \ub418\ub294 Operator plabel LossFunction\uc758 \uc785\ub825\uc774 \ub418\ub294 \ub808\uc774\ube14 Returns TRUE public virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public void SetResult ( Tensor < DTYPE > * pTensor) public void SetGradient ( Tensor < DTYPE > * pTensor) public Tensor < DTYPE > * GetResult () const public Tensor < DTYPE > * GetGradient () const public Operator < DTYPE > * GetOperator () const public Tensor < DTYPE > * GetTensor () const public Operator < DTYPE > * GetLabel () const public std::string GetName () const public virtual Device GetDevice () public virtual int GetDeviceID () public virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public DTYPE & operator[] (unsigned int index) [] \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 index \uac12 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec Result \ud150\uc11c\uc5d0\uc11c []\uc5f0\uc0b0\uc790 \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters index Tensor\uc758 [] \uc5f0\uc0b0\uc790 \uba54\uc18c\ub4dc\uc5d0 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 \uc778\ub371\uc2a4 \uac12 Returns (*m_aResult)[index] See also : Tensor ::operator public virtual void SetDeviceCPU () public int ResetResult () Result \ud150\uc11c\uc758 ELement\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc Result \ud150\uc11c\uc758 Device \uba64\ubc84 \ubcc0\uc218\uac00 CPU\uc778 \uacbd\uc6b0 CPU \uba54\ubaa8\ub9ac\uc5d0\uc11c \ucd08\uae30\ud654\ud558\uace0, CPU\uc778 \uacbd\uc6b0 GPU \uba54\ubaa8\ub9ac\uc5d0\uc11c \ucd08\uae30\ud654\ud55c\ub2e4. Returns Result \ud150\uc11c\uc758 Device \uba64\ubc84 \ubcc0\uc218\uac00 Invalid\ud55c \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uacbd\uc6b0 FALSE\ub97c \uadf8 \uc678\uc758 \uacbd\uc6b0 TRUE\ub97c \ubc18\ud658\ud55c\ub2e4. public int ResetGradient () Gradient \ud150\uc11c\uc758 ELement\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc Gradient \ud150\uc11c\uc758 Device \uba64\ubc84 \ubcc0\uc218\uac00 CPU\uc778 \uacbd\uc6b0 CPU \uba54\ubaa8\ub9ac\uc5d0\uc11c \ucd08\uae30\ud654\ud558\uace0, CPU\uc778 \uacbd\uc6b0 GPU \uba54\ubaa8\ub9ac\uc5d0\uc11c \ucd08\uae30\ud654\ud55c\ub2e4. Returns Gradient \ud150\uc11c\uc758 Device \uba64\ubc84 \ubcc0\uc218\uac00 Invalid\ud55c \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uacbd\uc6b0 FALSE\ub97c \uadf8 \uc678\uc758 \uacbd\uc6b0 TRUE\ub97c \ubc18\ud658\ud55c\ub2e4. class LRelu \u00b6 class LRelu : public Operator< DTYPE > Summary Members Descriptions public inline LRelu ( Operator < DTYPE > * pInput,float negativeSlope,int pLoadflag) LRelu\uc758 \uc0dd\uc131\uc790. public inline LRelu ( Operator < DTYPE > * pInput,float negativeSlope,std::string pName,int pLoadflag) LRelu\uc758 \uc0dd\uc131\uc790. public inline ~LRelu () LRelu\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput,float negativeSlope) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) LRelu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) LRelu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. Members public inline LRelu ( Operator < DTYPE > * pInput,float negativeSlope,int pLoadflag) LRelu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, negativeSlope\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator negativeSlope \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uae30\uc6b8\uae30 int Alloc(Operator *pInput, float negativeSlope) public inline LRelu ( Operator < DTYPE > * pInput,float negativeSlope,std::string pName,int pLoadflag) LRelu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, negativeSlope\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator negativeSlope \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uae30\uc6b8\uae30 pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput, float negativeSlope) public inline ~LRelu () LRelu\uc758 \uc18c\uba78\uc790. See also : void Delete() public inline int Alloc ( Operator < DTYPE > * pInput,float negativeSlope) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. negativeSlope\uc740 m_negativeSlope\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pInput \uc0dd\uc131\ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator negativeSlope \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uae30\uc6b8\uae30 Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) LRelu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. input\uc758 Tensor\uac12\ub4e4 \uc911 0.f\uc774\uc0c1\uc758 \uac12\uc740 \uadf8\ub300\ub85c result\uc5d0 \uc800\uc7a5\ud558\uace0, 0.f\ubbf8\ub9cc\uc758 \uac12\uc740 m_negativeSlope\uc744 \uacf1\ud55c \ud6c4 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) LRelu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. result\uac12\uc774 0\ubcf4\ub2e4 \ud074 \uacbd\uc6b0 input_delta\uc5d0 \ub354\ud558\uace0, 0\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0 input_delta\uc5d0 m_negativeSlope\uc744 \uacf1\ud55c \ud6c4 \ub354\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class MatMul \u00b6 class MatMul : public Operator< DTYPE > Summary Members Descriptions public inline MatMul ( Operator < DTYPE > * pWeight, Operator < DTYPE > * pInput,std::string pName,int pLoadflag) MatMul\uc758 \uc0dd\uc131\uc790. public inline virtual ~MatMul () MatMul\uc758 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pWeight, Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pWeight, pInput\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) MatMul\uc758 ForwardPropagate\ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) MatMul\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline MatMul ( Operator < DTYPE > * pWeight, Operator < DTYPE > * pInput,std::string pName,int pLoadflag) MatMul\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pWeight\uc640 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pWeight MatMul\ud560 weight. pInput Matmul\ud560 input Operator . pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pWeight, Operator *pInput) public inline virtual ~MatMul () MatMul\uc758 \uc18c\uba78\uc790 Delete\ub9e4\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uac12\ub4e4\uc744 \ud574\uc81c\ud55c\ub2e4. void Delete() public inline int Alloc ( Operator < DTYPE > * pWeight, Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pWeight, pInput\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. timesize, batchsize, channelsize, row_size\ub294 pInput\uc758 Shape\uacfc \uac19\uac8c, colsize\ub294 pWeight\uc640 \uac19\uac8c \ucd08\uae30\ud654\ud55c\ub2e4. input x weight\uc744 \ud558\uae30 \ub54c\ubb38\uc5d0 rowsize\ub294 pInput\uc758 Shape\uc744, colsize\ub294 pWeight\uc758 Shape\uc744 \ubc1b\ub294\ub2e4. Result\uc640 Delta\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 input\uc758 rowsize, weight\uc758 colsize\ub97c \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pWeight MatMul\ud560 weight. pInput Matmul\ud560 input Operator . Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. inputTensorDesc, outputTensorDesc,deltaDesc, inputDeltaDesc, convDesc, filterDesc,filterDeltaDesc\ub4e4\uc744 \uc0ad\uc81c\ud558\uace0 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. m_devWorkSpace, m_dataDevWorkSpace, m_filterDevWorkSpace\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) MatMul\uc758 ForwardPropagate\ub9e4\uc18c\ub4dc. weight\uc758 \uac01 row\uc758 \uac12\ub4e4\uacfc input\uc758 Colunm\uc758 \uac01 \uac12\ub4e4\uc744 \uacf1\ud558\uc5ec result\uc5d0 \ub354\ud55c\ub2e4. [2 x 3] x [3 x 1]\uc77c\ub54c 3\uc774 hiddensize Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) MatMul\uc758 BackPropagate \ub9e4\uc18c\ub4dc. input_delta\uc5d0 weight * this_delta\uac12\uc744 \ub354\ud574\uc8fc\uace0, weight_gradient\uc5d0\ub294 input * this_delta\uac12\uc744 \ub354\ud574\uc900\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class Maxpooling2D \u00b6 class Maxpooling2D : public Operator< DTYPE > Summary Members Descriptions public inline Maxpooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,std::string pName,int pLoadflag) Maxpooling2D\uc758 \uc0dd\uc131\uc790 public inline Maxpooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,int padding,std::string pName,int pLoadflag) Maxpooling2D\uc758 \uc0dd\uc131\uc790 public inline ~Maxpooling2D () Maxpooling2D\uc758 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int strideRow,int strideCol,int maskRow,int maskCol,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \ubcc0\uc218\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () Delete \uba54\uc18c\ub4dc public inline virtual int ForwardPropagate (int pTime) Maxpooling2D\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) Maxpooling2D\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline Maxpooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,std::string pName,int pLoadflag) Maxpooling2D\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, strideRow, strideCol, maskRow, maskCol\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Maxpooling2D\ud560 \ub300\uc0c1 Operator . maskRow Filter\uc758 Row size maskCol Filter\uc758 Colunm size strideRow Row stirde\uac12 strideCol Colunm stride\uac12 pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984 public inline Maxpooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,int padding,std::string pName,int pLoadflag) Maxpooling2D\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, strideRow, strideCol, maskRow, maskCol\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Maxpooling2D\ud560 \ub300\uc0c1 Operator . maskRow Filter\uc758 Row size maskCol Filter\uc758 Colunm size strideRow Row stirde\uac12 strideCol Colunm stride\uac12 padding padding size pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984 public inline ~Maxpooling2D () Maxpooling2D\uc758 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int strideRow,int strideCol,int maskRow,int maskCol,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \ubcc0\uc218\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. m_stride, m_mask, m_padding\uac12\ub4e4\uc744 \ucd08\uae30\ud654 \ud558\uace0 rowsize, colsize\ub97c \uacb0\uc815\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator . strideRow Row stirde\uac12. strideCol Colunm stride\uac12. maskRow Filter\uc758 Row size. maskCol Filter\uc758 Colunm size. padding1 row_padding \uac12. padding2 col_padding \uac12. Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () Delete \uba54\uc18c\ub4dc cudnnDescriptor\ub4e4\uc744 GPU\uba54\ubaa8\ub9ac\uc5d0\uc11c \ud574\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c null\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Maxpooling2D\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. Filter(temprow * tempcol)\uc758 \ubc94\uc704 \uc911 \uac00\uc7a5 \ud070 \uac12\uc744 result\uc5d0 \uc800\uc7a5\ud558\uace0, index\ub294 indexOfMaxInput\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) Maxpooling2D\uc758 BackPropagate \ub9e4\uc18c\ub4dc. \uacc4\uc0b0\ud55c delta\uac12\uc744 input_delta\uc5d0 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class Module \u00b6 class Module : public Operator< DTYPE > \uad6c\uc131\ud574 \ubaa8\ub4c8\ud654\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 \ub2e8\uc77c Operator\ub85c\uc11c \ud560 \uc218 \uc5c6\ub294 \uae30\ub2a5\ub4e4\uc744 \uc218\ud589\ud558\uac8c \ud55c\ub2e4 Module\uc740 \ud558\ub098\uc758 Operator\ucc98\ub7fc \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c \uc548\uc5d0\uc11c \uc791\ub3d9\ud55c\ub2e4 Summary Members Descriptions public Module (std::string pName) Module \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public virtual ~Module () Module \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public virtual int SetInput (int pNumOfInput,...) public virtual Operator < DTYPE > * SetInput ( Operator < DTYPE > * pInput) public virtual Operator < DTYPE > * SetParameter ( Operator < DTYPE > * pParameter) public virtual Operator < DTYPE > * SetExecutableOperater ( Operator < DTYPE > * pExecutableOperater) public int IsInput ( Operator < DTYPE > * pOperator) \ud574\ub2f9 Operator\uac00 Module\uc758 Input\uc778\uc9c0 \ud655\uc778\ud558\ub294 \uba54\uc18c\ub4dc public int IsValid ( Operator < DTYPE > * pOperator) \ud574\ub2f9 Operator\uc758 Output Operator\ub4e4\uc774 \ubaa8\ub4c8 \uadf8\ub798\ud504\uc5d0 \uc911\ubcf5\uc73c\ub85c \ud3ec\ud568\ub418\ub294 \uc9c0 \ud655\uc778\ud558\ub294 \uba54\uc18c\ub4dc public Operator < DTYPE > * AnalyzeGraph ( Operator < DTYPE > * pResultOperator) \ud559\uc2b5 \uac00\ub2a5\ud55c \ud615\ud0dc\ub85c \ubaa8\ub4c8 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc public int FeedInputTensor (int pNumOfInput,...) \uc2e0\uacbd\ub9dd\uc5d0 Input \ub9ac\uc2a4\ud2b8\ub97c \ucd94\uac00\ud558\ub294 \uba54\uc18c\ub4dc public Container](#classContainer)< [Operator < DTYPE > * > * GetExcutableOperatorContainer () public int GetNumOfExcutableOperator () public virtual Tensor < DTYPE > * GetResult () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetResultContainer () public virtual Tensor < DTYPE > * GetGradient () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetGradientContainer () public virtual Tensor < DTYPE > * GetDelta () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetDeltaContainer () public Container](#classContainer)< [Operator < DTYPE > * > * GetParameterContainer () public Container](#classContainer)< [Operator < DTYPE > * > * GetParameter () public virtual int SetIsTensorholder (int pIsParameter) public virtual int SetIsTrainable (int pIsTrainable) public virtual int SetModeTrain () public virtual int SetModeAccumulate () public virtual int SetModeInference () public virtual int ForwardPropagate (int pTime) \ubaa8\ub4c8 \uadf8\ub798\ud504\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public virtual int BackPropagate (int pTime) \ubaa8\ub4c8 \uadf8\ub798\ud504\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public virtual int ResetResult () \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator\ub4e4\uc758 Result Container\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. public virtual int ResetGradient () \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator\ub4e4\uc758 Gradient Container\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. public virtual void PrintInformation (int level) public virtual void SetDeviceCPU () \ubaa8\ub4c8 \uadf8\ub798\ud504 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc7a5\uce58\ub97c CPU\ub85c \uc804\ud658\ud558\ub294 \uba54\uc18c\ub4dc public void SetDeviceCPUOnModule () public virtual int Save (char * nameOfFile) public virtual int Load (char * nameOfFile) public virtual int Save (FILE * fp) public virtual int Load (FILE * fp) public virtual int SaveComponents (char * nameOfDir) public virtual int LoadComponents (char * nameOfDir) Members public Module (std::string pName) Module \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \uac01 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Module \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4. \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL \uac12\uc73c\ub85c, \uac01 \uc815\uc218 \ud0c0\uc785 \ubcc0\uc218\ub4e4\uc740 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\uace0 Module ::Alloc() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. See also : Module ::Alloc() Returns \uc5c6\uc74c public virtual ~Module () Module \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc1b\uc740 Module \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4. Returns \uc5c6\uc74c See also : Module ::Delete() public virtual int SetInput (int pNumOfInput,...) public virtual Operator < DTYPE > * SetInput ( Operator < DTYPE > * pInput) public virtual Operator < DTYPE > * SetParameter ( Operator < DTYPE > * pParameter) public virtual Operator < DTYPE > * SetExecutableOperater ( Operator < DTYPE > * pExecutableOperater) public int IsInput ( Operator < DTYPE > * pOperator) \ud574\ub2f9 Operator\uac00 Module\uc758 Input\uc778\uc9c0 \ud655\uc778\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Operator\uac00 Module\uc758 Input Container\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uc9c0 \ud655\uc778\ud55c\ub2e4. Parameters pOperator Input \uc5ec\ubd80\ub97c \ud655\uc778\ud558\uace0\uc790 \ud558\ub294 Operator Returns Input container\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uacbd\uc6b0 TRUE, \ud3ec\ud568\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub294 \uacbd\uc6b0 FALSE\ub97c \ubc18\ud658\ud55c\ub2e4. public int IsValid ( Operator < DTYPE > * pOperator) \ud574\ub2f9 Operator\uc758 Output Operator\ub4e4\uc774 \ubaa8\ub4c8 \uadf8\ub798\ud504\uc5d0 \uc911\ubcf5\uc73c\ub85c \ud3ec\ud568\ub418\ub294 \uc9c0 \ud655\uc778\ud558\ub294 \uba54\uc18c\ub4dc \ud574\ub2f9 Operator\uc758 Output container \uba64\ubc84 \ubcc0\uc218\uc5d0 \ub2f4\uaca8 \uc788\ub294 Operator\ub4e4\uc774 Module\uc758 Excutable Operator container\uc5d0 \uc911\ubcf5\ub418\uc5b4 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uc9c0 \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4. Parameters pOperator Output Container \uba64\ubc84 \ubcc0\uc218\uac00 Excutable Operator Container\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uc9c0 \ud655\uc778\ud558\uace0\uc790 \ud558\ub294 Operator Returns \ud574\ub2f9 Operator\uc758 Output Container \uba64\ubc84 \ubcc0\uc218\uac00 Excutable Operator Container\uc5d0 \uc911\ubcf5\ub418\uc5b4 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba74 TRUE\ub97c \uc544\ub2c8\uba74 FALSE\ub97c \ubc18\ud658\ud55c\ub2e4. public Operator < DTYPE > * AnalyzeGraph ( Operator < DTYPE > * pResultOperator) \ud559\uc2b5 \uac00\ub2a5\ud55c \ud615\ud0dc\ub85c \ubaa8\ub4c8 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc \ubaa8\ub4c8\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9\uc73c\ub85c \ubaa8\ub4c8 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud55c\ub2e4. \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 \ubaa8\ub4c8\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\ub97c \uc2dc\uc791\uc73c\ub85c \ubaa8\ub4c8\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\uae4c\uc9c0 \uc5ed\uc21c\uc73c\ub85c, Operator\uac00 Input Tensor \ubc0f \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc778 \uacbd\uc6b0 Module \ud074\ub798\uc2a4\uc758 Input Container \uba64\ubc84 \ubcc0\uc218\uc5d0 \ucd94\uac00\ud558\uace0 \ub098\uba38\uc9c0 \uacbd\uc6b0\uc5d0\ub294 Module \ud074\ub798\uc2a4\uc758 Excutable Operator Container \uba64\ubc84 \ubcc0\uc218\uc5d0 \ucd94\uac00\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\uc758 Excutable Operator Container \uba64\ubc84 \ubcc0\uc218\uc5d0 Operator\ub4e4\uc774 \ubaa8\ub450 \ucd94\uac00\ub418\uba74 Container\ub97c \uc5ed\uc21c\uc73c\ub85c \ubcc0\uacbd\ud55c\ub2e4. Operator \ud0d0\uc0c9 \uc21c\uc11c\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9\uc744 \ub530\ub974\uba70, \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Output Operator\ubd80\ud130 \ud574\ub2f9 Operator\uc758 Input Operator \ub9ac\uc2a4\ud2b8\ub97c \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9 \ubc29\uc2dd\uc744 \uc774\uc6a9\ud574 \uc21c\uc11c\ub300\ub85c \uc9c4\ud589\ud55c\ub2e4. \uac01 Operator\ub4e4\uc740 Module ::IsValid(Operator *pOperator) \uba54\uc18c\ub4dc\ub97c \uc774\uc6a9\ud558\uc5ec \ubaa8\ub4c8 \uadf8\ub798\ud504 \uc548\uc5d0\uc11c\uc758 \uc911\ubcf5 \uc5ec\ubd80\ub97c \ud655\uc778\ud558\uba70 \uc911\ubcf5\ub418\ub294 \uacbd\uc6b0 \uadf8\ub798\ud504\uc5d0 \ucd94\uac00\ud558\uc9c0 \uc54a\ub294\ub2e4. Parameters pResultOperator \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0\uc790 \ud558\ub294 \uc2e0\uacbd\ub9dd\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator Returns \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0\uc790 \ud558\ub294 \uc2e0\uacbd\ub9dd\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator public int FeedInputTensor (int pNumOfInput,...) \uc2e0\uacbd\ub9dd\uc5d0 Input \ub9ac\uc2a4\ud2b8\ub97c \ucd94\uac00\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Tensor\ub4e4\uc744 \uc21c\uc11c\ub300\ub85c NeuralNetwork\uc758 Input Container\uc5d0 \ub2f4\uaca8 \uc788\ub294 Operator\ub4e4\uc758 Result\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pNumOfInput Input Container\uc5d0 \ucd94\uac00\ud558\uace0 \uc2f6\uc740 Tensor\ub4e4\uc758 \uac1c\uc218 ... Input Container\uc5d0 \ucd94\uac00\ud558\uace0 \uc2f6\uc740 Tensor\ub4e4\uc758 \ub9ac\uc2a4\ud2b8 Returns TRUE See also : Operator ::SetResult(Tensor *pTensor) public Container](#classContainer)< [Operator < DTYPE > * > * GetExcutableOperatorContainer () public int GetNumOfExcutableOperator () public virtual Tensor < DTYPE > * GetResult () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetResultContainer () public virtual Tensor < DTYPE > * GetGradient () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetGradientContainer () public virtual Tensor < DTYPE > * GetDelta () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetDeltaContainer () public Container](#classContainer)< [Operator < DTYPE > * > * GetParameterContainer () public Container](#classContainer)< [Operator < DTYPE > * > * GetParameter () public virtual int SetIsTensorholder (int pIsParameter) public virtual int SetIsTrainable (int pIsTrainable) public virtual int SetModeTrain () public virtual int SetModeAccumulate () public virtual int SetModeInference () public virtual int ForwardPropagate (int pTime) \ubaa8\ub4c8 \uadf8\ub798\ud504\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Excutable Operator Container\uc758 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::ForwardPropagate(int pTime) \uba54\uc18c\ub4dc\ub97c \uc21c\uc11c\ub300\ub85c \ud638\ucd9c\ud55c\ub2e4. Parameters pTime \uac01 ForwardPropagate \uba54\uc18c\ub4dc\uc5d0 \uc804\ub2ec\ud560 Time\uc758 \uc778\ub371\uc2a4 Returns TRUE public virtual int BackPropagate (int pTime) \ubaa8\ub4c8 \uadf8\ub798\ud504\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uc5ed\uc21c\uc73c\ub85c Excutable Operator Container\uc758 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::ForwardPropagate(int pTime) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pTime \uac01 ForwardPropagate \uba54\uc18c\ub4dc\uc5d0 \uc804\ub2ec\ud560 Time\uc758 \uc778\ub371\uc2a4 Returns TRUE public virtual int ResetResult () \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator\ub4e4\uc758 Result Container\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. Excutable Operator Container\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::ResetResult() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns TRUE public virtual int ResetGradient () \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator\ub4e4\uc758 Gradient Container\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. Excutable Operator Container\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::ResetGradient() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns TRUE public virtual void PrintInformation (int level) public virtual void SetDeviceCPU () \ubaa8\ub4c8 \uadf8\ub798\ud504 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc7a5\uce58\ub97c CPU\ub85c \uc804\ud658\ud558\ub294 \uba54\uc18c\ub4dc Module\uc758 Device \uba64\ubc84\ubcc0\uc218\ub97c CPU\ub85c \uc804\ud658\ud558\uace0, Excutable Operator Container\uc758 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::SetDeviceCPU() \uba54\uc18c\ub4dc\ub97c \uc21c\uc11c\ub300\ub85c \ud638\ucd9c\ud55c\ub2e4. Returns \uc5c6\uc74c public void SetDeviceCPUOnModule () public virtual int Save (char * nameOfFile) public virtual int Load (char * nameOfFile) public virtual int Save (FILE * fp) public virtual int Load (FILE * fp) public virtual int SaveComponents (char * nameOfDir) public virtual int LoadComponents (char * nameOfDir) class MSE \u00b6 class MSE : public LossFunction< DTYPE > Squared Error) Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 MSE(Mean Squared Error) \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4 Summary Members Descriptions public inline MSE ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) MSE(Mean Squared Error) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~MSE () MSE(Mean Squared Error) LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline virtual int Alloc ( Operator < DTYPE > * pOperator) MSE(Mean Squared Error) LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) MSE(Mean Squared Error) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) MSE(Mean Squared Error) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline DTYPE Error (DTYPE pred,DTYPE ans) Members public inline MSE ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) MSE(Mean Squared Error) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec MSE ::Alloc(Operator *pOperator) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator MSE ::Alloc(Operator *pOperator) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pName LossFunction\uc758 \uc774\ub984 Returns \uc5c6\uc74c See also : MSE ::Alloc(Operator *pOperator) public inline virtual ~MSE () MSE(Mean Squared Error) LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline virtual int Alloc ( Operator < DTYPE > * pOperator) MSE(Mean Squared Error) LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Operator\ub97c Input Operator\uc5d0 \ud560\ub2f9\ud558\uace0 \ucd08\uae30\ud654 \ub41c Result \ud150\uc11c\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uc0dd\uc131\ud55c\ub2e4. Parameters pOperator MSE LossFunction\uc758 \uc785\ub825\uc5d0 \ud574\ub2f9\ud558\ub294 Operator Returns TRUE public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) MSE(Mean Squared Error) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 \uacb0\uacfc \uac12\uc744 \ub808\uc774\ube14 \uac12\uacfc \ube44\uad50\ud574 Mse(Mean Squared Error)\ub97c \uad6c\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uacb0\uacfc \uac12\uc5d0 \ub300\ud55c MSE(Mean Squared Error) public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) MSE(Mean Squared Error) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 MSE(Mean Squared Error) \uc5d0 \ub300\ud55c \uc785\ub825 Tensor\uc758 Gradient\ub97c \uacc4\uc0b0\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns NULL public inline DTYPE Error (DTYPE pred,DTYPE ans) class NagOptimizer \u00b6 class NagOptimizer : public Optimizer< DTYPE > Summary Members Descriptions public inline NagOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,OptimizeDirection pOptimizeDirection) NagOptimizer\uc758 \uc0dd\uc131\uc790. public inline NagOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,float weightDecayRate,OptimizeDirection pOptimizeDirection) NagOptimizer\uc758 \uc0dd\uc131\uc790. public inline ~NagOptimizer () NagOptimizer\uc758 \uc18c\uba78\uc790 public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc public inline int Alloc (float momentum) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Members public inline NagOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,OptimizeDirection pOptimizeDirection) NagOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate momentum step size \uc870\uc815 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(momentum) public inline NagOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,float weightDecayRate,OptimizeDirection pOptimizeDirection) NagOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate m_momentum step size \uc870\uc815 \uac12 weightDecayRate \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud074 \ub54c \ud328\ub110\ud2f0\ub97c \ubd80\uacfc\ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(momentum) public inline ~NagOptimizer () NagOptimizer\uc758 \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_aaVelocity\uc758 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline int Alloc (float momentum) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_ppParameter, m_numOfParameter, m_aaVelocity\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. m_aaVelocity\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. Parameters m_momentum step size \uc870\uc815 \uac12 Returns \uc131\uacf5 \uc2dc TRUE See also : Container < Operator > GetTrainableTensor() See also : int GetTrainableTensorDegree() public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_momentum \uc720\ubb34\uc5d0 \ub530\ub77c UpdateParameter \ud638\ucd9c\uacfc \uc5d0\ub7ec \uba54\uc138\uc9c0 \ud638\ucd9c Returns \uc131\uacf5 \uc2dc TRUE See also : int UpdateParameter (( Operator *pParameter, Tensor *pVelocity) public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 Returns \uc131\uacf5 \uc2dc TRUE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc prev_Velocity \ud150\uc11c \uc0dd\uc131 \ud6c4 \ud604\uc7ac pVelocity \uc800\uc7a5 pVelocity\ub97c Update \ud55c\ub2e4. m_momentum \uac12\uc73c\ub85c \uc870\uc815\ub41c prev_Velocity\uc640 pVelocity\uc758 \uc5f0\uc0b0\uc73c\ub85c \ud30c\ub77c\ubbf8\ud130 Update \ud559\uc2b5 \ucd08\ubc18 \ubd80, pFirstMomentum, pFirstVelocity\ub294 0\uc73c\ub85c biased \uc0c1\ud0dc\uc774\ubbc0\ub85c \uc774\ub97c unbiased \ud574\uc8fc\ub294 \uc5f0\uc0b0\ud558\uc5ec \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. signed_learning_rate\uc640 pUnbiasedMomentum\uacf1\uc744 root\uac00 \uc801\uc6a9\ub41c pUnbiasedVelocity\uc640 m_epsilon\uc73c\ub85c \ub098\ub208 \uac12\uc73c\ub85c weight(trainable_data)\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pVelocity \uc5c5\ub370\uc774\ud2b8 \ud560 pVelocity Returns \uc131\uacf5 \uc2dc TURE class NeuralNetwork \u00b6 class NeuralNetwork : public Module< DTYPE > \ubaa8\ub378 \uc0dd\uc131, \ud559\uc2b5 \ubc0f \ud3c9\uac00\ub97c \ucd1d\uad04\ud558\ub294 \ud074\ub798\uc2a4 Operator , Module , Loss Function, Optimizer \ud074\ub798\uc2a4\ub97c \uc0dd\uc131 \ubc0f \ud65c\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\uc131\ud558\uace0 \ud559\uc2b5\uc2dc\ud0a8\ub2e4 Summary Members Descriptions public NeuralNetwork () NeuralNetwork \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public virtual ~NeuralNetwork () NeuralNetwork \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public LossFunction < DTYPE > * SetLossFunction ( LossFunction < DTYPE > * pLossFunction) \ud2b9\uc815 Loss Function\uc744 \ub9e4\uac1c \ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\ub97c \uc2e0\uacbd\ub9dd\uc758 Loss Function\ub85c \uc9c0\uc815\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc public Optimizer < DTYPE > * SetOptimizer ( Optimizer < DTYPE > * pOptimizer) \ud2b9\uc815 Optimizer\ub97c \ub9e4\uac1c \ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\ub97c \uc2e0\uacbd\ub9dd\uc758 Optimizer\ub85c \uc9c0\uc815\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc public Operator < DTYPE > * GetResultOperator () public virtual Tensor < DTYPE > * GetResult () public LossFunction < DTYPE > * GetLossFunction () public Optimizer < DTYPE > * GetOptimizer () public virtual void SetDeviceCPU () \uc2e0\uacbd\ub9dd \uadf8\ub798\ud504 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc7a5\uce58\ub97c CPU\ub85c \uc804\ud658\ud558\ub294 \uba54\uc18c\ub4dc public void SetDeviceCPUOnNeuralNetwork () public int Train () \uc2e0\uacbd\ub9dd\uc758 \ud559\uc2b5\uc744 \uc9c4\ud589\ud558\ub294 \uba54\uc18c\ub4dc public int Test () \uc2e0\uacbd\ub9dd\uc758 \ud14c\uc2a4\ud2b8\ub97c \uc9c4\ud589\ud558\ub294 \uba54\uc18c\ub4dc public int TrainOnCPU () CPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uba54\uc18c\ub4dc public int TestOnCPU () CPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc public int TrainOnGPU () GPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uba54\uc18c\ub4dc public int TestOnGPU () GPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc public float GetAccuracy (int numOfClass) \ubd84\ub958(Classification)\ub97c \uc704\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 Top 1 Accuracy\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc public int GetMaxIndex ( Tensor < DTYPE > * data,int ba,int ti,int numOfClass) Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \uac12\uc758 \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud574 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public float GetTop5Accuracy (int numOfClass) \ubd84\ub958(Classification)\ub97c \uc704\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 Top 5 Accuracy\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc public void GetTop5Index ( Tensor < DTYPE > * data,int * top5Index,int ba,int ti,int numOfClass) Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \ub2e4\uc12f \uac1c \uac12\uc5d0 \ub300\ud55c \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud574 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public float GetLoss () \ub370\uc774\ud130\uc5d0 \ub300\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 \ud3c9\uade0 Loss\ub97c \uacc4\uc0b0\ud558\uc5ec \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public void PrintGraphInformation () \uc2e0\uacbd\ub9dd \uadf8\ub798\ud504\uc758 \uac01 \uad6c\uc131 \uc694\uc18c\uc5d0 \ub300\ud574 \uc815\ubcf4\ub97c \ucd9c\ub825\ud558\ub294 \uba54\uc18c\ub4dc public int ResetLossFunctionResult () LossFunction\uc758 Result Tensor\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. public int ResetLossFunctionGradient () LossFunction\uc758 Gradient Tensor\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. public int ResetParameterGradient () Optimizer\uc758 Gradient\uc640 Parameter\ub4e4\uc758 Gradient\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. public Operator < DTYPE > * SearchOperator (std::string pName) public void InputToFeature (int inDim,int noSample,float * pSamples,int outDim,float * pFeatures,int batchSize) Members public NeuralNetwork () NeuralNetwork \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \uac01 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 NeuralNetwork \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4. \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL \uac12\uc73c\ub85c, \uac01 \uc815\uc218 \ud0c0\uc785 \ubcc0\uc218\ub4e4\uc740 0\uc73c\ub85c, Device\ub294 CPU\ub85c \ucd08\uae30\ud654\ud558\uace0 NeuralNetwork ::Alloc() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns \uc5c6\uc74c See also : NeuralNetwork ::Alloc() public virtual ~NeuralNetwork () NeuralNetwork \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc1b\uc740 NeuralNetwork \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4. Returns \uc5c6\uc74c See also : NeuralNetwork ::Delete() public LossFunction < DTYPE > * SetLossFunction ( LossFunction < DTYPE > * pLossFunction) \ud2b9\uc815 Loss Function\uc744 \ub9e4\uac1c \ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\ub97c \uc2e0\uacbd\ub9dd\uc758 Loss Function\ub85c \uc9c0\uc815\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc Parameters pLossFunction \uc2e0\uacbd\ub9dd\uc758 Loss Function\ub85c \uc9c0\uc815\ud558\uace0\uc790 \ud558\ub294 Loss Function Returns \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Loss Function public Optimizer < DTYPE > * SetOptimizer ( Optimizer < DTYPE > * pOptimizer) \ud2b9\uc815 Optimizer\ub97c \ub9e4\uac1c \ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\ub97c \uc2e0\uacbd\ub9dd\uc758 Optimizer\ub85c \uc9c0\uc815\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc Parameters pLossFunction \uc2e0\uacbd\ub9dd\uc758 Optimizer\ub85c \uc9c0\uc815\ud558\uace0\uc790 \ud558\ub294 Optimizer Returns \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Optimizer public Operator < DTYPE > * GetResultOperator () public virtual Tensor < DTYPE > * GetResult () public LossFunction < DTYPE > * GetLossFunction () public Optimizer < DTYPE > * GetOptimizer () public virtual void SetDeviceCPU () \uc2e0\uacbd\ub9dd \uadf8\ub798\ud504 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc7a5\uce58\ub97c CPU\ub85c \uc804\ud658\ud558\ub294 \uba54\uc18c\ub4dc NeuralNetwork\uc758 Device \uba64\ubc84\ubcc0\uc218\ub97c CPU\ub85c \uc804\ud658\ud558\uace0, Excutable Operator Container\uc758 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::SetDeviceCPU() \uba54\uc18c\ub4dc\ub97c \uc21c\uc11c\ub300\ub85c \ud638\ucd9c\ud558\uace0, Lossfunction\uc758 LossFunction ::SetDeviceCPU() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns \uc5c6\uc74c public void SetDeviceCPUOnNeuralNetwork () public int Train () \uc2e0\uacbd\ub9dd\uc758 \ud559\uc2b5\uc744 \uc9c4\ud589\ud558\ub294 \uba54\uc18c\ub4dc NeuralNetwork\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c \ud655\uc778\ud558\uc5ec CPU \uc2dc NeuralNetwork ::TrainingOnCPU()\uc744 \ud638\ucd9c\ud558\uace0, GPU \uc2dc NeuralNetwork ::TrainingOnGPU()\uc744 \ud638\ucd9c\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE, m_Device \uba64\ubc84 \ubcc0\uc218\uac00 \uc798\ubabb\ub41c \uac12\uc744 \uac16\uace0 \uc788\uc744 \ub54c FALSE\ub97c \ubc18\ud658\ud55c\ub2e4. public int Test () \uc2e0\uacbd\ub9dd\uc758 \ud14c\uc2a4\ud2b8\ub97c \uc9c4\ud589\ud558\ub294 \uba54\uc18c\ub4dc NeuralNetwork\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c \ud655\uc778\ud558\uc5ec CPU \uc2dc NeuralNetwork ::TestingOnCPU()\uc744 \ud638\ucd9c\ud558\uace0, GPU \uc2dc NeuralNetwork ::TestingOnGPU()\uc744 \ud638\ucd9c\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE, m_Device \uba64\ubc84 \ubcc0\uc218\uac00 \uc798\ubabb\ub41c \uac12\uc744 \uac16\uace0 \uc788\uc744 \ub54c FALSE\ub97c \ubc18\ud658\ud55c\ub2e4. public int TrainOnCPU () CPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uba54\uc18c\ub4dc \uc21c\uc11c\ub300\ub85c Excutable Operator\ub4e4\uc758 Result\uc640 Gradient\ub97c \ucd08\uae30\ud654\ud558\uace0 Loss Function\uc758 Result\uc640 Gradient\ub97c \ucd08\uae30\ud654\ud558\uace0 ForwardPropagate, BackwardPropagate \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 Optimizer\ub85c \ud30c\ub77c\ubbf8\ud130\ub97c \ud559\uc2b5\uc2dc\ud0a8\ub2e4. \uac01 \uba54\uc18c\ub4dc \ucc38\uc870 Returns TRUE See also : NeuralNetwork ::ResetOperatorResult() NeuralNetwork ::ResetOperatorGradient() NeuralNetwork ::ResetLossFunctionResult() NeuralNetwork ::ResetLossFunctionGradient() See also : NeuralNetwork ::ForwardPropagate() NeuralNetwork ::BackPropagate() Optimizer ::UpdateParameter() public int TestOnCPU () CPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc \uc21c\uc11c\ub300\ub85c Excutable Operator\ub4e4\uc758 Result\ub97c \ucd08\uae30\ud654\ud558\uace0 Loss Function\uc758 Result\ub97c \ucd08\uae30\ud654\ud558\uace0 ForwardPropagate\uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. \uac01 \uba54\uc18c\ub4dc \ucc38\uc870 Returns TRUE See also : NeuralNetwork ::ResetOperatorResult() NeuralNetwork ::ResetLossFunctionResult() NeuralNetwork ::ForwardPropagate() public int TrainOnGPU () GPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uba54\uc18c\ub4dc \uc21c\uc11c\ub300\ub85c Excutable Operator\ub4e4\uc758 Result\uc640 Gradient\ub97c \ucd08\uae30\ud654\ud558\uace0 Loss Function\uc758 Result\uc640 Gradient\ub97c \ucd08\uae30\ud654\ud558\uace0 @detaisl ForwardPropagateOnGPU, BackwardPropagateOnGPU \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 Optimizer\ub85c \ud30c\ub77c\ubbf8\ud130\ub97c \ud559\uc2b5\uc2dc\ud0a8\ub2e4. \uac01 \uba54\uc18c\ub4dc \ucc38\uc870 Returns TRUE See also : NeuralNetwork ::ResetOperatorResult() NeuralNetwork ::ResetOperatorGradient() NeuralNetwork ::ResetLossFunctionResult() NeuralNetwork ::ResetLossFunctionGradient() See also : NeuralNetwork ::ForwardPropagateOnGPU() NeuralNetwork ::BackPropagateOnGPU() Optimizer ::UpdateParameterOnGPU() public int TestOnGPU () GPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc \uc21c\uc11c\ub300\ub85c Excutable Operator\ub4e4\uc758 Result\ub97c \ucd08\uae30\ud654\ud558\uace0 Loss Function\uc758 Result\ub97c \ucd08\uae30\ud654\ud558\uace0 ForwardPropagateOnGPU\uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. \uac01 \uba54\uc18c\ub4dc \ucc38\uc870 Returns TRUE See also : NeuralNetwork ::ResetOperatorResult() NeuralNetwork ::ResetLossFunctionResult() NeuralNetwork ::ForwardPropagateOnGPU() public float GetAccuracy (int numOfClass) \ubd84\ub958(Classification)\ub97c \uc704\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 Top 1 Accuracy\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc Parameters numOfClass \ub370\uc774\ud130\uc758 \ubd84\ub958(Classification)\uc5d0 \uc774\uc6a9\ub418\ub294 label\uc758 \uac1c\uc218 Returns \uc2e0\uacbd\ub9dd\uc758 Top 1 Accuracy : 0. ~ 1. public int GetMaxIndex ( Tensor < DTYPE > * data,int ba,int ti,int numOfClass) Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \uac12\uc758 \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud574 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Parameters data \ud0d0\uc0c9\ud558\uace0\uc790 \ud558\ub294 Tensor ba Tensor\uc758 batch Size ti Tensor\uc758 Time Size numOfClass Tensor\uc758 LongArray\uc758 Element \uac1c\uc218 Returns \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \uac12\uc758 \uc778\ub371\uc2a4 public float GetTop5Accuracy (int numOfClass) \ubd84\ub958(Classification)\ub97c \uc704\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 Top 5 Accuracy\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc Parameters numOfClass \ub370\uc774\ud130\uc758 \ubd84\ub958(Classification)\uc5d0 \uc774\uc6a9\ub418\ub294 label\uc758 \uac1c\uc218 Returns \uc2e0\uacbd\ub9dd\uc758 Accuracy : 0. ~ 1. public void GetTop5Index ( Tensor < DTYPE > * data,int * top5Index,int ba,int ti,int numOfClass) Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \ub2e4\uc12f \uac1c \uac12\uc5d0 \ub300\ud55c \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud574 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Parameters data \ud0d0\uc0c9\ud558\uace0\uc790 \ud558\ub294 Tensor ba Tensor\uc758 batch Size ti Tensor\uc758 Time Size numOfClass Tensor\uc758 LongArray\uc758 Element \uac1c\uc218 Returns \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \ub2e4\uc12f \uac1c \uac12\uc5d0 \ub300\ud55c \uc778\ub371\uc2a4 public float GetLoss () \ub370\uc774\ud130\uc5d0 \ub300\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 \ud3c9\uade0 Loss\ub97c \uacc4\uc0b0\ud558\uc5ec \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Returns \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 \ud3c9\uade0 Loss public void PrintGraphInformation () \uc2e0\uacbd\ub9dd \uadf8\ub798\ud504\uc758 \uac01 \uad6c\uc131 \uc694\uc18c\uc5d0 \ub300\ud574 \uc815\ubcf4\ub97c \ucd9c\ub825\ud558\ub294 \uba54\uc18c\ub4dc Returns \uc5c6\uc74c See also : Operator ::PrintInformation() LossFunction ::GetName() public int ResetLossFunctionResult () LossFunction\uc758 Result Tensor\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. LossFunction\uc758 LossFunction ::ResetResult() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns TRUE public int ResetLossFunctionGradient () LossFunction\uc758 Gradient Tensor\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. LossFunction\uc758 Lossfunction ::ResetGradient() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns TRUE public int ResetParameterGradient () Optimizer\uc758 Gradient\uc640 Parameter\ub4e4\uc758 Gradient\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. Optimizer\uc758 Optimzier ::ResetParameterGradient() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns TRUE public Operator < DTYPE > * SearchOperator (std::string pName) public void InputToFeature (int inDim,int noSample,float * pSamples,int outDim,float * pFeatures,int batchSize) class NoiseGenerator \u00b6 class NoiseGenerator : public Operator< DTYPE > Tensor \ud074\ub798\uc2a4\uc758 Random_normal \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubc94\uc704 \ub0b4\uc758 \uc784\uc758\uc758 \uac12\uc744 \uac16\ub294 Tensor \uc0dd\uc131 Operator \ud615\uc2dd\uc774\uc9c0\ub9cc Tensor\ub97c \uc800\uc7a5\ud558\ub294 \uc6a9\ub3c4\ub85c\ub9cc \uc0ac\uc6a9 Summary Members Descriptions public inline NoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName) public inline NoiseGenerator ( Shape * pShape,std::string pName) public inline ~NoiseGenerator () Members public inline NoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName) public inline NoiseGenerator ( Shape * pShape,std::string pName) public inline ~NoiseGenerator () class Operator \u00b6 \ubcf8 \ud504\ub798\uc784\uc6cc\ud06c\uc758 \uac00\uc7a5 \uc791\uc740 \uc5f0\uc0b0 \ub2e8\uc704. Summary Members Descriptions public Operator (std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1, Operator < DTYPE > * pInput2,std::string pName,int pLoadflag) public Operator (int numInput,...) public virtual ~Operator () public int AddEdgebetweenOperators ( Operator < DTYPE > * pInput) public int AddEdgebetweenOperators (int numInput,va_list ap) public int AddEdgebetweenOperators (int numInput,...) public int AddResult ( Tensor < DTYPE > * pTensor) public int AddGradient ( Tensor < DTYPE > * pTensor) public int AddDelta ( Tensor < DTYPE > * pTensor) public int SetResult ( Tensor < DTYPE > * pTensor) public int SetGradient ( Tensor < DTYPE > * pTensor) public int SetDelta ( Tensor < DTYPE > * pTensor) public int SetDevice (Device pDevice) public int SetDeviceID (unsigned int idOfDevice) public int SetIsTensorholder (int pIsParameter) public int SetIsTrainable (int pIsTrainable) public virtual int SetModeTrain () public virtual int SetModeAccumulate () public virtual int SetModeInference () public virtual Operator < DTYPE > ** GetOutput () public virtual Container](#classContainer)< [Operator < DTYPE > * > * GetOutputContainer () public virtual Operator < DTYPE > ** GetInput () public virtual Container](#classContainer)< [Operator < DTYPE > * > * GetInputContainer () public virtual Tensor < DTYPE > * GetResult () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetResultContainer () public virtual Tensor < DTYPE > * GetGradient () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetGradientContainer () public virtual Tensor < DTYPE > * GetDelta () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetDeltaContainer () public std::string GetName () const public virtual Device GetDevice () public virtual int GetDeviceID () public int GetIsTensorholder () public int GetIsTrainable () public virtual int ForwardPropagate (int pTime) public virtual int BackPropagate (int pTime) public virtual int ResetResult () public virtual int ResetGradient () public virtual void PrintInformation (int level) public virtual void SetDeviceCPU () public virtual int SetResultOnCPU () public virtual int SetGradientOnCPU () public virtual int Save (char * nameOfFile) public virtual int Load (char * nameOfFile) public virtual int Load (FILE * fp) public virtual int Save (FILE * fp) Members public Operator (std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1, Operator < DTYPE > * pInput2,std::string pName,int pLoadflag) public Operator (int numInput,...) public virtual ~Operator () public int AddEdgebetweenOperators ( Operator < DTYPE > * pInput) public int AddEdgebetweenOperators (int numInput,va_list ap) public int AddEdgebetweenOperators (int numInput,...) public int AddResult ( Tensor < DTYPE > * pTensor) public int AddGradient ( Tensor < DTYPE > * pTensor) public int AddDelta ( Tensor < DTYPE > * pTensor) public int SetResult ( Tensor < DTYPE > * pTensor) public int SetGradient ( Tensor < DTYPE > * pTensor) public int SetDelta ( Tensor < DTYPE > * pTensor) public int SetDevice (Device pDevice) public int SetDeviceID (unsigned int idOfDevice) public int SetIsTensorholder (int pIsParameter) public int SetIsTrainable (int pIsTrainable) public virtual int SetModeTrain () public virtual int SetModeAccumulate () public virtual int SetModeInference () public virtual Operator < DTYPE > ** GetOutput () public virtual Container](#classContainer)< [Operator < DTYPE > * > * GetOutputContainer () public virtual Operator < DTYPE > ** GetInput () public virtual Container](#classContainer)< [Operator < DTYPE > * > * GetInputContainer () public virtual Tensor < DTYPE > * GetResult () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetResultContainer () public virtual Tensor < DTYPE > * GetGradient () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetGradientContainer () public virtual Tensor < DTYPE > * GetDelta () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetDeltaContainer () public std::string GetName () const public virtual Device GetDevice () public virtual int GetDeviceID () public int GetIsTensorholder () public int GetIsTrainable () public virtual int ForwardPropagate (int pTime) public virtual int BackPropagate (int pTime) public virtual int ResetResult () public virtual int ResetGradient () public virtual void PrintInformation (int level) public virtual void SetDeviceCPU () public virtual int SetResultOnCPU () public virtual int SetGradientOnCPU () public virtual int Save (char * nameOfFile) public virtual int Load (char * nameOfFile) public virtual int Load (FILE * fp) public virtual int Save (FILE * fp) class Optimizer \u00b6 Summary Members Descriptions public Optimizer ( Operator < DTYPE > ** pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) public Optimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public Optimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,float pWeightDecayRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public virtual ~Optimizer () Optimizer \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public int Alloc ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc public int Alloc ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,float pWeightDecayRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc public int Delete () public virtual int UpdateParameter () Trainable Tensor Container\uc758 Operator\ub4e4\uc758 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \uc21c\uc11c\ub300\ub85c \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc public int UpdateParameter ( Operator < DTYPE > * pTrainableTensor) public void SetLearningRate (float pLearningRate) public void SetTrainableTensorDegree (int pTrainableTensorDegree) public void SetWeightDecayRate (int pWeightDecayRate) public float GetLearningRate () const public int GetOptimizeDirection () const public Container](#classContainer)< [Operator < DTYPE > * > * GetTrainableTensor () public int GetTrainableTensorDegree () const public float GetWeightDecayRate () const public int ResetParameterGradient () Trainable Tensor Container\uc758 Operator\ub4e4\uc758 Gradient\ub97c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc Members public Optimizer ( Operator < DTYPE > ** pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) public Optimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 0 \ub610\ub294 NULL\ub85c \ucd08\uae30\ud654\ud558\uace0, \uc804\ub2ec\ubc1b\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ud558\uc5ec Optimizer\uc758 Alloc \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pParameters Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 Trainable Tensor container pLearningRate Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 learning Rate pOptimizeDirection Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 optimize Direction Returns \uc5c6\uc74c See also : Optimizer ::Alloc(Container *> *pParameters, float pLearningRate, OptimizeDirection pOptimizeDirection) public Optimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,float pWeightDecayRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 0 \ub610\ub294 NULL\ub85c \ucd08\uae30\ud654\ud558\uace0, \uc804\ub2ec\ubc1b\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ud558\uc5ec Optimizer\uc758 Alloc \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pParameters Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 Trainable Tensor container pLearningRate Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 learning Rate pWeightDecayRate Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 Weight Decay Rate pOptimizeDirection Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 optimize Direction Returns \uc5c6\uc74c See also : Optimizer ::Alloc(Container *> *pParameters, float pLearningRate, float pWeightDecayRate, OptimizeDirection pOptimizeDirection) public virtual ~Optimizer () Optimizer \ud074\ub798\uc2a4 \uc18c\uba78\uc790 Optimizer ::Delete() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4. Returns \uc5c6\uc74c public int Alloc ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec \ubc1b\uc740 \uac12\ub4e4\uc744 \uac01\uac01 Trainable Tensor Conatiner, learning rate, Optimize Direction, Weight Decay Rate \uba64\ubc84 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud55c\ub2e4. Parameters pParameters Optimizer \ud074\ub798\uc2a4\uc5d0\uc758 Trainable Tensor container \uba64\ubc84 \ubcc0\uc218 pLearningRate Optimizer \ud074\ub798\uc2a4\uc758 learning Rate \uba64\ubc84 \ubcc0\uc218 pOptimizeDirection Optimizer \ud074\ub798\uc2a4\uc758 optimize Direction \uba64\ubc84 \ubcc0\uc218 Returns TRUE public int Alloc ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,float pWeightDecayRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec \ubc1b\uc740 \uac12\ub4e4\uc744 \uac01\uac01 Trainable Tensor Conatiner, learning rate, Optimize Direction, Weight Decay Rate \uba64\ubc84 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud55c\ub2e4. Parameters pParameters Optimizer \ud074\ub798\uc2a4\uc5d0\uc758 Trainable Tensor container \uba64\ubc84 \ubcc0\uc218 pLearningRate Optimizer \ud074\ub798\uc2a4\uc758 learning Rate \uba64\ubc84 \ubcc0\uc218 pWeightDecayRate Optimizer \ud074\ub798\uc2a4\uc758 Weight Decay Rate \uba64\ubc84 \ubcc0\uc218 pOptimizeDirection Optimizer \ud074\ub798\uc2a4\uc758 optimize Direction \uba64\ubc84 \ubcc0\uc218 Returns TRUE public int Delete () public virtual int UpdateParameter () Trainable Tensor Container\uc758 Operator\ub4e4\uc758 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \uc21c\uc11c\ub300\ub85c \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0\uc11c \uc624\ubc84\ub77c\uc774\ub4dc\ud574\uc11c \uc0ac\uc6a9\ud558\ub294 \uba54\uc18c\ub4dc Returns TRUE public int UpdateParameter ( Operator < DTYPE > * pTrainableTensor) public void SetLearningRate (float pLearningRate) public void SetTrainableTensorDegree (int pTrainableTensorDegree) public void SetWeightDecayRate (int pWeightDecayRate) public float GetLearningRate () const public int GetOptimizeDirection () const public Container](#classContainer)< [Operator < DTYPE > * > * GetTrainableTensor () public int GetTrainableTensorDegree () const public float GetWeightDecayRate () const public int ResetParameterGradient () Trainable Tensor Container\uc758 Operator\ub4e4\uc758 Gradient\ub97c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc Returns TRUE Operator ::ResetGradient() class PRelu \u00b6 class PRelu : public Operator< DTYPE > Summary Members Descriptions public inline PRelu ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int pLoadflag) PRelu\uc758 \uc0dd\uc131\uc790. public inline PRelu ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,std::string pName,int pLoadflag) PRelu\uc758 \uc0dd\uc131\uc790. public inline ~PRelu () LRelu\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) PRelu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) PRelu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. Members public inline PRelu ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int pLoadflag) PRelu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator pWeight \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uae30\uc6b8\uae30 int Alloc(Operator *pInput, Operator *pWeight) public inline PRelu ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,std::string pName,int pLoadflag) PRelu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator pWeight \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uae30\uc6b8\uae30 pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight) public inline ~PRelu () LRelu\uc758 \uc18c\uba78\uc790. See also : void Delete() public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator pWeight \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 Tensor\uc758 \uc815\ubcf4\ub97c \uac00\uc9c4 Operator Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) PRelu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. input\uc758 Tensor\uac12\ub4e4 \uc911 0.f\uc774\uc0c1\uc758 \uac12\uc740 \uadf8\ub300\ub85c result\uc5d0 \uc800\uc7a5\ud558\uace0, 0.f\ubbf8\ub9cc\uc758 \uac12\uc740 weight Tensor\uc758 \uac12\uacfc \uacf1\ud55c \ud6c4 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) PRelu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. input_delta\ub294 result\uac12\uc774 0\ubcf4\ub2e4 \ud074 \uacbd\uc6b0 input_delta\uc5d0 \ub354\ud558\uace0, 0\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0 input_delta\uc5d0 weight\uc744 \uacf1\ud55c \ud6c4 \ub354\ud55c\ub2e4. weight_delta\ub294 result\uac12\uc774 0\ubcf4\ub2e4 \ud074 \uacbd\uc6b0 0\uc5d0 \ub354\ud558\uace0, 0\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0 input_delta\uc5d0 input\uc744 \uacf1\ud55c \ud6c4 \ub354\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class ReconstructionError \u00b6 class ReconstructionError : public Operator< DTYPE > Summary Members Descriptions public inline ReconstructionError ( Operator < DTYPE > * pInput, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~ReconstructionError () public inline virtual int Alloc ( Operator < DTYPE > * pInput) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline ReconstructionError ( Operator < DTYPE > * pInput, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~ReconstructionError () public inline virtual int Alloc ( Operator < DTYPE > * pInput) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class Recurrent \u00b6 class Recurrent : public Operator< DTYPE > Summary Members Descriptions public inline Recurrent ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY) public inline Recurrent ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY,std::string pName) public inline ~Recurrent () public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY) public inline void Delete () public inline int ForwardPropagate (int pTime,int pThreadNum) public inline int BackPropagate (int pTime,int pThreadNum) Members public inline Recurrent ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY) public inline Recurrent ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY,std::string pName) public inline ~Recurrent () public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY) public inline void Delete () public inline int ForwardPropagate (int pTime,int pThreadNum) public inline int BackPropagate (int pTime,int pThreadNum) class Relu \u00b6 class Relu : public Operator< DTYPE > Summary Members Descriptions public inline Relu ( Operator < DTYPE > * pInput,int pLoadflag) Relu\uc758 \uc0dd\uc131\uc790. public inline Relu ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Relu\uc758 \uc0dd\uc131\uc790. public inline ~Relu () Relu\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) Relu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) Relu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. Members public inline Relu ( Operator < DTYPE > * pInput,int pLoadflag) Relu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator int Alloc(Operator *pInput) public inline Relu ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Relu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput) public inline ~Relu () Relu\uc758 \uc18c\uba78\uc790. See also : void Delete() public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) Relu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. input\uc758 Tensor\uac12\ub4e4 \uc911 0.f\uc774\uc0c1\uc758 \uac12\uc740 \uadf8\ub300\ub85c result\uc5d0 \uc800\uc7a5\ud558\uace0, 0.f\ubbf8\ub9cc\uc758 \uac12\uc740 0.f\ub85c \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) Relu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. result\uac12\uc774 0\ubcf4\ub2e4 \ud074 \uacbd\uc6b0 input_delta\uc5d0 \ub354\ud558\uace0, 0\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0 0.f\ub97c \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class ReShape \u00b6 class ReShape : public Operator< DTYPE > Summary Members Descriptions public inline ReShape ( Operator < DTYPE > * pInput,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 public inline ReShape ( Operator < DTYPE > * pInput,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 public inline ReShape ( Operator < DTYPE > * pInput,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 public inline ReShape ( Operator < DTYPE > * pInput,int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 public inline ~ReShape () ReShape\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput,int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \uac12\ub4e4\ub85c Shape\uc758 dim\ub4e4\uc744 \ubc14\uafbc\ub2e4. public inline void Delete () Delete \ub9e4\uc18c\ub4dc. public inline virtual int ForwardPropagate (int pTime) ReShape\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc public inline virtual int BackPropagate (int pTime) ReShape\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline ReShape ( Operator < DTYPE > * pInput,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pRowSize, pColSize\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput ReShape\ud560 Operator . pRowSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 rowsize. pColSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 colsize. @paramp pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc758 \uc774\ub984. int Alloc(Operator *pInput, int pTimeSize, int pBatchSize, int pChannelSize, int pRowSize, int pColSize) public inline ReShape ( Operator < DTYPE > * pInput,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pRowSize, pColSize\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput ReShape\ud560 Operator . pChannelSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 channelsize pRowSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 rowsize. pColSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 colsize. @paramp pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc758 \uc774\ub984. int Alloc(Operator *pInput, int pTimeSize, int pBatchSize, int pChannelSize, int pRowSize, int pColSize) public inline ReShape ( Operator < DTYPE > * pInput,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pRowSize, pColSize\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput ReShape\ud560 Operator . pBatchSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 batchsize. pChannelSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 channelsize. pRowSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 rowsize. pColSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 colsize. @paramp pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc758 \uc774\ub984. int Alloc(Operator *pInput, int pTimeSize, int pBatchSize, int pChannelSize, int pRowSize, int pColSize) public inline ReShape ( Operator < DTYPE > * pInput,int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pRowSize, pColSize\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput ReShape\ud560 Operator . pTimeSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 timesize. pBatchSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 batchsize. pChannelSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 channelsize. pRowSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 rowsize. pColSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 colsize. @paramp pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc758 \uc774\ub984. int Alloc(Operator *pInput, int pTimeSize, int pBatchSize, int pChannelSize, int pRowSize, int pColSize) public inline ~ReShape () ReShape\uc758 \uc18c\uba78\uc790. Delete \ub9e4\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud55c\ub2e4. void Delete() public inline int Alloc ( Operator < DTYPE > * pInput,int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \uac12\ub4e4\ub85c Shape\uc758 dim\ub4e4\uc744 \ubc14\uafbc\ub2e4. result\uc5d0 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \uac12\ub4e4\ub85c result\uc758 shape\uc744 \ubc14\uafb8\uc5b4 \ub123\uace0, Delta\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ubc1b\uc740 Dimension \uc815\ubcf4\ub4e4\ub85c \uc0c8\ub85c\uc6b4 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4, Parameters pInput ReShape\ud560 Operator . pTimeSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 timesize. pBatchSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 batchsize. pChannelSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 channelsize. pRowSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 rowsize. pColSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 colsize. Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () Delete \ub9e4\uc18c\ub4dc. \ubcc4\ub2e4\ub978 \uae30\ub2a5\uc740 \uc5c6\ub2e4. public inline virtual int ForwardPropagate (int pTime) ReShape\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc input\uac12\uc744 result(\uc0c8\ub85c\uc6b4 Shape\uc744 \uac16\ub294 Tensor )\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) ReShape\uc758 BackPropagate \ub9e4\uc18c\ub4dc. input_delta\uc5d0 this_delta\uac12\uc744 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class RMSPropOptimizer \u00b6 class RMSPropOptimizer : public Optimizer< DTYPE > Summary Members Descriptions public inline RMSPropOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float decay,float epsilon,bool centered,OptimizeDirection pOptimizeDirection) RMSPropOptmizer \uc0dd\uc131\uc790. public inline RMSPropOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float decay,float epsilon,bool centered,float weightDecayRate,OptimizeDirection pOptimizeDirection) RMSPropOptmizer \uc0dd\uc131\uc790. public inline ~RMSPropOptimizer () RMSPropOpmitzer \uc18c\uba78\uc790 public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc public inline int Alloc (float decay,float epsilon,bool centered) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pMeanSquared) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pMeanSquared, Tensor < DTYPE > * m_pMeanGrad) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Members public inline RMSPropOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float decay,float epsilon,bool centered,OptimizeDirection pOptimizeDirection) RMSPropOptmizer \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate decay m_aaMeanSquared, m_pMeanGrad, m_aaMeanGrad, gradient \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 centered cemtered version enable boolean \ubcc0\uc218 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(decay, epsilon, centered) public inline RMSPropOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float decay,float epsilon,bool centered,float weightDecayRate,OptimizeDirection pOptimizeDirection) RMSPropOptmizer \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate decay m_aaMeanSquared, m_pMeanGrad, m_aaMeanGrad, gradient \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 weightDecayRate \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud074 \ub54c \ud328\ub110\ud2f0\ub97c \ubd80\uacfc\ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(decay, epsilon, centered) public inline ~RMSPropOptimizer () RMSPropOpmitzer \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_aaMeanSquared, m_aaMeanGrad\uc758 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline int Alloc (float decay,float epsilon,bool centered) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_ppParameter, m_numOfParameter, m_aaMeanSquared, m_aaMeanGrad\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. m_aaMeanSquared\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. m_aaMeanGrad\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. Parameters decay m_aaMeanSquared, m_pMeanGrad, m_aaMeanGrad, gradient \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon Root Sqaure \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 centered cemtered version enable boolean \ubcc0\uc218 Returns \uc131\uacf5 \uc2dc TRUE See also : Container < Operator > GetTrainableTensor() See also : int GetTrainableTensorDegree() public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_centered \uc720\ubb34\uc5d0 \ub530\ub77c centered version \uacfc not use RMSProp UpdateParameter \ud638\ucd9c Returns \uc131\uacf5 \uc2dc TRUE See also : int UpdateParameter(Operator *pParameter, Tensor *m_pMeanSquared) See also : int UpdateParameter(Operator *pParameter, Tensor *m_pMeanSquared, Tensor *m_pMeanGrad) public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 Returns \uc131\uacf5 \uc2dc TRUE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pMeanSquared) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_decay \uac00\uc911\uce58\ub85c \uc870\uc815\ub41c m_pMeanSquared, gradinet\ub85c m_pMeanSquared \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. \uc5c5\ub370\uc774\ud2b8 \ub41c m_pMeanSquared\ub85c \uc9c0\uc218\ud3c9\uade0 \uc774\ub3d9 \uacf5\uc2dd\uc744 \uc801\uc6a9\ud558\uc5ec \ud30c\ub77c\ubbf8\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pMeanSquared \uc5c5\ub370\uc774\ud2b8 \ud560 pMeanSquared Returns \uc131\uacf5 \uc2dc TURE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pMeanSquared, Tensor < DTYPE > * m_pMeanGrad) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_decay \uac00\uc911\uce58\ub85c \uc870\uc815\ub41c gradient\ub85c m_pMeanGrad\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. m_decay \uac00\uc911\uce58\ub85c \uc870\uc815\ub41c m_pMeanSquared, gradinet\ub85c m_pMeanSquared \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. \uc5c5\ub370\uc774\ud2b8 \ub41c m_pMeanSquared\uc640 \uc5c5\ub370\uc774\ud2b8 \ub41c m_pMeanGrad\uc758 \uc81c\uacf1\uc758 \ucc28\ub97c \uc9c0\uc218\ud3c9\uade0\uc774\ub3d9\uacf5\uc2dd\uc5d0 \uc801\uc6a9\ud558\uc5ec \ud30c\ub77c\ubbf8\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pMeanSquared \uc5c5\ub370\uc774\ud2b8 \ud560 pMeanSquared pMeanGrad \uc5c5\ub370\uc774\ud2b8 \ud560 pMeanGrad Returns \uc131\uacf5 \uc2dc TURE class Sequential \u00b6 class Sequential : public Operator< DTYPE > Summary Members Descriptions public inline Sequential (int numOfOperator,...) public inline ~Sequential () public inline int Alloc (int numOfOperator,va_list * ap) public inline int ForwardPropagate () public inline int BackPropagate () Members public inline Sequential (int numOfOperator,...) public inline ~Sequential () public inline int Alloc (int numOfOperator,va_list * ap) public inline int ForwardPropagate () public inline int BackPropagate () class Shape \u00b6 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 Tensor\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 Summary Members Descriptions public Shape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) 5D-Shape \uc0dd\uc131\uc790 public Shape (int pSize0,int pSize1,int pSize2,int pSize3) 4D-Shape \uc0dd\uc131\uc790 public Shape (int pSize0,int pSize1,int pSize2) 3D-Shape \uc0dd\uc131\uc790 public Shape (int pSize0,int pSize1) 2D-Shape \uc0dd\uc131\uc790 public Shape (int pSize0) 1D-Shape \uc0dd\uc131\uc790 public Shape ( Shape * pShape) Shape \ud074\ub798\uc2a4\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \uae4a\uc740 \ubcf5\uc0ac(Deep Copy)\ud558\ub294 Shape \uc0dd\uc131\uc790 public virtual ~Shape () Shape \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public int GetRank () Shape \ud074\ub798\uc2a4\uc758 Rank \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public int GetDim (int pRanknum) Rank \uc778\ub371\uc2a4\ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc544 Dimension\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public int & operator[] (int pRanknum) []\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 public Device GetDevice () Shape \ud074\ub798\uc2a4\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public int GetDeviceID () Shape \ud074\ub798\uc2a4\uc758 idOfDevice \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) \uc0c8\ub85c\uc6b4 Shape\uc744 \ub9cc\ub4e4\uc5b4 \ubc18\ud658 \ud558\ub294 \uba54\uc18c\ub4dc. public int ReShape (int pRank,...) Shape \uac01 \ucd95\uc758 Dimension\uc815\ubcf4\ub97c \ucd08\uae30\ud654 \ud558\ub294 \uba54\uc18c\ub4dc. public int SetDeviceCPU () Shape \ud074\ub798\uc2a4\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c CPU\ub85c \ubcc0\uacbd\ud55c\ub2e4. Members public Shape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) 5D-Shape \uc0dd\uc131\uc790 5\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790 Parameters pSize0 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize2 \uc138 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize3 \ub124 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize4 \ub2e4\uc12f \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 Returns \uc5c6\uc74c See also : Shape::Alloc(int pRank, ...) public Shape (int pSize0,int pSize1,int pSize2,int pSize3) 4D-Shape \uc0dd\uc131\uc790 4\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790 Parameters pSize0 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize2 \uc138 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize3 \ub124 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 See also : Shape::Alloc(int pRank, ...) Returns \uc5c6\uc74c public Shape (int pSize0,int pSize1,int pSize2) 3D-Shape \uc0dd\uc131\uc790 3\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790 Parameters pSize0 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize2 \uc138 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 See also : Shape::Alloc(int pRank, ...) Returns \uc5c6\uc74c public Shape (int pSize0,int pSize1) 2D-Shape \uc0dd\uc131\uc790 2\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790 Parameters pSize0 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 Returns \uc5c6\uc74c See also : Shape::Alloc(int pRank, ...) public Shape (int pSize0) 1D-Shape \uc0dd\uc131\uc790 1\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790 Parameters pSize0 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 Returns \uc5c6\uc74c See also : Shape::Alloc(int pRank, ...) public Shape ( Shape * pShape) Shape \ud074\ub798\uc2a4\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \uae4a\uc740 \ubcf5\uc0ac(Deep Copy)\ud558\ub294 Shape \uc0dd\uc131\uc790 Parameters pShape \uae4a\uc740 \ubcf5\uc0ac(Deep Copy)\uc758 \ub300\uc0c1\uc774 \ub418\ub294 Shape \ud074\ub798\uc2a4 Returns \uc5c6\uc74c See also : Shape::Alloc(Shape *pShape) public virtual ~Shape () Shape \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ud574\ub2f9 Shape \ud074\ub798\uc2a4\ub97c \uc704\ud574 \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ubc18\ud658\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\ud55c\ub2e4. Returns \uc5c6\uc74c See also : Shape::Delete() public int GetRank () Shape \ud074\ub798\uc2a4\uc758 Rank \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Returns m_Rank public int GetDim (int pRanknum) Rank \uc778\ub371\uc2a4\ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc544 Dimension\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Parameters pRanknum Dimension\uc744 \ubc18\ud658\ud558\uace0\uc790 \ud558\ub294 \ucd95\uc758 \ubc88\ud638 Returns \uc131\uacf5 \uc2dc m_aDim[pRanknum], \uc2e4\ud328 \uc2dc \uc608\uc678 \ucc98\ub9ac public int & operator[] (int pRanknum) []\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 Rank \uc778\ub371\uc2a4\ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc544 Dimension\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Parameters pRanknum Dimension\uc744 \ubc18\ud658\ud558\uace0\uc790 \ud558\ub294 \ucd95\uc758 \ubc88\ud638 Returns \uc131\uacf5 \uc2dc m_aDim[pRanknum], \uc2e4\ud328 \uc2dc \uc608\uc678 \ucc98\ub9ac public Device GetDevice () Shape \ud074\ub798\uc2a4\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Returns m_Device public int GetDeviceID () Shape \ud074\ub798\uc2a4\uc758 idOfDevice \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Returns m_idOfDevice public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) \uc0c8\ub85c\uc6b4 Shape\uc744 \ub9cc\ub4e4\uc5b4 \ubc18\ud658 \ud558\ub294 \uba54\uc18c\ub4dc. \ud30c\ub9c8\ubbf8\ud130\ub85c \uc804\ub2ec\ubc1b\uc740 \uac01 \ucd95\uc758 Dimension\uc815\ubcf4\ub97c \ubc14\ud0d5\uc73c\ub85c \uc0c8\ub85c\uc6b4 Shape\uc744 \uc0dd\uc131\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. Parameters pSize0 Time\uc758 Dimension pSize1 Batch\uc758 Dimension pSize2 Channel\uc758 Dimension pSize3 Row\uc758 Dimension pSize4 Column\uc758 Dimension Returns \ud30c\ub77c\ubbf8\ud130 \uc815\ubcf4\ub97c \ubc14\ud0d5\uc73c\ub85c \ub9cc\ub4e0 Shape public int ReShape (int pRank,...) Shape \uac01 \ucd95\uc758 Dimension\uc815\ubcf4\ub97c \ucd08\uae30\ud654 \ud558\ub294 \uba54\uc18c\ub4dc. \ud30c\ub9c8\ubbf8\ud130\ub85c \uc804\ub2ec\ubc1b\uc740 \uac01 \ucd95\uc758 Dimension\uc815\ubcf4\ub97c m_aDim\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pRank Shape\uc744 \uc774\ub8e8\ub294 \ucd95\uc758 \uac2f\uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \ubcc0\uc218. ... \uac01 \ucd95\uc758 Dimension\uc815\ubcf4\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \uac00\ubcc0\uc778\uc790. Returns \uc131\uacf5 \uc2dc TRUE public int SetDeviceCPU () Shape \ud074\ub798\uc2a4\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c CPU\ub85c \ubcc0\uacbd\ud55c\ub2e4. Returns TRUE class Sigmoid \u00b6 class Sigmoid : public Operator< DTYPE > Summary Members Descriptions public inline Sigmoid ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Sigmoid\uc758 \uc0dd\uc131\uc790. public inline ~Sigmoid () Sigmoid\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Sigmoid\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) SIGMOID\uc758 BackPropagate \ub9e4\uc18c\ub4dc. public inline DTYPE SIGMOID (DTYPE data) SIGMOID \ud568\uc218 Members public inline Sigmoid ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Sigmoid\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput) public inline ~Sigmoid () Sigmoid\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int ForwardPropagate (int pTime) Sigmoid\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. input\uc758 Tensor\uac12\ub4e4\uc744 SIGMOID\uac12\uc744 \ucde8\ud55c \ub4a4 result\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) SIGMOID\uc758 BackPropagate \ub9e4\uc18c\ub4dc. result\uac12\uc73c\ub85c Sigmoid \ubbf8\ubd84 \uac12\uc744 \uacc4\uc0b0\ud558\uc5ec input_delta\uc5d0 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline DTYPE SIGMOID (DTYPE data) SIGMOID \ud568\uc218 1.0/(1.0 + e^(-x)) Parameters data SIGMOID\ud560 \uac12 Returns data\ub97c SIGMOID\ud568\uc218\uc5d0 \ub123\uc740 \uacb0\uacfc \uac12. class Softmax \u00b6 class Softmax : public Operator< DTYPE > Summary Members Descriptions public inline Softmax ( Operator < DTYPE > * pOperator,DTYPE epsilon,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. public inline Softmax ( Operator < DTYPE > * pOperator,std::string pName,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. public inline Softmax ( Operator < DTYPE > * pOperator,DTYPE epsilon,std::string pName,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. public inline ~Softmax () Softmax\uc758 \uc18c\uba78\uc790. public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pOperator\ub85c \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud558\uace0 Result, Gradient\ub97c \uc124\uc815\ud55c\ub2e4. public inline virtual void Delete () Alloc\ub9e4\uc18c\ub4dc\uc5d0\uc11c \ud560\ub2f9\ud588\ub358 sum, max\ub97c \uc0ad\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c NULL\ub85c \ucd08\uae30\ud654 \ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Softmax\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc public inline virtual int BackPropagate (int pTime) softmax\uc758 BackPropagate \ub9e4\uc18c\ub4dc. public inline DTYPE Max ( Tensor < DTYPE > * input,int start,int end) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\uc5d0\uc11c \uac00\uc7a5 \ud070 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218. Members public inline Softmax ( Operator < DTYPE > * pOperator,DTYPE epsilon,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pOperator, epsilon\uc744 Alloc\uc2dc\ud0a8\ub2e4. Parameters pOperator Softmax\ud560 \ub300\uc0c1 Operator , \uc774 \ub9e4\uc18c\ub4dc\uc5d0\uc11c Alloc\uc2dc\ud0a8\ub2e4. epsilon ForwardPropagate\uc5d0 \uc0ac\uc6a9\ud790 \uac12. 0\uc73c\ub85c \ub098\ub204\uc5b4\uc9c0\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\ub294 \uc5ed\ud560\uc744 \ud55c\ub2e4. virtual int Alloc( Operator *pOperator, DTYPE epsilon = 1e-6f public inline Softmax ( Operator < DTYPE > * pOperator,std::string pName,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pOperator\uc744 Alloc\ud55c\ub2e4. Parameters pOperator Softmax\ud560 \ub300\uc0c1 Operator , \uc774 \ub9e4\uc18c\ub4dc\uc5d0\uc11c Alloc\uc2dc\ud0a8\ub2e4. pName \uc0ac\uc6a9\uc790\uac00 Operator\uc5d0 \ubd80\uc5ec\ud55c \uc774\ub984. virtual int Alloc( Operator *pOperator, DTYPE epsilon = 1e-6f public inline Softmax ( Operator < DTYPE > * pOperator,DTYPE epsilon,std::string pName,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pOperator, epsilon\uc744 Alloc\uc2dc\ud0a8\ub2e4. Parameters pOperator Softmax\ud560 \ub300\uc0c1 Operator , \uc774 \ub9e4\uc18c\ub4dc\uc5d0\uc11c Alloc\uc2dc\ud0a8\ub2e4. @prram epsilon ForwardPropagate\uc5d0 \uc0ac\uc6a9\ud790 \uac12. 0\uc73c\ub85c \ub098\ub204\uc5b4\uc9c0\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\ub294 \uc5ed\ud560\uc744 \ud55c\ub2e4. pName \uc0ac\uc6a9\uc790\uac00 Operator\uc5d0 \ubd80\uc5ec\ud55c \uc774\ub984. virtual int Alloc( Operator *pOperator, DTYPE epsilon = 1e-6f public inline ~Softmax () Softmax\uc758 \uc18c\uba78\uc790. public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pOperator\ub85c \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud558\uace0 Result, Gradient\ub97c \uc124\uc815\ud55c\ub2e4. input\uc73c\ub85c \ubc1b\uc740 Operator\uc758 Shape\uc815\ubcf4\ub4e4\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4dc\uc744 \ucd08\uae30\ud654 \ud558\uace0, \uac19\uc740 Shape\uc744 \uac16\ub294 Tensor\ub97c \ub9cc\ub4e4\uc5b4 Result\uc640 Gradient\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pOperator Softmax\ud560 Operator\ub4e4 epsilon 0\uc73c\ub85c \ub098\ub204\uc5b4\uc9c0\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30\uc704\ud574 softmax\uc2dd\uc758 \ubd84\ubaa8\uc5d0 \ub354\ud558\ub294 \uac12. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual void Delete () Alloc\ub9e4\uc18c\ub4dc\uc5d0\uc11c \ud560\ub2f9\ud588\ub358 sum, max\ub97c \uc0ad\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c NULL\ub85c \ucd08\uae30\ud654 \ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Softmax\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc max\uac12\uc744 \uacc4\uc0b0\ud558\uace0, exp()\ud55c \ubaa8\ub4e0 \uac12\ub4e4\uc744 \ub354\ud574 sum\uc744 \uad6c\ud55c \ub4a4, \uac01\uac01\uc758 exp(input)\ud55c \uac12\uc744 sum\uc73c\ub85c \ub098\ub204\uc5b4\uc8fc\uc5b4 \ud655\ub960\uac12\uc744 \uad6c\ud558\uace0 result\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) softmax\uc758 BackPropagate \ub9e4\uc18c\ub4dc. softmax\uc758 \ubbf8\ubd84 \uac12\uc744 \uad6c\ud558\uc5ec input_delta\uc5d0 \ub123\uc5b4\uc900\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline DTYPE Max ( Tensor < DTYPE > * input,int start,int end) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\uc5d0\uc11c \uac00\uc7a5 \ud070 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218. Parameters input \uac00\uc7a5 \ud070 \uac12\uc744 \ucc3e\uc744 \ub300\uc0c1 Tensor . start \uac12\uc744 \ucc3e\uc744 Tensor\uc548\uc5d0\uc11c\uc758 \uc2dc\uc791\uc704\uce58. end \uac12\uc744 \ucc3e\uc744 Tensor\uc548\uc5d0\uc11c\uc758 \uc885\ub8cc\uc704\uce58. Returns input Tensor\uc758 \uac12\ub4e4 \uc911 \uac00\uc7a5 \ud070 \uac12.. class SoftmaxCrossEntropy \u00b6 class SoftmaxCrossEntropy : public LossFunction< DTYPE > \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Cross Entropy \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4 Softmax Function\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \ub9c8\uc9c0\ub9c9 Operator\ub85c \uc0ac\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 Gradient \uacc4\uc0b0\uc744 \uc6a9\uc774\ud558\uac8c \ud55c\ub2e4 Summary Members Descriptions public inline SoftmaxCrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline SoftmaxCrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~SoftmaxCrossEntropy () SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) SoftmaxCrossEntropy \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \uba54\ubaa8\ub9ac \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) SoftmaxCrossEntropy LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) Softmax CrossEntropy LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline DTYPE Max ( Tensor < DTYPE > * input,int start,int end) \uc9c0\uc815\ub41c \ubc94\uc704 \uc548\uc5d0\uc11c \uc785\ub825 Tensor\uc758 \ub370\uc774\ud130 \uac12 \uc911 \ucd5c\ub313\uac12\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Members public inline SoftmaxCrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 epsilon\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator epsilon \uc5f0\uc0b0\uc5d0 \ub300\ud55c translation \uc694\uc18c pName LossFunction\uc758 \uc774\ub984, \uc9c0\uc815\ud558\uc9c0 \uc54a\uc744 \uc2dc \"NO NAME\"\uc73c\ub85c \ucd08\uae30\ud654 Returns \uc5c6\uc74c See also : SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) public inline SoftmaxCrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 1e-6f\uc5d0 \ud574\ub2f9\ud558\ub294 epsilon \uac12\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pName LossFunction\uc758 \uc774\ub984, \uc9c0\uc815\ud558\uc9c0 \uc54a\uc744 \uc2dc \"NO NAME\"\uc73c\ub85c \ucd08\uae30\ud654 Returns \uc5c6\uc74c See also : SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) public inline virtual ~SoftmaxCrossEntropy () SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 SoftmaxCrossEntropy ::Delete() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4 Returns \uc5c6\uc74c public inline int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) SoftmaxCrossEntropy \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc SoftmaxCrossEntropy \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc758 \uac12\uc744 \ucd08\uae30\ud654 \ud558\uace0 \ud3ec\uc778\ud130 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \ub3d9\uc801\uc73c\ub85c \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud55c\ub2e4. Parameters pOperator SoftmaxCrossEntropy \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \uc785\ub825 Operator epsilon \uc5f0\uc0b0\uc5d0 \ub300\ud55c translation \uc694\uc18c Returns TRUE public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \uba54\ubaa8\ub9ac \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc softmax Result \ud150\uc11c \ud3ec\uc778\ud130, sum \ud3ec\uc778\ud130, max \ud3ec\uc778\ud130\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4 Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) SoftmaxCrossEntropy LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc LossFunction\uc758 \uc785\ub825 Operator\uc758 Tensor \uac12\uc5d0 \ub300\ud574\uc11c softmax \ud568\uc218 \uac12\uc744 \uacc4\uc0b0\ud558\uace0 \uc774\ub97c \ub808\uc774\ube14 \uac12\uacfc \ube44\uad50\ud574 Cross Entropy\ub97c \uad6c\ud55c\ub2e4 \uc5f0\uc0b0\uc744 \uc6a9\uc774\ud558\uac8c \ud558\uae30 \uc704\ud574 Max\uac12\uacfc epsilon \uac12\uc744 \uc0ac\uc6a9\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns LossFunction\uc758 \uc785\ub825 Operator\uc5d0 \ub300\ud55c Softmax Cross Entropy public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) Softmax CrossEntropy LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 Softmax CrossEntropy LossFunction\uc5d0 \ub300\ud55c \uc785\ub825 Tensor\uc758 Gradient\ub97c \uacc4\uc0b0\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns NULL public inline DTYPE Max ( Tensor < DTYPE > * input,int start,int end) \uc9c0\uc815\ub41c \ubc94\uc704 \uc548\uc5d0\uc11c \uc785\ub825 Tensor\uc758 \ub370\uc774\ud130 \uac12 \uc911 \ucd5c\ub313\uac12\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Parameters input \uc785\ub825 Tensor\uc758 \ud3ec\uc778\ud130 start \ubc94\uc704\uc758 \uc2dc\uc791 \uc778\ub371\uc2a4 end \ubc94\uc704 \uc885\ub8cc \uc778\ub371\uc2a4 Returns \uc9c0\uc815\ub41c \ubc94\uc704 \uc548\uc5d0\uc11c \uc785\ub825 Tensor\uc758 \ub370\uc774\ud130 \uac12\uc758 \ucd5c\ub313\uac12 class Switch \u00b6 class Switch : public Operator< DTYPE > Summary Members Descriptions public inline Switch ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,int pLoadflag) public inline Switch ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public inline ~Switch () public inline int GetSwitchNumber () public inline int SetSwitchNumber (int pSwitchNumber) public inline int Alloc ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline Switch ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,int pLoadflag) public inline Switch ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public inline ~Switch () public inline int GetSwitchNumber () public inline int SetSwitchNumber (int pSwitchNumber) public inline int Alloc ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class Tanh \u00b6 class Tanh : public Operator< DTYPE > Summary Members Descriptions public inline Tanh ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Tanh\uc758 \uc0dd\uc131\uc790 public inline ~Tanh () Tanh\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Tanh\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc public inline virtual int BackPropagate (int pTime) Tanh\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline Tanh ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Tanh\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. public inline ~Tanh () Tanh\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int ForwardPropagate (int pTime) Tanh\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc input\uc758 Tensor\uac12\ub4e4\uc744 Tanh\uc744 \ucde8\ud55c \ub4a4 result\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) Tanh\uc758 BackPropagate \ub9e4\uc18c\ub4dc. result\uac12\uc73c\ub85c tanh\uc758 \ubbf8\ubd84 \uac12\uc744 \uacc4\uc0b0\ud558\uc5ec input_delta\uc5d0 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class Tensor \u00b6 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub420 Tensor\ub97c \uc815\uc758\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4 Tensor\ud074\ub798\uc2a4\ub294 Shape\uc640 LongArray\ub97c \uc774\uc6a9\ud558\uc5ec Tensor\uc758 \ubaa8\uc591\uacfc \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4. Operator\ud074\ub798\uc2a4\uc5d0\uc11c m_aaResult(ForwardPropagate\ud55c \uac12)\uc640 m_aaGradient(BackPropagate\ud55c \uac12)\uc744 \uc800\uc7a5\ud55c\ub2e4. Summary Members Descriptions public Tensor (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,int pSize2,int pSize3,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,int pSize2,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,IsUseTime pAnswer) public Tensor (int pSize0,IsUseTime pAnswer) public Tensor ( Shape * pShape,IsUseTime pAnswer) public Tensor ( Tensor < DTYPE > * pTensor) public virtual ~Tensor () public Shape * GetShape () public int GetRank () public int GetDim (int pRanknum) public LongArray < DTYPE > * GetLongArray () public int GetCapacity () public int GetElement (unsigned int index) public DTYPE & operator[] (unsigned int index) public Device GetDevice () public IsUseTime GetIsUseTime () public DTYPE * GetCPULongArray (unsigned int pTime) public int GetTimeSize () public int GetBatchSize () public int GetChannelSize () public int GetRowSize () public int GetColSize () public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3) public int ReShape (int pSize0,int pSize1,int pSize2) public int ReShape (int pSize0,int pSize1) public int ReShape (int pSize0) public void Reset () public void SetDeviceCPU () public int Save (FILE * fp) public int Load (FILE * fp) public void Clip (float min,float max) public void MultiplyScalar (unsigned int pTime,float pScalar) Members public Tensor (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,int pSize2,int pSize3,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,int pSize2,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,IsUseTime pAnswer) public Tensor (int pSize0,IsUseTime pAnswer) public Tensor ( Shape * pShape,IsUseTime pAnswer) public Tensor ( Tensor < DTYPE > * pTensor) public virtual ~Tensor () public Shape * GetShape () public int GetRank () public int GetDim (int pRanknum) public LongArray < DTYPE > * GetLongArray () public int GetCapacity () public int GetElement (unsigned int index) public DTYPE & operator[] (unsigned int index) public Device GetDevice () public IsUseTime GetIsUseTime () public DTYPE * GetCPULongArray (unsigned int pTime) public int GetTimeSize () public int GetBatchSize () public int GetChannelSize () public int GetRowSize () public int GetColSize () public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3) public int ReShape (int pSize0,int pSize1,int pSize2) public int ReShape (int pSize0,int pSize1) public int ReShape (int pSize0) public void Reset () public void SetDeviceCPU () public int Save (FILE * fp) public int Load (FILE * fp) public void Clip (float min,float max) public void MultiplyScalar (unsigned int pTime,float pScalar) class Tensorholder \u00b6 Result\ub9cc \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. \uc8fc\ub85c Network\uc758 input, label\uac12\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud574 \uad6c\ud604\ub418\uc5c8\ub2e4. Summary Members Descriptions public inline Tensorholder ( Tensor < DTYPE > * pTensor,std::string pName,int pTrainable,int pLoadflag) Tensorholder\uc758 \uc0dd\uc131\uc790. public inline Tensorholder (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pTrainable,int pLoadflag) Tensorholder\uc758 \uc0dd\uc131\uc790. public inline ~Tensorholder () Tensorholder\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Tensor < DTYPE > * pTensor,int pTrainable) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc53\uc740 pTensor\ub85c Tensorholder\ub97c \uc124\uc815\ud55c\ub2e4. public inline int Alloc (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,int pTrainable) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc53\uc740 \ubcc0\uc218\ub4e4\ub85c pTensor\ub97c \uc0dd\uc131\ud558\uace0 Tensorholder\ub97c \uc124\uc815\ud55c\ub2e4. public inline Tensor < DTYPE > * GetTensor () public inline void SetTensor ( Tensor < DTYPE > * pTensor) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\ub97c Result\ub85c \uc124\uc815\ud55c\ub2e4. public inline void FeedTensor ( Tensor < DTYPE > * pTensor) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\ub97c Result\ub85c \uc124\uc815\ud55c\ub2e4. Members public inline Tensorholder ( Tensor < DTYPE > * pTensor,std::string pName,int pTrainable,int pLoadflag) Tensorholder\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pTensor, pTrainable\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pTensor Alloc\uc5d0 \uc0ac\uc6a9\ud560 Tensor , \uacb0\ub860\uc801\uc73c\ub85c Tensorholder\uc758 Result\ub85c \uc124\uc815\ub41c\ub2e4. pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Tensorholder\uc758 \uc774\ub984. pTrainable \uc0dd\uc131 \ud560 Operator(Tensorholder) \uac00 Trainable\uc778\uc9c0 \uc54c\ub9ac\ub294 \ubcc0\uc218. default\ub85c TRUE\ub97c \uc0ac\uc6a9\ud55c\ub2e4. int Alloc(Tensor *pTensor, int pTrainable) public inline Tensorholder (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pTrainable,int pLoadflag) Tensorholder\uc758 \uc0dd\uc131\uc790. \ud30c\ub9ac\ubbf8\ud130\ub85c \ubc1b\uc740 pTimeSize, pBatchSize, pChannelSize, pRowSize, pColSize, pTrainable\ub85c Alloc\ud55c\ub2e4. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \ubcc0\uc218\ub4e4\uc740 Alloc\uc5d0\uc11c \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc744 \uacb0\uc815\ud55c\ub2e4. Parameters pTimeSize Alloc\uc5d0 \uc0ac\uc6a9 \ud560 timesize. pBatchSize Alloc\uc5d0 \uc0ac\uc6a9 \ud560 batchsize. pChannelSize Alloc\uc5d0 \uc0ac\uc6a9 \ud560 channelsize. pRowSize Alloc\uc5d0 \uc0ac\uc6a9 \ud560 rowsize pColSize Alloc\uc5d0 \uc0ac\uc6a9 \ud560 colsize pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Tensorholder\uc758 \uc774\ub984. pTrainable \uc0dd\uc131 \ud560 Operator(Tensorholder) \uac00 Trainable\uc778\uc9c0 \uc54c\ub9ac\ub294 \ubcc0\uc218. default\ub85c TRUE\ub97c \uc0ac\uc6a9\ud55c\ub2e4. int Alloc(int pTimeSize, int pBatchSize, int pChannelSize, int pRowSize, int pColSize, int pTrainable) public inline ~Tensorholder () Tensorholder\uc758 \uc18c\uba78\uc790. \ub531\ud788 \ud558\ub294 \uc77c\uc740 \uc5c6\ub2e4. public inline int Alloc ( Tensor < DTYPE > * pTensor,int pTrainable) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc53\uc740 pTensor\ub85c Tensorholder\ub97c \uc124\uc815\ud55c\ub2e4. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pTensor\ub97c Result\uac12\uc73c\ub85c \uc124\uc815\ud55c\ub2e4. SetIsTensorholder\ub97c \ud1b5\ud574 Tensorholder\uc784\uc744 \uc124\uc815\ud558\uace0, pTensor\uc758 Shape\uacfc \uac19\uc740 Shape\uc744 \uac16\ub294 Tensor\ub97c \ub9cc\ub4e4\uc5b4 Gradient\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pTensor Tensorholder\uc758 Result\ub85c \uc800\uc7a5 \ub420\uac12\uc744 \uac00\uc9c4 Tensor . pTrainable Training\uc774 \uac00\ub2a5\ud55c\uc9c0 \uc544\ub2cc\uc9c0 \uc54c\ub9ac\ub294 \ubcc0\uc218 Returns \uc131\uacf5 \uc2dc TRUE. int Operator ::ResetResult() int Operator ::SetIsTensorholder(int pIsParameter) int Operator ::SetIsTrainable(int pIsTrainable) int Operator ::AddGradient(Tensor *pTensor) public inline int Alloc (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,int pTrainable) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc53\uc740 \ubcc0\uc218\ub4e4\ub85c pTensor\ub97c \uc0dd\uc131\ud558\uace0 Tensorholder\ub97c \uc124\uc815\ud55c\ub2e4. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \ubcc0\uc218\ub4e4\ub85c pTensor\ub97c \uc0dd\uc131\ud558\uace0 Result\ub85c \uc124\uc815\ud55c\ub2e4. \uc0dd\uc131\ud55c pTensor\uc758 Shape\uacfc \uac19\uc740 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec Gradient\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pTimeSize \uc0dd\uc131\ud560 pTensor\uc758 timesize pBatchSize \uc0dd\uc131\ud560 pTensor\uc758 batchsize pChannelSize \uc0dd\uc131\ud560 pTensor\uc758 channelsize pRowSize \uc0dd\uc131\ud560 pTensor\uc758 rowsize pColSize \uc0dd\uc131\ud560 pTensor\uc758 colsize pTrainable Training\uc774 \uac00\ub2a5\ud55c\uc9c0 \uc544\ub2cc\uc9c0 \uc54c\ub9ac\ub294 \ubcc0\uc218 Returns \uc131\uacf5 \uc2dc TRUE. int Operator ::ResetResult() int Operator ::SetIsTensorholder(int pIsParameter) int Operator ::SetIsTrainable(int pIsTrainable) Shape *Tensor ::GetShape() int Operator ::AddGradient(Tensor *pTensor) public inline Tensor < DTYPE > * GetTensor () public inline void SetTensor ( Tensor < DTYPE > * pTensor) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\ub97c Result\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pTensor Result\ub85c \uc124\uc815 \ud560 Tensor . public inline void FeedTensor ( Tensor < DTYPE > * pTensor) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\ub97c Result\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pTensor Result\ub85c \uc124\uc815 \ud560 Tensor . class TransposedConvolution2D \u00b6 class TransposedConvolution2D : public Operator< DTYPE > Summary Members Descriptions public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. public inline virtual ~TransposedConvolution2D () TransposedConvolution2D\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) TransposedConvolution2D\uc758 ForwardPropagate \uba54\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) TRANSPOSEDCONVOLUTION_2D\uc758 BackPropagate \uba54\uc18c\ub4dc. Members public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2\ub85c Alloc\ud55c\ub2e4. Parameters pInput TransposedConvolution\ud560 Operator pWeight TransposedConvolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2\ub85c Alloc\ud55c\ub2e4. Parameters pInput TransposedConvolution\ud560 Operator pWeight TransposedConvolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding padding \ud560 \uac12. height, width \ubaa8\ub450 \uc774 \uac12\uc73c\ub85c \ud55c\ub2e4. pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\ub85c Alloc\ud55c\ub2e4. Parameters pInput TransposedConvolution\ud560 Operator pWeight TransposedConvolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding1 height padding\uac12 padding2 width padding\uac12 pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline virtual ~TransposedConvolution2D () TransposedConvolution2D\uc758 \uc18c\uba78\uc790. Delete\ub9e4\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uac12\ub4e4\uc744 \ud574\uc81c\ud55c\ub2e4. void Delete() public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. pInput\uacfc pWeight\uc758 Shape\uacfc stride, padding\uac12\uc73c\ub85c output\uc73c\ub85c Result\uc640 Delta\ub85c \uc0ac\uc6a9 \ud560 Tensor\uc758 Shape\uc744 \uc815\uc758\ud55c\ub2e4. Parameters pInput transposedConvolution\ud560 Operator pWeight transposedConvolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding1 height padding\uac12 padding2 width padding\uac12 public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. inputTensorDesc, outputTensorDesc,deltaDesc, inputDeltaDesc, convDesc, filterDesc,filterDeltaDesc\ub4e4\uc744 \uc0ad\uc81c\ud558\uace0 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. cudnn\uc5f0\uc0b0\uc744 \uc704\ud574 \ud560\ub2f9 \ud588\ub358 \uba54\ubaa8\ub9ac\ub4e4\uc744 \ud574\uc81c\uc2dc\ud0a8\ub2e4. public inline virtual int ForwardPropagate (int pTime) TransposedConvolution2D\uc758 ForwardPropagate \uba54\uc18c\ub4dc. weight(filter size = rowsizeOfWeight * colsizeOfWeight)\uc640 input\uc758 \uacf1\ud55c \uac12\uc744 result\uc5d0 \ub354\ud574 \ub123\ub294\ub2e4. \uc774\ub54c m_stride\uac12\ub4e4 \ub9cc\ud07c \uc774\ub3d9\ud558\uba70 result\ub97c \uacc4\uc0b0\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) TRANSPOSEDCONVOLUTION_2D\uc758 BackPropagate \uba54\uc18c\ub4dc. TransposedConvolution\uc758 \ubbf8\ubd84 \uac12(weight * this_delta, input * this_delta)\uc744 \uacc4\uc0b0\ud558\uc5ec input_delta\uc640 weight_gradient\uc5d0 \uac01\uac01 \ub354\ud574 \ub123\ub294\ub2e4. \uc774\ub54c m_stride\uac12\ub4e4 \ub9cc\ud07c \uc774\ub3d9\ud558\uba70 \ubbf8\ubd84 \uac12\uc744 \ub123\uc744 \uc704\uce58\ub97c \uacc4\uc0b0\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class TransposedConvolutionLayer2D \u00b6 class TransposedConvolutionLayer2D : public Module< DTYPE > \uad6c\uc131\ud574 2-Dimensional TransposedConvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 2-Dimensional Transposedconvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4 Summary Members Descriptions public inline TransposedConvolutionLayer2D ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPadding,int use_bias,std::string pName) TransposedConvolutionLayer2D \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~TransposedConvolutionLayer2D () TransposedConvolutionLayer2D \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPaddingRow,int pPaddingCol,int use_bias,std::string pName) 2D TransposedConvolution Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Members public inline TransposedConvolutionLayer2D ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPadding,int use_bias,std::string pName) TransposedConvolutionLayer2D \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 TransposedConvolutionLayer2D \ud074\ub798\uc2a4\uc758 Alloc \ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4. See also : TransposedConvolutionLayer2D ::Alloc(Operator *pInput, int pNumInputChannel, int pNumOutputChannel, int pNumKernelRow, int pNumKernelCol, int pStrideRow, int pStrideCol, int pPaddingRow, int pPaddingCol, int use_bias, std::string pName) public inline virtual ~TransposedConvolutionLayer2D () TransposedConvolutionLayer2D \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub2e8, \ub3d9\uc801 \ud560\ub2f9 \ubc1b\uc740 Operator\ub4e4\uc740 NeuralNetwork\uc5d0\uc11c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPaddingRow,int pPaddingCol,int use_bias,std::string pName) 2D TransposedConvolution Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Input Operator\uc758 Element\uc5d0 \ub300\ud574 2D TransposedConvolution \uc218\ud589\ud55c\ub2e4. Input Operator\uc758 Element\uc5d0 \ub300\ud574 Weight\ub97c \uc774\uc6a9\ud574 2\ucc28\uc6d0 \uc804\uce58\ud569\uc131 \uacf1(2D TransposedConvolution)\uc744 \uc218\ud589\ud558\uace0 Bias\uac00 \uc874\uc7ac\ud560 \uc2dc Bias\ub97c \ud569(Column Wise Addition)\ud574 Output Operator\ub85c \ub0b4\ubcf4\ub0b4\ub294 layer\ub97c \uad6c\uc131\ud55c\ub2e4. Parameters pInput \ud574\ub2f9 Layer\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pNumInputChannel \ud574\ub2f9 Layer\uc758 Input Operator\uc758 Channel\uc758 \uac2f\uc218, Input Column\uc5d0 \ub300\ud55c Dimension pNumOutputChannel \ud574\ub2f9 Layer\uc758 Output Operator\uc758 Channel\uc758 \uac2f\uc218, Output Column\uc5d0 \ub300\ud55c Dimension pNumKernelRow 2D TransposedConvolution Layer \ucee4\ub110\uc758 Row Size pNumKernelCol 2D TransposedConvolution Layer \ucee4\ub110\uc758 Column Size pStrideRow 2D TransposedConvolution Layer\uc758 Row Stride Size pStrideCol 2D TransposedConvolution Layer\uc758 Column Stride Size pPaddingRow 2D TransposedConvolution Layer\uc758 Row Padding \uac12 pPaddingCol 2D TransposedConvolution Layer\uc758 Column Padding \uac12 use_bias Bias \uc0ac\uc6a9 \uc720\ubb34, 0\uc77c \uc2dc \uc0ac\uc6a9 \uc548 \ud568, 0\uc774 \uc544\ub2d0 \uc2dc \uc0ac\uc6a9 pName Module\uc758 \uc774\ub984 Returns TRUE See also : TransposedConvolutionLayer2D ::TransposedConvolutionLayer2D ( Operator *pInput, Operator *pWeight, int stride1, int stride2, std::string pName = \"NO NAME\") AddColWise ::AddColWise(Operator *pInput, Operator *pBias, std::string pName) Module ::AnalyzeGraph(Operator *pResultOperator) class TripletLoss \u00b6 class TripletLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline TripletLoss ( Operator < DTYPE > * pOperator,DTYPE margin,std::string pName) public inline TripletLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE margin,std::string pName) public inline ~TripletLoss () public inline int Alloc ( Operator < DTYPE > * pOperator,DTYPE margin) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline TripletLoss ( Operator < DTYPE > * pOperator,DTYPE margin,std::string pName) public inline TripletLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE margin,std::string pName) public inline ~TripletLoss () public inline int Alloc ( Operator < DTYPE > * pOperator,DTYPE margin) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class UniformNoiseGenerator \u00b6 class UniformNoiseGenerator : public NoiseGenerator< DTYPE > Summary Members Descriptions public inline UniformNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float pLowerLimit,float pUpperLimit,IsUseTime pAnswer,std::string pName) public inline ~UniformNoiseGenerator () public inline void StartProduce () public inline void StopProduce () public inline int GenerateNoise () public inline int AddNoise2Buffer ( Tensor < DTYPE > * noise) public inline Tensor < DTYPE > * GetNoiseFromBuffer () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline UniformNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float pLowerLimit,float pUpperLimit,IsUseTime pAnswer,std::string pName) public inline ~UniformNoiseGenerator () public inline void StartProduce () public inline void StopProduce () public inline int GenerateNoise () public inline int AddNoise2Buffer ( Tensor < DTYPE > * noise) public inline Tensor < DTYPE > * GetNoiseFromBuffer () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class VanillaGANDiscriminatorLoss \u00b6 class VanillaGANDiscriminatorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline VanillaGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) public inline VanillaGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~VanillaGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline VanillaGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) public inline VanillaGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~VanillaGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class VanillaGANGeneratorLoss \u00b6 class VanillaGANGeneratorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline VanillaGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) public inline VanillaGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~VanillaGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline VanillaGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) public inline VanillaGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~VanillaGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class WData \u00b6 Summary Members Descriptions public DTYPE * m_aData public int m_capacity public inline WData (DTYPE * data,int capacity) public inline virtual ~WData () public inline virtual DTYPE * GetData () public inline virtual int GetCapacity () public inline DTYPE & operator[] (int idx) Members public DTYPE * m_aData public int m_capacity public inline WData (DTYPE * data,int capacity) public inline virtual ~WData () public inline virtual DTYPE * GetData () public inline virtual int GetCapacity () public inline DTYPE & operator[] (int idx) class WGANDiscriminatorLoss \u00b6 class WGANDiscriminatorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline WGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~WGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline WGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~WGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class WGANGeneratorLoss \u00b6 class WGANGeneratorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline WGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~WGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline WGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~WGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL Generated by Moxygen","title":"API"},{"location":"api/#summary","text":"Members Descriptions class AdagradOptimizer class Adam class AdamOptimizer class Addall \uac12\ub4e4\uc744 \uc11c\ub85c \ub354\ud558\ub294 class class AddChannelWise \uc11c\ub85c \ub354\ud558\ub294 class class AddColWise \uc911 Colunm\uc5d0\ub9cc \uac12\uc744 \ub354\ud558\ub294 class class AvaragePooling2D class BatchNormalize class BatchNormalizeLayer \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class BEGAN class BEGANDiscriminatorLoss class BEGANGeneratorLoss class ConcatenateChannelWise class Container \uc800\uc7a5\ud558\uae30 \uc704\ud55c Queue\uc5d0 \ud574\ub2f9\ud558\ub294 \ud074\ub798\uc2a4 class Convolution2D class ConvolutionLayer2D \uad6c\uc131\ud574 2-Dimensional Convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class CrossEntropy Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class DataLoader class Dataset class Dropout class FewShotClassifier class GAN class GaussianNoiseGenerator class GlobalAvaragePooling2D Row * Colunm \uacf5\uac04\uc744 GlobalAvaragePooling\ud558\ub294 \ud074\ub798\uc2a4. class GradientDescentOptimizer class HingeLoss Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class KNearestNeighbor class Linear \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class LongArray \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4. class LossFunction \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class LRelu class MatMul class Maxpooling2D class Module \uad6c\uc131\ud574 \ubaa8\ub4c8\ud654\ud558\ub294 \ud074\ub798\uc2a4 class MSE Squared Error) Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class NagOptimizer class NeuralNetwork \ubaa8\ub378 \uc0dd\uc131, \ud559\uc2b5 \ubc0f \ud3c9\uac00\ub97c \ucd1d\uad04\ud558\ub294 \ud074\ub798\uc2a4 class NoiseGenerator Tensor \ud074\ub798\uc2a4\uc758 Random_normal \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubc94\uc704 \ub0b4\uc758 \uc784\uc758\uc758 \uac12\uc744 \uac16\ub294 Tensor \uc0dd\uc131 class Operator \ubcf8 \ud504\ub798\uc784\uc6cc\ud06c\uc758 \uac00\uc7a5 \uc791\uc740 \uc5f0\uc0b0 \ub2e8\uc704. class Optimizer class PRelu class ReconstructionError class Recurrent class Relu class ReShape class RMSPropOptimizer class Sequential class Shape \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 class Sigmoid class Softmax class SoftmaxCrossEntropy \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class Switch class Tanh class Tensor \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 class Tensorholder Result\ub9cc \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. class TransposedConvolution2D class TransposedConvolutionLayer2D \uad6c\uc131\ud574 2-Dimensional TransposedConvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class TripletLoss class UniformNoiseGenerator class VanillaGANDiscriminatorLoss class VanillaGANGeneratorLoss class WData class WGANDiscriminatorLoss class WGANGeneratorLoss","title":"Summary"},{"location":"api/#classAdagradOptimizer","text":"class AdagradOptimizer : public Optimizer< DTYPE >","title":"class AdagradOptimizer"},{"location":"api/#classAdam","text":"","title":"class Adam"},{"location":"api/#classAdamOptimizer","text":"class AdamOptimizer : public Optimizer< DTYPE >","title":"class AdamOptimizer"},{"location":"api/#classAddall","text":"class Addall : public Operator< DTYPE > \uac12\ub4e4\uc744 \uc11c\ub85c \ub354\ud558\ub294 class","title":"class Addall"},{"location":"api/#classAddChannelWise","text":"class AddChannelWise : public Operator< DTYPE > \uc11c\ub85c \ub354\ud558\ub294 class","title":"class AddChannelWise"},{"location":"api/#classAddColWise","text":"class AddColWise : public Operator< DTYPE > \uc911 Colunm\uc5d0\ub9cc \uac12\uc744 \ub354\ud558\ub294 class","title":"class AddColWise"},{"location":"api/#classAvaragePooling2D","text":"class AvaragePooling2D : public Operator< DTYPE >","title":"class AvaragePooling2D"},{"location":"api/#classBatchNormalize","text":"class BatchNormalize : public Operator< DTYPE >","title":"class BatchNormalize"},{"location":"api/#classBatchNormalizeLayer","text":"class BatchNormalizeLayer : public Module< DTYPE > \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4","title":"class BatchNormalizeLayer"},{"location":"api/#classBEGAN","text":"class BEGAN : public GAN< DTYPE >","title":"class BEGAN"},{"location":"api/#classBEGANDiscriminatorLoss","text":"class BEGANDiscriminatorLoss : public LossFunction< DTYPE >","title":"class BEGANDiscriminatorLoss"},{"location":"api/#classBEGANGeneratorLoss","text":"class BEGANGeneratorLoss : public LossFunction< DTYPE >","title":"class BEGANGeneratorLoss"},{"location":"api/#classConcatenateChannelWise","text":"class ConcatenateChannelWise : public Operator< DTYPE >","title":"class ConcatenateChannelWise"},{"location":"api/#classContainer","text":"\uc800\uc7a5\ud558\uae30 \uc704\ud55c Queue\uc5d0 \ud574\ub2f9\ud558\ub294 \ud074\ub798\uc2a4 Tensor , Operator , Tensorholder \uc138 \uac00\uc9c0 \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c Queue\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c\ub2e4. \uae30\ubcf8 queue \uad6c\uc870\uc5d0 \uc778\ub371\uc2a4\ub97c \uc774\uc6a9\ud55c \uc811\uadfc \ubc0f \uc5ed\uc21c\uc73c\ub85c \uc811\uadfc \ub4f1 \ucd94\uac00\uc801\uc778 \uba54\uc18c\ub4dc\uac00 \uad6c\ud604\ub418\uc5b4 \uc788\ub2e4.","title":"class Container"},{"location":"api/#classConvolution2D","text":"class Convolution2D : public Operator< DTYPE >","title":"class Convolution2D"},{"location":"api/#classConvolutionLayer2D","text":"class ConvolutionLayer2D : public Module< DTYPE > \uad6c\uc131\ud574 2-Dimensional Convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 2-Dimensional convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4","title":"class ConvolutionLayer2D"},{"location":"api/#classCrossEntropy","text":"class CrossEntropy : public LossFunction< DTYPE > Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Cross Entropy \uacc4\uc0b0\uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4","title":"class CrossEntropy"},{"location":"api/#classDataLoader","text":"","title":"class DataLoader"},{"location":"api/#classDataset","text":"","title":"class Dataset"},{"location":"api/#classDropout","text":"class Dropout : public Operator< DTYPE >","title":"class Dropout"},{"location":"api/#classFewShotClassifier","text":"","title":"class FewShotClassifier"},{"location":"api/#classGAN","text":"class GAN : public NeuralNetwork< DTYPE >","title":"class GAN"},{"location":"api/#classGaussianNoiseGenerator","text":"class GaussianNoiseGenerator : public NoiseGenerator< DTYPE >","title":"class GaussianNoiseGenerator"},{"location":"api/#classGlobalAvaragePooling2D","text":"class GlobalAvaragePooling2D : public Operator< DTYPE > Row * Colunm \uacf5\uac04\uc744 GlobalAvaragePooling\ud558\ub294 \ud074\ub798\uc2a4.","title":"class GlobalAvaragePooling2D"},{"location":"api/#classGradientDescentOptimizer","text":"class GradientDescentOptimizer : public Optimizer< DTYPE >","title":"class GradientDescentOptimizer"},{"location":"api/#classHingeLoss","text":"class HingeLoss : public LossFunction< DTYPE > Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Hinge Loss \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4","title":"class HingeLoss"},{"location":"api/#classKNearestNeighbor","text":"","title":"class KNearestNeighbor"},{"location":"api/#classLinear","text":"class Linear : public Module< DTYPE > \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4","title":"class Linear"},{"location":"api/#classLongArray","text":"\ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4. \ud559\uc2b5\uc5d0 \uc0ac\uc6a9 \ub420 Tensor\uc758 \ub9f4\ubc84\ubcc0\uc218 \uc911 LongArray\ub97c \uc815\uc758\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. \uc2e4\uc9c8\uc801\uc73c\ub85c Tensor\ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\uae30\uc704\ud55c \ud074\ub798\uc2a4. \ub370\uc774\ud130\ub97c \ucd08\uae30\ud654\ud558\uace0 CPU\uc640 GPU\uac04 \ub370\uc774\ud130\uc758 \uc774\ub3d9\uc744 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4.","title":"class LongArray"},{"location":"api/#classLossFunction","text":"\uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc744 \ube44\uad50\ud574 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4.","title":"class LossFunction"},{"location":"api/#classLRelu","text":"class LRelu : public Operator< DTYPE >","title":"class LRelu"},{"location":"api/#classMatMul","text":"class MatMul : public Operator< DTYPE >","title":"class MatMul"},{"location":"api/#classMaxpooling2D","text":"class Maxpooling2D : public Operator< DTYPE >","title":"class Maxpooling2D"},{"location":"api/#classModule","text":"class Module : public Operator< DTYPE > \uad6c\uc131\ud574 \ubaa8\ub4c8\ud654\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 \ub2e8\uc77c Operator\ub85c\uc11c \ud560 \uc218 \uc5c6\ub294 \uae30\ub2a5\ub4e4\uc744 \uc218\ud589\ud558\uac8c \ud55c\ub2e4 Module\uc740 \ud558\ub098\uc758 Operator\ucc98\ub7fc \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c \uc548\uc5d0\uc11c \uc791\ub3d9\ud55c\ub2e4","title":"class Module"},{"location":"api/#classMSE","text":"class MSE : public LossFunction< DTYPE > Squared Error) Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 MSE(Mean Squared Error) \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4","title":"class MSE"},{"location":"api/#classNagOptimizer","text":"class NagOptimizer : public Optimizer< DTYPE >","title":"class NagOptimizer"},{"location":"api/#classNeuralNetwork","text":"class NeuralNetwork : public Module< DTYPE > \ubaa8\ub378 \uc0dd\uc131, \ud559\uc2b5 \ubc0f \ud3c9\uac00\ub97c \ucd1d\uad04\ud558\ub294 \ud074\ub798\uc2a4 Operator , Module , Loss Function, Optimizer \ud074\ub798\uc2a4\ub97c \uc0dd\uc131 \ubc0f \ud65c\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\uc131\ud558\uace0 \ud559\uc2b5\uc2dc\ud0a8\ub2e4","title":"class NeuralNetwork"},{"location":"api/#classNoiseGenerator","text":"class NoiseGenerator : public Operator< DTYPE > Tensor \ud074\ub798\uc2a4\uc758 Random_normal \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubc94\uc704 \ub0b4\uc758 \uc784\uc758\uc758 \uac12\uc744 \uac16\ub294 Tensor \uc0dd\uc131 Operator \ud615\uc2dd\uc774\uc9c0\ub9cc Tensor\ub97c \uc800\uc7a5\ud558\ub294 \uc6a9\ub3c4\ub85c\ub9cc \uc0ac\uc6a9","title":"class NoiseGenerator"},{"location":"api/#classOperator","text":"\ubcf8 \ud504\ub798\uc784\uc6cc\ud06c\uc758 \uac00\uc7a5 \uc791\uc740 \uc5f0\uc0b0 \ub2e8\uc704.","title":"class Operator"},{"location":"api/#classOptimizer","text":"","title":"class Optimizer"},{"location":"api/#classPRelu","text":"class PRelu : public Operator< DTYPE >","title":"class PRelu"},{"location":"api/#classReconstructionError","text":"class ReconstructionError : public Operator< DTYPE >","title":"class ReconstructionError"},{"location":"api/#classRecurrent","text":"class Recurrent : public Operator< DTYPE >","title":"class Recurrent"},{"location":"api/#classRelu","text":"class Relu : public Operator< DTYPE >","title":"class Relu"},{"location":"api/#classReShape","text":"class ReShape : public Operator< DTYPE >","title":"class ReShape"},{"location":"api/#classRMSPropOptimizer","text":"class RMSPropOptimizer : public Optimizer< DTYPE >","title":"class RMSPropOptimizer"},{"location":"api/#classSequential","text":"class Sequential : public Operator< DTYPE >","title":"class Sequential"},{"location":"api/#classShape","text":"\uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 Tensor\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4","title":"class Shape"},{"location":"api/#classSigmoid","text":"class Sigmoid : public Operator< DTYPE >","title":"class Sigmoid"},{"location":"api/#classSoftmax","text":"class Softmax : public Operator< DTYPE >","title":"class Softmax"},{"location":"api/#classSoftmaxCrossEntropy","text":"class SoftmaxCrossEntropy : public LossFunction< DTYPE > \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Cross Entropy \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4 Softmax Function\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \ub9c8\uc9c0\ub9c9 Operator\ub85c \uc0ac\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 Gradient \uacc4\uc0b0\uc744 \uc6a9\uc774\ud558\uac8c \ud55c\ub2e4","title":"class SoftmaxCrossEntropy"},{"location":"api/#classSwitch","text":"class Switch : public Operator< DTYPE >","title":"class Switch"},{"location":"api/#classTanh","text":"class Tanh : public Operator< DTYPE >","title":"class Tanh"},{"location":"api/#classTensor","text":"\uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub420 Tensor\ub97c \uc815\uc758\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4 Tensor\ud074\ub798\uc2a4\ub294 Shape\uc640 LongArray\ub97c \uc774\uc6a9\ud558\uc5ec Tensor\uc758 \ubaa8\uc591\uacfc \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4. Operator\ud074\ub798\uc2a4\uc5d0\uc11c m_aaResult(ForwardPropagate\ud55c \uac12)\uc640 m_aaGradient(BackPropagate\ud55c \uac12)\uc744 \uc800\uc7a5\ud55c\ub2e4.","title":"class Tensor"},{"location":"api/#classTensorholder","text":"Result\ub9cc \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. \uc8fc\ub85c Network\uc758 input, label\uac12\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud574 \uad6c\ud604\ub418\uc5c8\ub2e4.","title":"class Tensorholder"},{"location":"api/#classTransposedConvolution2D","text":"class TransposedConvolution2D : public Operator< DTYPE >","title":"class TransposedConvolution2D"},{"location":"api/#classTransposedConvolutionLayer2D","text":"class TransposedConvolutionLayer2D : public Module< DTYPE > \uad6c\uc131\ud574 2-Dimensional TransposedConvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 2-Dimensional Transposedconvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4","title":"class TransposedConvolutionLayer2D"},{"location":"api/#classTripletLoss","text":"class TripletLoss : public LossFunction< DTYPE >","title":"class TripletLoss"},{"location":"api/#classUniformNoiseGenerator","text":"class UniformNoiseGenerator : public NoiseGenerator< DTYPE >","title":"class UniformNoiseGenerator"},{"location":"api/#classVanillaGANDiscriminatorLoss","text":"class VanillaGANDiscriminatorLoss : public LossFunction< DTYPE >","title":"class VanillaGANDiscriminatorLoss"},{"location":"api/#classVanillaGANGeneratorLoss","text":"class VanillaGANGeneratorLoss : public LossFunction< DTYPE >","title":"class VanillaGANGeneratorLoss"},{"location":"api/#classWData","text":"","title":"class WData"},{"location":"api/#classWGANDiscriminatorLoss","text":"class WGANDiscriminatorLoss : public LossFunction< DTYPE >","title":"class WGANDiscriminatorLoss"},{"location":"api/#classWGANGeneratorLoss","text":"class WGANGeneratorLoss : public LossFunction< DTYPE >","title":"class WGANGeneratorLoss"},{"location":"dev/GPU/cuda/","text":"CUDA \ub294 \uc5d4\ube44\ub514\uc544 GPU \ub97c \ud6a8\uacfc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. CUDA \uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uacfc \ucd94\uac00\uc801\uc778 \ud559\uc2b5\uc744 \uc704\ud55c \ud29c\ud1a0\ub9ac\uc5bc \uc790\ub8cc\ub294 \ub2e4\uc74c \ub9c1\ud06c\ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694. Official CUDA C++ Programming Guide Official CUDA C++ Documentation Unofficial CUDA C++ Tutorial Tip \uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ud559\uc2b5\ud558\uba74 \ub9e4\uc6b0 \uac04\ub2e8\ud558\uace0 \uc27d\uac8c CUDA \uc758 \uccab\uac78\uc74c\uc744 \ub5c4 \uc218 \uc788\uc5b4\uc11c \uac15\ucd94\ud569\ub2c8\ub2e4. \uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ud559\uc2b5\ud558\uace0 CUDA \uc758 \uacf5\uc2dd Programming Guide \ub97c \ud559\uc2b5\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. Awesome-GPU Awesome-CUDA \uc5ec\uae30\uc5d0\uc11c\ub294 \uac04\ub2e8\ud558\uac8c CUDA \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. CUDA \uae30\ucd08 \u00b6 CUDA \uc5d0\uc11c\ub294 CPU \ub97c host , GPU \ub97c device \ub77c\uace0 \ud569\ub2c8\ub2e4. __global__ \ud0a4\uc6cc\ub4dc\ub97c \ud568\uc218 \uc120\uc5b8 \ub9e8 \uc55e\uc5d0 \uc4f0\uba74 \ud568\uc218\uac00 device \uc5d0\uc11c \uc2e4\ud589\ub41c\ub2e4. device \uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ud568\uc218\ub97c kernel \uc774\ub77c\uace0 \ud55c\ub2e4. Example __global__ void cuda_hello (){ printf ( \"Hello World from GPU! \\n \" ); } kernel \uc740 GPU \uc5d0\uc11c \uc2e4\ud589\ub418\ub294\ub370 GPU \ub294 CPU \uc640 \ub3c5\ub9bd\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac16\uc2b5\ub2c8\ub2e4. \uc774\ub54c CPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 host memory , GPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 device memory \ub77c\uace0 \ud569\ub2c8\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c CPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac00\ub974\ud0a4\ub294 \ud3ec\uc778\ud130\ub97c host pointer , GPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac00\ub974\ud0a4\ub294 \ud3ec\uc778\ud130\ub97c device pointer \ub77c\uace0 \ud569\ub2c8\ub2e4. CUDA \ud504\ub85c\uadf8\ub7a8 \uae30\ubcf8 \ud750\ub984 \u00b6 device memory \uac00 host memory \uc640 \ub3c5\ub9bd\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 host memory \uc758 \ub370\uc774\ud130\ub97c device memory \ub85c \uc62e\uaca8\uc8fc\uc5b4\uc57c\ub9cc GPU \uac00 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c CUDA \ud504\ub85c\uadf8\ub7a8\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc2e4\ud589\ud750\ub984\uc744 \uac16\uc2b5\ub2c8\ub2e4. host memory \ub97c \ud560\ub2f9\ud558\uace0, \ub370\uc774\ud130\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. device memory \ub97c \ud560\ub2f9\ud55c\ub2e4. host memory \uc758 \ub370\uc774\ud130\ub97c device memory \ub85c \uc62e\uae34\ub2e4. kernel \uc744 \uc2e4\ud589\ud55c\ub2e4. kernel \uc2e4\ud589 \uacb0\uacfc\ub97c device memory \uc5d0\uc11c host memory \ub85c \uc62e\uae34\ub2e4. Note host memory \ud560\ub2f9/\ud574\uc81c\ub294 malloc() / free() \ub610\ub294 new / delete \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. device memory \ud560\ub2f9/\ud574\uc81c\ub294 cudaMalloc() / cudaFree() \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. host memory \uc5d0\uc11c device memory \ub85c, \ub610\ub294 device memory \uc5d0\uc11c host memory \ub85c \ub370\uc774\ud130\ub97c \uc62e\uae30\ub294 \uac83\uc740 cudaMemcpy() \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. kernel \uc2e4\ud589 \u00b6 \uc774\ub984 func \uc744 \uac16\ub294 kernel \uc740 func<<<GRID, THREADS>>>(...) \uc640 \uac19\uc774 \ud638\ucd9c\ub429\ub2c8\ub2e4. THREADS \ub294 \uc2a4\ub808\ub4dc \ube14\ub85d\uc774 \uac16\ub294 \uc2a4\ub808\ub4dc \uac1c\uc218\ub97c \ub73b\ud55c\ub2e4. GRID \ub294 \uc2a4\ub808\ub4dc \ube14\ub85d\uc758 \uac1c\uc218\ub97c \ub73b\ud55c\ub2e4. CUDA \ub294 <<<GRID, THREADS>>> \ub85c\uc368 kernel \uc744 \uc790\ub3d9\uc73c\ub85c GPU \uc758 \ubcd1\ub82c \uc2a4\ub808\ub4dc\ub85c \ud638\ucd9c\ud574\uc90d\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uac01\uac01\uc758 \uc2a4\ub808\ub4dc\uac00 kernal \uc758 \uc791\uc5c5\uc744 \uacf5\ud3c9\ud558\uac8c \ubc30\ubd84\ubc1b\uc744 \uc218 \uc788\ub3c4\ub85d \ud574\uc57c \ud569\ub2c8\ub2e4. \uc2a4\ub808\ub4dc\uc5d0 \uc791\uc5c5\uc744 \uacf5\ud3c9\ud558\uac8c \ubd84\ubc30\ud558\uae30 \uc704\ud558\uc5ec \uc2a4\ub808\ub4dc \uc778\ub371\uc2a4\uc640 \uc2a4\ub808\ub4dc \uac1c\uc218, \uc2a4\ub808\ub4dc \ube14\ub85d \uc778\ub371\uc2a4, \uc2a4\ub808\ub4dc \ube14\ub85d \uac1c\uc218 \uc815\ubcf4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 kernel \ub0b4\ubd80\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubcc0\uc218\ub4e4\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. threadIdx.x : \uc2a4\ub808\ub4dc \ube14\ub85d \ub0b4\ubd80\uc5d0\uc11c \ud604\uc7ac\uc758 \uc2a4\ub808\ub4dc\uc758 \uc778\ub371\uc2a4 blockDim.x : \uc2a4\ub808\ub4dc \ube14\ub85d \ub0b4\ubd80\uc758 \uc2a4\ub808\ub4dc \uac1c\uc218 blockIdx.x : \uc2a4\ub808\ub4dc \ube14\ub85d \uc778\ub371\uc2a4 gridDim.x : \uc2a4\ub808\ub4dc \ube14\ub85d\uc758 \uac1c\uc218 CUDA \ud504\ub85c\uadf8\ub7a8 \ubd84\uc11d \u00b6 nvprof \ub85c CUDA \ud504\ub85c\uadf8\ub7a8\uc758 \uc2e4\ud589\uacb0\uacfc\ub97c \uc790\uc138\ud788 \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"cuda"},{"location":"dev/GPU/cuda/#cuda","text":"CUDA \uc5d0\uc11c\ub294 CPU \ub97c host , GPU \ub97c device \ub77c\uace0 \ud569\ub2c8\ub2e4. __global__ \ud0a4\uc6cc\ub4dc\ub97c \ud568\uc218 \uc120\uc5b8 \ub9e8 \uc55e\uc5d0 \uc4f0\uba74 \ud568\uc218\uac00 device \uc5d0\uc11c \uc2e4\ud589\ub41c\ub2e4. device \uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ud568\uc218\ub97c kernel \uc774\ub77c\uace0 \ud55c\ub2e4. Example __global__ void cuda_hello (){ printf ( \"Hello World from GPU! \\n \" ); } kernel \uc740 GPU \uc5d0\uc11c \uc2e4\ud589\ub418\ub294\ub370 GPU \ub294 CPU \uc640 \ub3c5\ub9bd\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac16\uc2b5\ub2c8\ub2e4. \uc774\ub54c CPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 host memory , GPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 device memory \ub77c\uace0 \ud569\ub2c8\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c CPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac00\ub974\ud0a4\ub294 \ud3ec\uc778\ud130\ub97c host pointer , GPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac00\ub974\ud0a4\ub294 \ud3ec\uc778\ud130\ub97c device pointer \ub77c\uace0 \ud569\ub2c8\ub2e4.","title":"CUDA \uae30\ucd08"},{"location":"dev/GPU/cuda/#cuda_1","text":"device memory \uac00 host memory \uc640 \ub3c5\ub9bd\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 host memory \uc758 \ub370\uc774\ud130\ub97c device memory \ub85c \uc62e\uaca8\uc8fc\uc5b4\uc57c\ub9cc GPU \uac00 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c CUDA \ud504\ub85c\uadf8\ub7a8\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc2e4\ud589\ud750\ub984\uc744 \uac16\uc2b5\ub2c8\ub2e4. host memory \ub97c \ud560\ub2f9\ud558\uace0, \ub370\uc774\ud130\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. device memory \ub97c \ud560\ub2f9\ud55c\ub2e4. host memory \uc758 \ub370\uc774\ud130\ub97c device memory \ub85c \uc62e\uae34\ub2e4. kernel \uc744 \uc2e4\ud589\ud55c\ub2e4. kernel \uc2e4\ud589 \uacb0\uacfc\ub97c device memory \uc5d0\uc11c host memory \ub85c \uc62e\uae34\ub2e4. Note host memory \ud560\ub2f9/\ud574\uc81c\ub294 malloc() / free() \ub610\ub294 new / delete \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. device memory \ud560\ub2f9/\ud574\uc81c\ub294 cudaMalloc() / cudaFree() \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. host memory \uc5d0\uc11c device memory \ub85c, \ub610\ub294 device memory \uc5d0\uc11c host memory \ub85c \ub370\uc774\ud130\ub97c \uc62e\uae30\ub294 \uac83\uc740 cudaMemcpy() \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"CUDA \ud504\ub85c\uadf8\ub7a8 \uae30\ubcf8 \ud750\ub984"},{"location":"dev/GPU/cuda/#kernel","text":"\uc774\ub984 func \uc744 \uac16\ub294 kernel \uc740 func<<<GRID, THREADS>>>(...) \uc640 \uac19\uc774 \ud638\ucd9c\ub429\ub2c8\ub2e4. THREADS \ub294 \uc2a4\ub808\ub4dc \ube14\ub85d\uc774 \uac16\ub294 \uc2a4\ub808\ub4dc \uac1c\uc218\ub97c \ub73b\ud55c\ub2e4. GRID \ub294 \uc2a4\ub808\ub4dc \ube14\ub85d\uc758 \uac1c\uc218\ub97c \ub73b\ud55c\ub2e4. CUDA \ub294 <<<GRID, THREADS>>> \ub85c\uc368 kernel \uc744 \uc790\ub3d9\uc73c\ub85c GPU \uc758 \ubcd1\ub82c \uc2a4\ub808\ub4dc\ub85c \ud638\ucd9c\ud574\uc90d\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uac01\uac01\uc758 \uc2a4\ub808\ub4dc\uac00 kernal \uc758 \uc791\uc5c5\uc744 \uacf5\ud3c9\ud558\uac8c \ubc30\ubd84\ubc1b\uc744 \uc218 \uc788\ub3c4\ub85d \ud574\uc57c \ud569\ub2c8\ub2e4. \uc2a4\ub808\ub4dc\uc5d0 \uc791\uc5c5\uc744 \uacf5\ud3c9\ud558\uac8c \ubd84\ubc30\ud558\uae30 \uc704\ud558\uc5ec \uc2a4\ub808\ub4dc \uc778\ub371\uc2a4\uc640 \uc2a4\ub808\ub4dc \uac1c\uc218, \uc2a4\ub808\ub4dc \ube14\ub85d \uc778\ub371\uc2a4, \uc2a4\ub808\ub4dc \ube14\ub85d \uac1c\uc218 \uc815\ubcf4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 kernel \ub0b4\ubd80\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubcc0\uc218\ub4e4\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. threadIdx.x : \uc2a4\ub808\ub4dc \ube14\ub85d \ub0b4\ubd80\uc5d0\uc11c \ud604\uc7ac\uc758 \uc2a4\ub808\ub4dc\uc758 \uc778\ub371\uc2a4 blockDim.x : \uc2a4\ub808\ub4dc \ube14\ub85d \ub0b4\ubd80\uc758 \uc2a4\ub808\ub4dc \uac1c\uc218 blockIdx.x : \uc2a4\ub808\ub4dc \ube14\ub85d \uc778\ub371\uc2a4 gridDim.x : \uc2a4\ub808\ub4dc \ube14\ub85d\uc758 \uac1c\uc218","title":"kernel \uc2e4\ud589"},{"location":"dev/GPU/cuda/#cuda_2","text":"nvprof \ub85c CUDA \ud504\ub85c\uadf8\ub7a8\uc758 \uc2e4\ud589\uacb0\uacfc\ub97c \uc790\uc138\ud788 \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"CUDA \ud504\ub85c\uadf8\ub7a8 \ubd84\uc11d"},{"location":"dev/Git/git/","text":"Git \u00b6 \ucf54\ub529\uc744 \ub9c9 \ubc30\uc6b0\uae30 \uc2dc\uc791\ud558\uba74 \uc885\uc885 \uce74\ud1a1\uc774\ub098 \uba54\uc77c\uc5d0 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubc31\uc5c5 \ud558\uace4 \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ubc29\uc2dd\uc5d0\ub294 \uba87 \uac00\uc9c0 \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uba3c\uc800 \uc18c\uc2a4\ucf54\ub4dc\uc758 \uc800\uc7a5\uc7a5\uc18c\uac00 \ub9e4\uc6b0 \uc0b0\ubc1c\uc801\uc774\uace0 \uc77c\uad00\uc131\uc774 \uc5c6\uc5b4\uc11c \ub9e4\ubc88 \ucc3e\uae30\uac00 \ud798\ub4ed\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc18c\uc2a4\ucf54\ub4dc\uc758 \ubcc0\ud654\uacfc\uc815\uc744 \uc81c\ub300\ub85c \uc774\ud574\ud558\uae30 \ud798\ub4ed\ub2c8\ub2e4. \ub9cc\uc57d \ubc31\uc5c5\ud558\ub294 \uac83\ub3c4 \uc78a\uc5b4\ubc84\ub9ac\uace0 \ubc31\uc5c5\uc744 \ud558\uc9c0 \uc54a\uc558\ub2e4\uac00 \uc2e4\uc218\ub85c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc0ad\uc81c\ud574\ubc84\ub9b0\ub2e4\uba74 \ubcf5\uad6c\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc804\ud600 \uc5c6\uc2b5\ub2c8\ub2e4. Danger \uc774\ub7f0 \ubb38\uc81c\ub294 \uaddc\ubaa8\uac00 \ud070 \ub2e8\uccb4 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ub354 \uc2ec\uac01\ud574\uc9d1\ub2c8\ub2e4. \ub204\uac00 \ubb34\uc5c7\uc744 \uace0\ucce4\ub294\uc9c0, \uc18c\uc2a4\ucf54\ub4dc \uc800\uc7a5\uc18c\uac00 \uc5b4\ub514\uc5d0 \uc788\ub294\uc9c0, \ub9cc\uc57d \ub204\uac00 \uc2e4\uc218\ub85c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc9c0\uc6cc\ubc84\ub838\uc744 \ub54c \ubcf5\uad6c\ub97c \ud560 \uc218 \uc5c6\uc744 \ub54c \uae30\uc5c5\uc740 \uc2e4\uc9c8\uc801\uc778 \uae08\uc804\uc801\uc778 \ud53c\ud574\ub97c \ubc1b\uac8c \ub429\ub2c8\ub2e4. \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \ub098\uc628 \uac83\uc774 \ubc84\uc804 \ucee8\ud2b8\ub864 \uc2dc\uc2a4\ud15c(Version Control System) \uc785\ub2c8\ub2e4. \uc904\uc5ec\uc11c VCS \ub294 \ub2e8\uc5b4 \uadf8\ub300\ub85c \"\ud504\ub85c\uc81d\ud2b8\uc758 \ubc84\uc804\uc744 \uc190\uc27d\uac8c \ub2e4\ub8f0 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \uc2dc\uc2a4\ud15c\" \uc785\ub2c8\ub2e4. VCS \uc5d0\ub294 \uc5ec\ub7ec \uc885\ub958\uac00 \uc788\uc9c0\ub9cc \uc774\uc81c \uc6b0\ub9ac\ub294 \uadf8 \uc911\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 VCS \uac00 Git \uc785\ub2c8\ub2e4. WICWIU \ub3c4 Git \uc744 \uc0ac\uc6a9\ud558\uc5ec \uad00\ub9ac\ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 WICWIU \uac1c\ubc1c\uc5d0 \ucc38\uc5ec\ud558\uae30 \uc704\ud574\uc11c\ub294 Git \uc744 \uc798 \uc774\ud574\ud574\uc57c \ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 Git \uc73c\ub85c \ud611\uc5c5\ud558\uba70 WICWIU \ub97c \uac1c\ubc1c\ud558\ub294 \ubc95\uc744 \uac00\ubccd\uac8c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc7a0\uae50!! Git \uc5d0 \ub300\ud55c \uae30\ucd08\uac00 \uc5c6\uc73c\uc2e0\ubd84\ub4e4\uc740 \uba3c\uc800 \uc774\uacf3 \uc744 \ud1b5\ud558\uc5ec( \ucd94\ucc9c ), \ub610\ub294 \ub2e4\ub978 Git \ud559\uc2b5 \uc790\ub8cc\ub97c \ud1b5\ud558\uc5ec Git \uc774 \ud30c\uc77c\uc744 \uad00\ub9ac\ud558\ub294 4 \uac00\uc9c0 \uc0c1\ud0dc( untracked \uc0c1\ud0dc, modified \uc0c1\ud0dc, staged \uc0c1\ud0dc, committed \uc0c1\ud0dc ) Github \uc73c\ub85c Git \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac\ud558\ub294 \ubc29\ubc95 .gitignore \ud30c\uc77c \uad00\ub9ac\ud558\uae30 Git Branching \uacfc \ucda9\ub3cc\ud574\uacb0\ud558\uae30 Pull Requests \ud558\uae30 \ub97c \uba3c\uc800 \uc774\ud574\ud558\uace0 \uc624\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4. Git \uacfc Github \ub85c WICWIU \ud611\uc5c5\ud558\uae30 \u00b6 Git \uacfc Github \ub85c WICWIU \ub97c \ud611\uc5c5\ud558\ub294 \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub85c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 RNN \uc744 \ub9cc\ub4e4\uae30 \uc704\ud558\uc5ec RNN \ube0c\ub79c\uce58\uc5d0\uc11c \uac1c\ubc1c\uc744 \ud55c\ub2e4\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. WICWIU \ub97c fork \ud55c\ub2e4. fork \ud55c \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ub525\ub7ec\ub2dd \ud559\uc2b5 \ud658\uacbd\uc5d0 clone \ud55c\ub2e4. RNN \ube0c\ub79c\uce58\ub97c \ub9cc\ub4e4\uace0 \uac1c\ubc1c\uc744 \ud55c \ud6c4 \ud14c\uc2a4\ud2b8\uac00 \ub05d\ub098\uba74 commit \ud558\uace0 \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c push \ud55c\ub2e4. WICWIU \ub85c Pull Requests \ub97c \ud55c\ub2e4.","title":"Collaborate with Git"},{"location":"dev/Git/git/#git","text":"\ucf54\ub529\uc744 \ub9c9 \ubc30\uc6b0\uae30 \uc2dc\uc791\ud558\uba74 \uc885\uc885 \uce74\ud1a1\uc774\ub098 \uba54\uc77c\uc5d0 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubc31\uc5c5 \ud558\uace4 \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ubc29\uc2dd\uc5d0\ub294 \uba87 \uac00\uc9c0 \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uba3c\uc800 \uc18c\uc2a4\ucf54\ub4dc\uc758 \uc800\uc7a5\uc7a5\uc18c\uac00 \ub9e4\uc6b0 \uc0b0\ubc1c\uc801\uc774\uace0 \uc77c\uad00\uc131\uc774 \uc5c6\uc5b4\uc11c \ub9e4\ubc88 \ucc3e\uae30\uac00 \ud798\ub4ed\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc18c\uc2a4\ucf54\ub4dc\uc758 \ubcc0\ud654\uacfc\uc815\uc744 \uc81c\ub300\ub85c \uc774\ud574\ud558\uae30 \ud798\ub4ed\ub2c8\ub2e4. \ub9cc\uc57d \ubc31\uc5c5\ud558\ub294 \uac83\ub3c4 \uc78a\uc5b4\ubc84\ub9ac\uace0 \ubc31\uc5c5\uc744 \ud558\uc9c0 \uc54a\uc558\ub2e4\uac00 \uc2e4\uc218\ub85c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc0ad\uc81c\ud574\ubc84\ub9b0\ub2e4\uba74 \ubcf5\uad6c\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc804\ud600 \uc5c6\uc2b5\ub2c8\ub2e4. Danger \uc774\ub7f0 \ubb38\uc81c\ub294 \uaddc\ubaa8\uac00 \ud070 \ub2e8\uccb4 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ub354 \uc2ec\uac01\ud574\uc9d1\ub2c8\ub2e4. \ub204\uac00 \ubb34\uc5c7\uc744 \uace0\ucce4\ub294\uc9c0, \uc18c\uc2a4\ucf54\ub4dc \uc800\uc7a5\uc18c\uac00 \uc5b4\ub514\uc5d0 \uc788\ub294\uc9c0, \ub9cc\uc57d \ub204\uac00 \uc2e4\uc218\ub85c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc9c0\uc6cc\ubc84\ub838\uc744 \ub54c \ubcf5\uad6c\ub97c \ud560 \uc218 \uc5c6\uc744 \ub54c \uae30\uc5c5\uc740 \uc2e4\uc9c8\uc801\uc778 \uae08\uc804\uc801\uc778 \ud53c\ud574\ub97c \ubc1b\uac8c \ub429\ub2c8\ub2e4. \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \ub098\uc628 \uac83\uc774 \ubc84\uc804 \ucee8\ud2b8\ub864 \uc2dc\uc2a4\ud15c(Version Control System) \uc785\ub2c8\ub2e4. \uc904\uc5ec\uc11c VCS \ub294 \ub2e8\uc5b4 \uadf8\ub300\ub85c \"\ud504\ub85c\uc81d\ud2b8\uc758 \ubc84\uc804\uc744 \uc190\uc27d\uac8c \ub2e4\ub8f0 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \uc2dc\uc2a4\ud15c\" \uc785\ub2c8\ub2e4. VCS \uc5d0\ub294 \uc5ec\ub7ec \uc885\ub958\uac00 \uc788\uc9c0\ub9cc \uc774\uc81c \uc6b0\ub9ac\ub294 \uadf8 \uc911\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 VCS \uac00 Git \uc785\ub2c8\ub2e4. WICWIU \ub3c4 Git \uc744 \uc0ac\uc6a9\ud558\uc5ec \uad00\ub9ac\ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 WICWIU \uac1c\ubc1c\uc5d0 \ucc38\uc5ec\ud558\uae30 \uc704\ud574\uc11c\ub294 Git \uc744 \uc798 \uc774\ud574\ud574\uc57c \ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 Git \uc73c\ub85c \ud611\uc5c5\ud558\uba70 WICWIU \ub97c \uac1c\ubc1c\ud558\ub294 \ubc95\uc744 \uac00\ubccd\uac8c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc7a0\uae50!! Git \uc5d0 \ub300\ud55c \uae30\ucd08\uac00 \uc5c6\uc73c\uc2e0\ubd84\ub4e4\uc740 \uba3c\uc800 \uc774\uacf3 \uc744 \ud1b5\ud558\uc5ec( \ucd94\ucc9c ), \ub610\ub294 \ub2e4\ub978 Git \ud559\uc2b5 \uc790\ub8cc\ub97c \ud1b5\ud558\uc5ec Git \uc774 \ud30c\uc77c\uc744 \uad00\ub9ac\ud558\ub294 4 \uac00\uc9c0 \uc0c1\ud0dc( untracked \uc0c1\ud0dc, modified \uc0c1\ud0dc, staged \uc0c1\ud0dc, committed \uc0c1\ud0dc ) Github \uc73c\ub85c Git \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac\ud558\ub294 \ubc29\ubc95 .gitignore \ud30c\uc77c \uad00\ub9ac\ud558\uae30 Git Branching \uacfc \ucda9\ub3cc\ud574\uacb0\ud558\uae30 Pull Requests \ud558\uae30 \ub97c \uba3c\uc800 \uc774\ud574\ud558\uace0 \uc624\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4.","title":"Git"},{"location":"dev/Git/git/#git-github-wicwiu","text":"Git \uacfc Github \ub85c WICWIU \ub97c \ud611\uc5c5\ud558\ub294 \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub85c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 RNN \uc744 \ub9cc\ub4e4\uae30 \uc704\ud558\uc5ec RNN \ube0c\ub79c\uce58\uc5d0\uc11c \uac1c\ubc1c\uc744 \ud55c\ub2e4\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. WICWIU \ub97c fork \ud55c\ub2e4. fork \ud55c \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ub525\ub7ec\ub2dd \ud559\uc2b5 \ud658\uacbd\uc5d0 clone \ud55c\ub2e4. RNN \ube0c\ub79c\uce58\ub97c \ub9cc\ub4e4\uace0 \uac1c\ubc1c\uc744 \ud55c \ud6c4 \ud14c\uc2a4\ud2b8\uac00 \ub05d\ub098\uba74 commit \ud558\uace0 \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c push \ud55c\ub2e4. WICWIU \ub85c Pull Requests \ub97c \ud55c\ub2e4.","title":"Git \uacfc Github \ub85c WICWIU \ud611\uc5c5\ud558\uae30"},{"location":"dev/Git/message/","text":"Commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9 \uaddc\uce59 \u00b6 commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \uc815\ud560 \ub54c \uc77c\uad00\ub41c \uaddc\uce59\uc744 \uc0ac\uc6a9\ud574\uc57c \ud611\uc5c5\ud560 \ub54c \uc88b\uc2b5\ub2c8\ub2e4. WICWIU \ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uaddc\uce59\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. Branch: Update {UPDATED-FILE-NAMEs} (DESCRIPTION) \uc774 \uaddc\uce59\uc73c\ub85c \uc5b4\ub5bb\uac8c commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \uc815\ud560 \uc218 \uc788\ub294\uc9c0 \uc608\uc2dc\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Example RNN \ube0c\ub79c\uce58\uc5d0\uc11c src/RNN.cpp \uc5d0 main() \ud568\uc218\ub97c \ub9cc\ub4e4\uc5c8\ub2e4\uba74 RNN: Update src/RNN.cpp (create main function) \ub610\ub294 RNN: Update src/RNN.cpp (main \ud568\uc218 \uc0dd\uc131) \uc774\ub77c\ub294 commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \ub9cc\ub4e4\uba74 \ub429\ub2c8\ub2e4. \uc774\ub54c \uc124\uba85( DESCRIPTION ) \uc740 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc774 \uc774\ud574\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uc790\uc138\ud558\uace0 \uba85\ub8cc\ud560\uc218\ub85d \uc88b\uc2b5\ub2c8\ub2e4.","title":"Commit/PR protocol"},{"location":"dev/Git/message/#commit-pull-requests","text":"commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \uc815\ud560 \ub54c \uc77c\uad00\ub41c \uaddc\uce59\uc744 \uc0ac\uc6a9\ud574\uc57c \ud611\uc5c5\ud560 \ub54c \uc88b\uc2b5\ub2c8\ub2e4. WICWIU \ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uaddc\uce59\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. Branch: Update {UPDATED-FILE-NAMEs} (DESCRIPTION) \uc774 \uaddc\uce59\uc73c\ub85c \uc5b4\ub5bb\uac8c commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \uc815\ud560 \uc218 \uc788\ub294\uc9c0 \uc608\uc2dc\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Example RNN \ube0c\ub79c\uce58\uc5d0\uc11c src/RNN.cpp \uc5d0 main() \ud568\uc218\ub97c \ub9cc\ub4e4\uc5c8\ub2e4\uba74 RNN: Update src/RNN.cpp (create main function) \ub610\ub294 RNN: Update src/RNN.cpp (main \ud568\uc218 \uc0dd\uc131) \uc774\ub77c\ub294 commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \ub9cc\ub4e4\uba74 \ub429\ub2c8\ub2e4. \uc774\ub54c \uc124\uba85( DESCRIPTION ) \uc740 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc774 \uc774\ud574\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uc790\uc138\ud558\uace0 \uba85\ub8cc\ud560\uc218\ub85d \uc88b\uc2b5\ub2c8\ub2e4.","title":"Commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9 \uaddc\uce59"},{"location":"dev/Git/update/","text":"fork \ud55c \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc5c5\ub370\uc774\ud2b8\ud558\uae30 \u00b6 WICWIU \ub97c \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c fork \ud574\uc654\ub294\ub370 \ud568\uaed8 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc758 Pull Requests \uac00 WICWIU \ub85c \ubcd1\ud569\ub418\uba74 \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc5c5\ub370\uc774\ud2b8\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. RNN \ube0c\ub79c\uce58\uc5d0\uc11c \uc791\uc5c5\uc744 \ud558\ub2e4\uac00 \uac19\uc774 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc758 Pull Requests \uac00 \uc6d0\ubcf8 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc758 RNN \ube0c\ub79c\uce58\ub85c merge \ub418\uc5c8\ub2e4\uace0 \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc5c5\ub370\uc774\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Note fork \ud55c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc774\uae30 \ub54c\ubb38\uc5d0 origin \uc774 https://github.com/WICWIU/WICWIU \uac00 \uc544\ub2c8\ub77c https://github.com/{USER_NAME}/WICWIU \uc73c\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc6d0\ubcf8 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c upstream \uc774\ub77c\ub294 remote \ub85c \ub4f1\ub85d\ud55c\ub2e4. EXECUTE: git remote add upstream https://github.com/WICWIU/WICWIU upstream (\uc6d0\ubcf8 WICWIU ) \uc73c\ub85c\ubd80\ud130 \uc5c5\ub370\uc774\ud2b8\ub41c \ub370\uc774\ud130\ub4e4\uc744 fetch \ud574\uc628\ub2e4. EXECUTE: git fetch upstream RNN \ube0c\ub79c\uce58\ub97c \uc5c5\ub370\uc774\ud2b8 \ud560 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 RNN \ube0c\ub79c\uce58\ub85c \uc774\ub3d9\ud55c\ub2e4. EXECUTE: git checkout RNN upstream (\uc6d0\ubcf8 WICWIU ) \uc73c\ub85c\ubd80\ud130 RNN \ube0c\ub79c\uce58\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. EXECUTE: git merge upstream/RNN Warning fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc218\uc815\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 Git \uc740 fast-forward \ub97c \uc9c4\ud589\ud558\uc9c0\ub9cc \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc218\uc815\ud588\ub2e4\uba74 merge conflict \uac00 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ubcd1\ud569 \ucda9\ub3cc \ud574\uacb0\ubc95\uc740 \uc774\uacf3 \uc744 \ucc38\uace0\ud558\uac70\ub098 \ub2e4\ub978 Git \ud559\uc2b5 \uc790\ub8cc\ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694. \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c push \ud55c\ub2e4. EXECUTE: git push origin RNN","title":"Update forked repo"},{"location":"dev/Git/update/#fork","text":"WICWIU \ub97c \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c fork \ud574\uc654\ub294\ub370 \ud568\uaed8 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc758 Pull Requests \uac00 WICWIU \ub85c \ubcd1\ud569\ub418\uba74 \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc5c5\ub370\uc774\ud2b8\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. RNN \ube0c\ub79c\uce58\uc5d0\uc11c \uc791\uc5c5\uc744 \ud558\ub2e4\uac00 \uac19\uc774 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc758 Pull Requests \uac00 \uc6d0\ubcf8 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc758 RNN \ube0c\ub79c\uce58\ub85c merge \ub418\uc5c8\ub2e4\uace0 \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc5c5\ub370\uc774\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Note fork \ud55c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc774\uae30 \ub54c\ubb38\uc5d0 origin \uc774 https://github.com/WICWIU/WICWIU \uac00 \uc544\ub2c8\ub77c https://github.com/{USER_NAME}/WICWIU \uc73c\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc6d0\ubcf8 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c upstream \uc774\ub77c\ub294 remote \ub85c \ub4f1\ub85d\ud55c\ub2e4. EXECUTE: git remote add upstream https://github.com/WICWIU/WICWIU upstream (\uc6d0\ubcf8 WICWIU ) \uc73c\ub85c\ubd80\ud130 \uc5c5\ub370\uc774\ud2b8\ub41c \ub370\uc774\ud130\ub4e4\uc744 fetch \ud574\uc628\ub2e4. EXECUTE: git fetch upstream RNN \ube0c\ub79c\uce58\ub97c \uc5c5\ub370\uc774\ud2b8 \ud560 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 RNN \ube0c\ub79c\uce58\ub85c \uc774\ub3d9\ud55c\ub2e4. EXECUTE: git checkout RNN upstream (\uc6d0\ubcf8 WICWIU ) \uc73c\ub85c\ubd80\ud130 RNN \ube0c\ub79c\uce58\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. EXECUTE: git merge upstream/RNN Warning fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc218\uc815\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 Git \uc740 fast-forward \ub97c \uc9c4\ud589\ud558\uc9c0\ub9cc \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc218\uc815\ud588\ub2e4\uba74 merge conflict \uac00 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ubcd1\ud569 \ucda9\ub3cc \ud574\uacb0\ubc95\uc740 \uc774\uacf3 \uc744 \ucc38\uace0\ud558\uac70\ub098 \ub2e4\ub978 Git \ud559\uc2b5 \uc790\ub8cc\ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694. \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c push \ud55c\ub2e4. EXECUTE: git push origin RNN","title":"fork \ud55c \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc5c5\ub370\uc774\ud2b8\ud558\uae30"},{"location":"dev/cli/cli/","text":"WICWIU \ub294 \uc544\uc9c1 Linux \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc2e4\ud589\ub418\ub3c4\ub85d \uac1c\ubc1c\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 WICWIU \ub97c Linux \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uac1c\ubc1c\ud558\uba74\uc11c \ub514\ubc84\uae45\uc744 \ud574\uc57c \ud569\ub2c8\ub2e4. \ubcf4\ud1b5 \uc790\uc2e0\uc758 \ucef4\ud4e8\ud130\uac00 Linux \uac00 \uc544\ub2d0 \ubfd0\ub354\ub7ec \uac15\ub825\ud55c GPU \ud658\uacbd\ub3c4 \uad6c\ucd95\ub418\uc5b4 \uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uae30\uacc4\ud559\uc2b5 \uc804\uc6a9 \uc11c\ubc84\uc5d0\uc11c WICWIU \ub97c \uac1c\ubc1c\ud558\uace0 \ub514\ubc84\uae45\uc744 \ud558\uac8c \ub429\ub2c8\ub2e4. \uc774\ub54c \ud544\uc694\ud55c \uac83\uc774 \ud6a8\uacfc\uc801\uc778 CLI(Command Line Interface) \ud504\ub85c\uadf8\ub7a8\ub4e4\uc785\ub2c8\ub2e4. \uae30\uc874\uc5d0 \uc0ac\uc6a9\ud558\ub358 bash \uc258, ls \uba85\ub839\uc5b4, cat \uba85\ub839\uc5b4, find \uba85\ub839\uc5b4, top \uba85\ub839\uc5b4, man \uba85\ub839\uc5b4, python \uba85\ub839\uc5b4 \ub4f1\uc740 \uc0ac\uc2e4 \ub108\ubb34 \uc624\ub798\uc804\uc5d0 \uc81c\uc791\ub41c \ud504\ub85c\uadf8\ub7a8\ub4e4\uc774\ub77c \uc0ac\uc6a9\ud558\uae30\uc5d0 \ub9e4\uc6b0 \ubd88\ud3b8\ud569\ub2c8\ub2e4. \uc774\uac83\ub4e4\uc744 \uc0c8\ub85c\uc6b4 CLI \ud504\ub85c\uadf8\ub7a8\ub4e4\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc\ud558\uc5ec \uc0ac\uc6a9\ud558\uae30 \ub9e4\uc6b0 \ud3b8\ud558\uac8c \ubc14\uafb8\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Note \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 \uc81c\uac00 \uace0\uc2a4\ud2b8 \uc2e0\uc785\uc744 \uac00\ub974\uce58\uae30 \uc704\ud574 \uc81c\uc791\ud55c \ud29c\ud1a0\ub9ac\uc5bc \uc744 WICWIU \uac1c\ubc1c\uc790\ub4e4\uc5d0\uac8c \uc801\ud569\ud558\ub3c4\ub85d \ud3b8\uc9d1\ud558\uc5ec \uc7ac\uc791\uc131\ud55c \uac83\uc785\ub2c8\ub2e4. \ud2b9\ud788 nvtop \uc740 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0\ub294 \uc5c6\uc9c0\ub9cc WICWIU \uac1c\ubc1c\uc790\uc5d0\uac8c\ub294 \ud544\uc694\ud558\uae30\uc5d0 \uc0c8\ub86d\uac8c \ucd94\uac00\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \ub0b4\uc6a9\uc758 CLI \ud504\ub85c\uadf8\ub7a8 \uc124\uce58\ubc95\uc740 \uc6d0\ubcf8 \ud29c\ud1a0\ub9ac\uc5bc \uc744 \ucc38\uace0\ud574\uc8fc\uc138\uc694. \uc5ec\uae30\uc5d0\uc11c\ub294 CLI \uc720\ud2f8\ub9ac\ud2f0\ub97c \uc5c5\uadf8\ub808\uc774\ub4dc\ud558\uba74 \uc5b4\ub5bb\uac8c \uc0dd\uc0b0\uc131\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0 \ube44\uad50\ub9cc \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. alias \u00b6 \uba3c\uc800 \ub2e4\uc74c\uacfc \uac19\uc774 alias \ub97c \uc9c0\uc815\ud558\uba74 \uba85\ub839\uc5b4 \uc785\ub825 \uc2dc\uac04\uc744 \ud68d\uae30\uc801\uc73c\ub85c \uc904\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. alias command t tmux v vim c clear cs cd .. ls lsd --icon never cl clear;ls l ls la ls -a ll ls -la lt ls --tree g git q exit Info alias t=tmux \uba85\ub839\uc5b4\ub85c alias \ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc744 \ub9e4\ubc88 \ub85c\uadf8\uc778\ud560 \ub54c\ub9c8\ub2e4 \uc785\ub825\ud558\uae30 \uadc0\ucc2e\uae30 \ub54c\ubb38\uc5d0 zsh \uc258 \uc0ac\uc6a9 \uc720\uc800\ub77c\uba74 .zshrc \ub610\ub294 .zsh_aliases \uc5d0 alias t = tmux alias v = vim alias c = clear alias cs = 'cd ..' alias ls = 'lsd --icon never' alias cl = 'clear;ls' alias l = 'ls' alias la = 'ls -a' alias ll = 'ls -la' alias lt = 'ls --tree' alias g = 'git' alias q = 'exix' \uc744 \uc785\ub825\ud574\ub450\uba74 \ub429\ub2c8\ub2e4. bash \uc258 \uc0ac\uc6a9 \uc720\uc800\ub77c\uba74 .bashrc \ub610\ub294 .bash_aliases \uc5d0 \uc785\ub825\ud558\uba74 \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \ub354 \ube68\ub77c\uc9c4 git \u00b6 git \uc740 \uc9c0\uc6d0\ud558\ub294 \uc9c0\ub2a5\uc774 \ud558\ub3c4 \ub9ce\ub2e4\ubcf4\ub2c8 \ub0b4\ubd80\uc801\uc73c\ub85c alias \ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uac00\ub839 git commit -m \uc774\ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ub9e4\ubc88 \uc785\ub825\ud558\uae30\uac00 \ub108\ubb34 \uadc0\ucc2e\uc544\uc11c \uacac\ub51c \uc218\uac00 \uc5c6\uc73c\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uc5ec alias \ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ g config --global alias.cm \"commit -m\" Info alias \uc5d0\uc11c alias g=git \uc73c\ub85c git \uc758 \uc5d0\uc77c\ub9ac\uc5b4\uc2a4 g \ub97c \uc124\uc815\ud588\uc5c8\uae30 \ub54c\ubb38\uc5d0 git \uc774 \uc544\ub2cc g \ub9cc \uc785\ub825\ud574\ub3c4 \ub429\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc774\uc81c\ubd80\ud130 \uc6b0\ub9ac\ub294 git commit -m \uc774 \uc544\ub2c8\ub77c g cm \ub9cc \uc785\ub825\ud574\ub3c4 \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \uc800\uc758 dotfiles \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc758 .tmux.conf \uc5d0\ub294 \uc774\ub7f0 git \uc758 alias \ub4e4\uc774 \uc774\ubbf8 \uc124\uc815\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc744 ~/.gitconfig \uc5d0 \uc704\uce58\uc2dc\ud0a4\uae30\ub9cc \ud558\uba74 git alias \ub4e4\uc774 \ub2e8\ubc88\uc5d0 \uc124\uc815\ub429\ub2c8\ub2e4. git \uc758 alias \uac00 \ub9e4\uc6b0 \ub9ce\uc774 \uc124\uc815\ub418\uc5b4 \uc788\uc9c0\ub9cc \uadf8\uc911\uc5d0\uc11c \uc8fc\uc694\ud55c alias \ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. alias \uc6d0\ub798 \uba85\ub839\uc5b4 \uc644\uc131\ub41c \uba85\ub839\uc5b4 \uc758\ubbf8 i init g i git \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac\ub97c \uc2dc\uc791\ud558\ub3c4\ub85d \ud55c\ub2e4. s status g s \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc0c1\ud0dc\ub97c \ubcf8\ub2e4. sb status -s -b g sb \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc0c1\ud0dc\ub97c \uac04\ub7b5\ud558\uac8c \ubcf8\ub2e4. cm commit -m g cm \"<MESSAGE>\" \ucee4\ubc0b\uc744 \ud55c\ub2e4. a add --all g a \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c \ud30c\uc77c\uc744 \uc2a4\ud14c\uc774\uc9d5 \ud55c\ub2e4. l log --oneline g l git \uc758 \ucee4\ubc0b \uae30\ub85d\uc744 \ud55c\uc904\uc529 \ucd9c\ub825\ud55c\ub2e4. lg log --oneline --graph --decorate g lg git \uc758 \ucee4\ubc0b \uae30\ub85d\uc744 \uadf8\ub798\ud504\ub85c \ucd9c\ub825\ud55c\ub2e4. rao remote add origin g rao <REMOTE> \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ucd94\uac00\ud55c\ub2e4. cl clone g cl <URL> \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ubcf5\uc81c\ud574 \uc628\ub2e4. psom push origin master g psom \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c \ud478\uc26c\ud55c\ub2e4. plom pull origin master g plom \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uac00\uc838\uc628\ub2e4. b branch g b <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0dd\uc131\ud55c\ub2e4. bd branch -d g bd <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0ad\uc81c\ud55c\ub2e4. m merge g m \uc791\uc5c5\uc774 \uc644\ub8cc\ub41c \ube0c\ub79c\uce58\ub97c \ubcd1\ud569\ud55c\ub2e4. o checkout g o <BRANCH> \ube0c\ub79c\uce58\ub85c \uc774\ub3d9\ud55c\ub2e4. ob checkout -b g ob <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0dd\uc131\ud568\uacfc \ub3d9\uc2dc\uc5d0 \uc774\ub3d9\ud55c\ub2e4. \uc774\ub85c\uc368 git \uc73c\ub85c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uad00\ub9ac\ud558\ub294 \ub808\ud37c\ud1a0\ub9ac\uc778 \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub4e4\uc744 \ud68d\uae30\uc801\uc73c\ub85c \ub2e8\ucd95\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ mkdir git-test $ cd git-test $ git init $ touch test.txt $ git status $ git add test.txt $ git status $ git commit -m \"my first commit\" $ git status $ echo \"My test memo\" > test.txt $ cat test.txt My test memo $ git add . $ git commit -m \"My memo file\" $ git log $ git remote add origin https://github.com/<USER>/git-test $ git push -u origin master $ cd $ git clone https://github.com/<USER>/git-test git-test-remote $ cd git-test-remote $ echo \"very important message\" > test.txt $ git add . $ git commit -m \"very important file..\" $ git push origin master $ cd ~/git-test $ cat test.txt $ git pull origin master $ cat test.txt \uc704\uc640 \uac19\uc740 \uba85\ub839\uc5b4\ub97c alias \ub85c \ub2e8\ucd95\ud574\uc11c \ub2e4\uc2dc \uc785\ub825\ud574\ubcf4 \uba85\ub839\uc5b4\uac00 \uc815\ub9d0 \ube60\ub974\uac8c \uc785\ub825\ub429\ub2c8\ub2e4. $ cd $ mkdir alias-test $ cd alias-test $ g i $ touch test.txt $ g s $ g a $ g s $ g cm \"init\" $ g s $ echo \"My test memo\" > test.txt $ bat test.txt $ g a $ g cm \"memo\" $ g l $ g rao https://github.com/<USER>/alias-test $ g psom $ cd $ g cl https://github.com/<USER>/alias-test alias-test-remote $ cd alias-test-remote $ echo \"message\" > test.txt $ g a $ g cm \"important file\" $ g psom $ cd ~/alias-test $ bat test.txt $ g plom $ bat test.txt \uc774\ub85c\uc368 \ub2e4\uc74c\uacfc \uac19\uc774 213 \ud0c0\ub97c \uccd0\uc57c \ud588\ub358 \uac83\uc744 79 \ud0c0\ub9cc \uce60 \uc218 \uc788\ub3c4\ub85d \ub300\ud3ed \uc808\uc57d\uc744 \ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc6d0\ub798 \uba85\ub839\uc5b4 alias \uba85\ub839\uc5b4 git init g i git status g s git add g a git status g s git commit -m g cm git status g s git add . g a git commit -m g cm git log g l git remote add g rao git push -u origin master g psom git clone g cl git add . g a git commit g cm git push origin master g psom git pull origin master g plom \ucd1d\ud569 213 \uac1c \ucd1d\ud569 79 \uac1c Tip \uc774\ub7ec\ud55c git \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac \ud328\ud134\uc740 \ucf54\ub529\uc744 \ud560 \ub54c\ub9c8\ub2e4 \ubc18\ubcf5\ub418\ub294\ub370, \uc774 \ud328\ud134\uc744 \uac1c\ubc1c\uc790\ub85c \uc0b4\uc544\uac00\uba74\uc11c \uc801\uac8c \uc7a1\uc544\uc11c 10000 \ubc88 \ubc18\ubcf5\ud55c\ub2e4\uace0 \ud55c\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc740 10000 * 213 = 2\ubc31 13\ub9cc \ubc88 \uce60 \uac83\uc744 10000 * 79 = 79\ub9cc \ub9cc\ucce4\uc2b5\ub2c8\ub2e4. \uc989, \ub611\uac19\uc740 \uc77c\uc744 \ud558\ub294\ub370 134\ub9cc \ubc88\uc758 \ud0c0\uc790\ub97c \uc548 \uce5c\uac83\uc785\ub2c8\ub2e4! CLI \uc5c5\uadf8\ub808\uc774\ub4dc \u00b6 ls \u279c lsd \u00b6 lsd \ub294 \uad6c\uc2dd\uc778 ls \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. ls \uc640 lsd \ub97c \ube44\uad50\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. lsd \ub294 \uceec\ub7ec\ud480\ud558\uac8c \ucd9c\ub825\uacb0\uacfc\ub97c \ubcf4\uc5ec\uc918\uc11c \uac00\ub3c5\uc131\uc774 \ud6e8\uc52c \uc62c\ub824\uc90d\ub2c8\ub2e4. Info lsd --icon never \uc5d0\uc11c --icon never \uc635\uc158\uc740 \uc544\uc774\ucf58\uc744 \ucd9c\ub825\ud558\uc9c0 \uc54a\ub294 \uc635\uc158\uc785\ub2c8\ub2e4. \uc774\ub294 \uc21c\uc218 CLI \ud658\uacbd\uc5d0\uc11c \ud544\uc694\ud55c \uc635\uc158\uc774\uae30 \ub54c\ubb38\uc5d0 \ub9cc\uc57d GUI \ud658\uacbd( macOS \uc774\ub098 \ub9ac\ub205\uc2a4 \ub370\uc2a4\ud06c\ud0d1 \ud658\uacbd)\uc5d0\uc11c \uc544\uc774\ucf58\uc744 \uc124\uce58\ud558\uace0 --icon never \uc635\uc158\uc744 \uc81c\uac70\ud558\uace0 lsd \ub97c \uc2e4\ud589\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc544\uc774\ucf58\ub3c4 \ud568\uaed8 \ucd9c\ub825\ub418\uc5b4 \uac00\ub3c5\uc131\uc774 \ud6e8\uc52c \uc62c\ub77c\uac00\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. cat \u279c bat \u00b6 bat \ub294 \uad6c\uc2dd\uc778 cat \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uadf8\ub7fc cat \uc640 bat \ub97c \ube44\uad50\ud574\ubd05\uc2dc\ub2e4. cat \uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc0b\ubc0b\ud558\uac8c \ucd9c\ub825\ub418\ub294 \ubc18\uba74, bat \uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \uceec\ub7ec\ud480\ud558\uac8c \ucd9c\ub825\ub429\ub2c8\ub2e4. Tip bat \uc740 more \uc774\ub098 less \ucc98\ub7fc e \uc640 y \ub97c \ub204\ub974\uba74 \uc704\uc544\ub798\ub85c \uc6c0\uc9c1\uc77c \uc218 \uc788\uace0 Spacebar \uc640 u \ub97c \ub204\ub974\uba74 \ud398\uc774\uc9c0 \ub2e8\uc704\ub85c \uc704\uc544\ub798\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\uc73c\uba70 vim \ucc98\ub7fc / \ub85c \ud2b9\uc815 \ubb38\uc790\uc5f4\uc744 \uac80\uc0c9\ud560 \uc218 \uc788\uace0 q \ub85c \uc885\ub8cc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. find \u279c fd \u00b6 fd \ub294 \uad6c\uc2dd\uc778 find \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. fd \ub294 find \ubcf4\ub2e4 5\ubc30 \uc815\ub3c4 \ube60\ub974\uace0 \uc880 \ub354 \uc720\uc800\ub4e4\uc774 \uc0ac\uc6a9\ud558\uae30 \ud3b8\ud558\ub3c4\ub85d \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub300\ud3ed \uac1c\uc120\ub41c \ubaa8\ub358\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. fd \ub294 find \uc640 \uc0c1\uc138\ud558\uac8c \ube44\uad50\ud558\uae30\ubcf4\ub2e4 \ub2e4\uc74c\uc758 \uc0ac\uc6a9\uc608\ub97c \uac00\ubccd\uac8c \ud55c\ubc88 \uc0b4\ud3b4\ubcf4\ub294 \uac83\uc73c\ub85c \ub9c8\ubb34\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98 : https://github.com/sharkdp/fd fd \uc758 \uc0c1\uc138\ud55c \uc124\uba85\uc744 \uc54c\uace0 \uc2f6\ub2e4\uba74 \uacf5\uc2dd \ub808\ud3ec\uc9c0\ud1a0\ub9ac https://github.com/sharkdp/fd \ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694. top \u279c htop \u279c gotop \u00b6 top \uba85\ub839\uc5b4\ub294 \uc2dc\uc2a4\ud15c\uc758 \ub9ac\uc18c\uc2a4 \uc0c1\ud0dc(RAM, CPU \ub4f1) \uc744 \ucd9c\ub825\ud574\uc8fc\ub294 \uc88b\uc740 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uae30\uc874\uc758 top \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc57d\uac04\uc740 \ubc0b\ubc0b\ud558\uac8c \uc2dc\uc2a4\ud15c\uc758 \uc0c1\ud0dc\ub97c \ucd9c\ub825\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc htop \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc0c9\uae54\ub3c4 \uce60\ud558\uace0 \uba54\ubaa8\ub9ac\uc640 CPU \uc0c1\ud0dc\ub97c \ud578\ub4dc\ud3f0 \ubc30\ud130\ub9ac \ubc14\ucc98\ub7fc \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c gotop \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc644\ubcbd\ud55c \uadf8\ub798\ud504\ub85c \uc2dc\uc2a4\ud15c\uc758 \uc0c1\ud0dc\ub97c \uc9c1\uad00\uc801\uc73c\ub85c \ucd9c\ub825\ud574\uc90d\ub2c8\ub2e4. Note \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub97c \ucd9c\ub825\ud574\uc904 \uc218 \uc788\ub294 \uc720\ud2f8\ub9ac\ud2f0\ub294 \uac1c\uc778\uc801\uc778 \uc120\ud638\uc5d0 \ub530\ub77c \uc88b\uace0 \ub098\uc068\uc774 \uacb0\uc815\ub418\ubbc0\ub85c \ud655\uc2e4\ud788 \uc5b4\ub5a4 \uac8c \uc88b\ub2e4\ub77c\uace0 \ub9d0\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uadf8\ub0e5 \uac1c\uc778\uc801\uc73c\ub85c \ub354 \ub098\uc740 \uac83 \uac19\uc740 CLI \ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. \uc804 \uac1c\uc778\uc801\uc73c\ub85c gotop \uc774 \uc9c1\uad00\uc801\uc774\uace0 \uc88b\ub354\ub77c\uad6c\uc694. man \u279c tldr \u00b6 man \uc740 \uba85\ub839\uc5b4\uc758 \uc0ac\uc6a9\ubc95\uc744 \ucd9c\ub825\ud558\ub294 \ub9e4\uc6b0 \uc88b\uc740 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc man \uc758 \ud55c \uac00\uc9c0 \ub2e8\uc810\uc740 \uadf8 \uc0ac\uc6a9\ubc95\uc774 \ub108\ubb34 \ubc29\ub300\ud558\uace0 \uc7a5\ud669\ud558\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \ud504\ub85c\uadf8\ub7a8\uc758 \ud575\uc2ec \uc0ac\uc6a9\ubc95\uc744 \uc27d\uace0 \ube60\ub974\uac8c \uc54c\uace0 \uc2f6\uc740 \uc0ac\uc6a9\uc790\ub4e4\uc740 \uadf8 \ubc29\ub300\ud55c \uc0ac\uc6a9\ubc95\uc5d0\uc11c \uc790\uc2e0\uc774 \uc6d0\ud558\ub294 \ud575\uc2ec \uc0ac\uc6a9\ubc95\uc744 \uc774\ub9ac\uc800\ub9ac \ucc3e\uace0 \uc788\uc5b4\uc57c\ub9cc \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc tldr \uc740 man \ucc98\ub7fc \ubc29\ub300\ud55c \uc0ac\uc6a9\ubc95\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ub9e4\uc6b0 \uac04\ub2e8\ud55c \ud575\uc2ec \uc0ac\uc6a9\ubc95\ub9cc\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. tldr \uc740 \uc0ac\uc6a9\uc790\ub4e4\uc758 \uc8fc\ub3c4\ub85c \ub9cc\ub4e4\uc5b4\uc838\uc11c \uac1c\ubc1c\uc790\ub4e4\uc774 \uacbd\ud5d8\uc801\uc73c\ub85c \"\uc774\uac8c \uac00\uc7a5 \ud575\uc2ec\uc801\uc778 \uc0ac\uc6a9\ubc95\uc774\ub2e4!\" \ub77c\ub294 \uc0ac\uc6a9\ubc95\ub9cc \uac04\ub2e8\ud558\uac8c \ucd9c\ub825\ud569\ub2c8\ub2e4. man \uc73c\ub85c tar \uba85\ub839\uc5b4\uc758 \uc124\uba85\uc744 \ubcf4\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \ub429\ub2c8\ub2e4. $ man tar \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 tar \uc758 \ubaa8\ub4e0 \uc0ac\uc6a9\ubc95 \uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4. \uc774\ub7f0... \ud558\uc9c0\ub9cc man \uc73c\ub85c tar \ub97c \ubcf4\ub2c8 \uc124\uba85\uc774 \ub9e4\uc6b0 \ubc29\ub300\ud558\uace0 \ub9e4\uc6b0 \uc5f0\uc5ed\uc801\uc73c\ub85c, \uadf8\ub7ec\ub2c8\uae4c \uc57d\uac04\uc740 \ucd94\uc0c1\uc801\uc73c\ub85c \uc124\uba85\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc774\uc81c tldr \ub85c tar \uc758 \uc0ac\uc6a9\ubc95\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. $ tldr tar \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uac1c\ubc1c\uc790\ub4e4\uc774 \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 tar \uc758 \ud575\uc2ec \uae30\ub2a5\ub4e4\uc774 \uc57d\uac04 \uadc0\ub0a9\uc801\uc73c\ub85c, \uc989 \uc0c1\ub2f9\ud788 \uad6c\uccb4\uc801\uc73c\ub85c \uc124\uba85\ub41c \uc0ac\uc6a9\ubc95\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4. python \u279c bpython \u00b6 \uc774\ubc88\uc5d0\ub294 \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130 python \uc5d0 \ucf54\ub4dc \ud558\uc774\ub77c\uc774\ud305\uacfc \uc790\ub3d9\uc644\uc131 \uae30\ub2a5 \ub4f1\uc758 \ud3b8\ub9ac\ud55c \uae30\ub2a5\uc774 \ucd94\uac00\ub41c bpython \uc785\ub2c8\ub2e4. \uae30\uc874\uc758 \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc2e4\ud589\ub42c\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc bpython \uc744 \uc0ac\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc \ud558\uc774\ub77c\uc774\ud305, \uc790\ub3d9 \uc644\uc131, \ud568\uc218 \ucd94\ucc9c \uae30\ub2a5, \uc790\ub3d9 \uc778\ub374\ud2b8 \ub4f1\uc758 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud76c\ubbf8\ud55c \uae00\uc528\ub85c \uc790\ub3d9 \uc644\uc131 \ucd94\ucc9c \uae30\ub2a5\uc774 \ubc1c\ub3d9\ub418\uba74 \ubc29\ud5a5\ud0a4 \u2192 \ub97c \ub20c\ub7ec\uc11c \uc790\ub3d9\uc644\uc131\uc744 \uc2dc\ucf1c\ubcf4\uc138\uc694. nvidia-smi \u279c nvtop \u00b6 WICWIU \ub97c \uac1c\ubc1c\ud558\uace0 \ub514\ubc84\uae45\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac GPU \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud574\uc57c \ud569\ub2c8\ub2e4. GPU \uac00 \ub108\ubb34 \ub35c \uc4f0\uc774\uace0 \uc788\ub294\uc9c0, \uc544\ub2c8\uba74 \ub108\ubb34 \uacfc\ud558\uac8c \uc4f0\uc5ec\uc9c0\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud558\uace0 \ub2e4\ub978 \ub204\uad70\uac00 \uc4f0\uace0 \uc788\ub294 GPU \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774\ub54c \ubcf4\ud1b5\uc740 nvidia-smi \ud504\ub85c\uadf8\ub7a8\uc744 \uc0ac\uc6a9\ud558\uc5ec GPU \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc nvida-smi \ub294 GPU \uc0c1\ud669\uc744 \ud55c \ubc88 \ucd9c\ub825\ud558\uace0 \ub05d\ub098\ubc84\ub9ac\uae30 \ub54c\ubb38\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 watch \ud504\ub85c\uadf8\ub7a8\uacfc \ud568\uaed8 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. $ watch -n 1 nvida-smi # 1\ucd08\uc5d0 \ud55c\ubc88 nvidia-smi \ub97c \uc2e4\ud589\ud55c\ub2e4. nvida-smi \uc2e4\ud589 \uacb0\uacfc \ud558\uc9c0\ub9cc nvtop \uc740 GPU \uc0c1\ud0dc\ub97c \uadf8\ub798\ud504 \ud615\ud0dc\ub85c \ub098\ud0c0\ub0b4\uc904 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc5b4\ub5a4 \uc720\uc800\uac00 GPU \ub97c \uc0ac\uc6a9\ud558\ub294 \ud504\ub85c\uc138\uc2a4\ub97c \uc2e4\ud589\ud588\ub294\uc9c0\ub3c4 \ub098\ud0c0\ub0b4\uc90d\ub2c8\ub2e4. $ nvtop nvtop \uc2e4\ud589 \uacb0\uacfc nvtop \uc124\uce58 \u00b6 Note nvtop \ud504\ub85c\uadf8\ub7a8\uc758 \uc124\uce58\ubc95\uc740 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \ub098\uc640\uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c \uc124\uba85\ud574\ub4dc\ub9bd\ub2c8\ub2e4. nvtop \ud504\ub85c\uadf8\ub7a8\uc758 \uc124\uce58\ub294 \uc774\uacf3 \uc5d0 \ub4e4\uc5b4\uac00\uc11c \uc2dc\uc2a4\ud15c\uc5d0 \ub9de\ub294 \uc124\uce58\ubc95\uc744 \ub530\ub974\uba74 \ub429\ub2c8\ub2e4.","title":"CLI"},{"location":"dev/cli/cli/#alias","text":"\uba3c\uc800 \ub2e4\uc74c\uacfc \uac19\uc774 alias \ub97c \uc9c0\uc815\ud558\uba74 \uba85\ub839\uc5b4 \uc785\ub825 \uc2dc\uac04\uc744 \ud68d\uae30\uc801\uc73c\ub85c \uc904\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. alias command t tmux v vim c clear cs cd .. ls lsd --icon never cl clear;ls l ls la ls -a ll ls -la lt ls --tree g git q exit Info alias t=tmux \uba85\ub839\uc5b4\ub85c alias \ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc744 \ub9e4\ubc88 \ub85c\uadf8\uc778\ud560 \ub54c\ub9c8\ub2e4 \uc785\ub825\ud558\uae30 \uadc0\ucc2e\uae30 \ub54c\ubb38\uc5d0 zsh \uc258 \uc0ac\uc6a9 \uc720\uc800\ub77c\uba74 .zshrc \ub610\ub294 .zsh_aliases \uc5d0 alias t = tmux alias v = vim alias c = clear alias cs = 'cd ..' alias ls = 'lsd --icon never' alias cl = 'clear;ls' alias l = 'ls' alias la = 'ls -a' alias ll = 'ls -la' alias lt = 'ls --tree' alias g = 'git' alias q = 'exix' \uc744 \uc785\ub825\ud574\ub450\uba74 \ub429\ub2c8\ub2e4. bash \uc258 \uc0ac\uc6a9 \uc720\uc800\ub77c\uba74 .bashrc \ub610\ub294 .bash_aliases \uc5d0 \uc785\ub825\ud558\uba74 \ub418\ub294 \uac83\uc785\ub2c8\ub2e4.","title":"alias"},{"location":"dev/cli/cli/#git","text":"git \uc740 \uc9c0\uc6d0\ud558\ub294 \uc9c0\ub2a5\uc774 \ud558\ub3c4 \ub9ce\ub2e4\ubcf4\ub2c8 \ub0b4\ubd80\uc801\uc73c\ub85c alias \ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uac00\ub839 git commit -m \uc774\ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ub9e4\ubc88 \uc785\ub825\ud558\uae30\uac00 \ub108\ubb34 \uadc0\ucc2e\uc544\uc11c \uacac\ub51c \uc218\uac00 \uc5c6\uc73c\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uc5ec alias \ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ g config --global alias.cm \"commit -m\" Info alias \uc5d0\uc11c alias g=git \uc73c\ub85c git \uc758 \uc5d0\uc77c\ub9ac\uc5b4\uc2a4 g \ub97c \uc124\uc815\ud588\uc5c8\uae30 \ub54c\ubb38\uc5d0 git \uc774 \uc544\ub2cc g \ub9cc \uc785\ub825\ud574\ub3c4 \ub429\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc774\uc81c\ubd80\ud130 \uc6b0\ub9ac\ub294 git commit -m \uc774 \uc544\ub2c8\ub77c g cm \ub9cc \uc785\ub825\ud574\ub3c4 \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \uc800\uc758 dotfiles \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc758 .tmux.conf \uc5d0\ub294 \uc774\ub7f0 git \uc758 alias \ub4e4\uc774 \uc774\ubbf8 \uc124\uc815\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc744 ~/.gitconfig \uc5d0 \uc704\uce58\uc2dc\ud0a4\uae30\ub9cc \ud558\uba74 git alias \ub4e4\uc774 \ub2e8\ubc88\uc5d0 \uc124\uc815\ub429\ub2c8\ub2e4. git \uc758 alias \uac00 \ub9e4\uc6b0 \ub9ce\uc774 \uc124\uc815\ub418\uc5b4 \uc788\uc9c0\ub9cc \uadf8\uc911\uc5d0\uc11c \uc8fc\uc694\ud55c alias \ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. alias \uc6d0\ub798 \uba85\ub839\uc5b4 \uc644\uc131\ub41c \uba85\ub839\uc5b4 \uc758\ubbf8 i init g i git \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac\ub97c \uc2dc\uc791\ud558\ub3c4\ub85d \ud55c\ub2e4. s status g s \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc0c1\ud0dc\ub97c \ubcf8\ub2e4. sb status -s -b g sb \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc0c1\ud0dc\ub97c \uac04\ub7b5\ud558\uac8c \ubcf8\ub2e4. cm commit -m g cm \"<MESSAGE>\" \ucee4\ubc0b\uc744 \ud55c\ub2e4. a add --all g a \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c \ud30c\uc77c\uc744 \uc2a4\ud14c\uc774\uc9d5 \ud55c\ub2e4. l log --oneline g l git \uc758 \ucee4\ubc0b \uae30\ub85d\uc744 \ud55c\uc904\uc529 \ucd9c\ub825\ud55c\ub2e4. lg log --oneline --graph --decorate g lg git \uc758 \ucee4\ubc0b \uae30\ub85d\uc744 \uadf8\ub798\ud504\ub85c \ucd9c\ub825\ud55c\ub2e4. rao remote add origin g rao <REMOTE> \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ucd94\uac00\ud55c\ub2e4. cl clone g cl <URL> \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ubcf5\uc81c\ud574 \uc628\ub2e4. psom push origin master g psom \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c \ud478\uc26c\ud55c\ub2e4. plom pull origin master g plom \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uac00\uc838\uc628\ub2e4. b branch g b <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0dd\uc131\ud55c\ub2e4. bd branch -d g bd <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0ad\uc81c\ud55c\ub2e4. m merge g m \uc791\uc5c5\uc774 \uc644\ub8cc\ub41c \ube0c\ub79c\uce58\ub97c \ubcd1\ud569\ud55c\ub2e4. o checkout g o <BRANCH> \ube0c\ub79c\uce58\ub85c \uc774\ub3d9\ud55c\ub2e4. ob checkout -b g ob <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0dd\uc131\ud568\uacfc \ub3d9\uc2dc\uc5d0 \uc774\ub3d9\ud55c\ub2e4. \uc774\ub85c\uc368 git \uc73c\ub85c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uad00\ub9ac\ud558\ub294 \ub808\ud37c\ud1a0\ub9ac\uc778 \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub4e4\uc744 \ud68d\uae30\uc801\uc73c\ub85c \ub2e8\ucd95\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ mkdir git-test $ cd git-test $ git init $ touch test.txt $ git status $ git add test.txt $ git status $ git commit -m \"my first commit\" $ git status $ echo \"My test memo\" > test.txt $ cat test.txt My test memo $ git add . $ git commit -m \"My memo file\" $ git log $ git remote add origin https://github.com/<USER>/git-test $ git push -u origin master $ cd $ git clone https://github.com/<USER>/git-test git-test-remote $ cd git-test-remote $ echo \"very important message\" > test.txt $ git add . $ git commit -m \"very important file..\" $ git push origin master $ cd ~/git-test $ cat test.txt $ git pull origin master $ cat test.txt \uc704\uc640 \uac19\uc740 \uba85\ub839\uc5b4\ub97c alias \ub85c \ub2e8\ucd95\ud574\uc11c \ub2e4\uc2dc \uc785\ub825\ud574\ubcf4 \uba85\ub839\uc5b4\uac00 \uc815\ub9d0 \ube60\ub974\uac8c \uc785\ub825\ub429\ub2c8\ub2e4. $ cd $ mkdir alias-test $ cd alias-test $ g i $ touch test.txt $ g s $ g a $ g s $ g cm \"init\" $ g s $ echo \"My test memo\" > test.txt $ bat test.txt $ g a $ g cm \"memo\" $ g l $ g rao https://github.com/<USER>/alias-test $ g psom $ cd $ g cl https://github.com/<USER>/alias-test alias-test-remote $ cd alias-test-remote $ echo \"message\" > test.txt $ g a $ g cm \"important file\" $ g psom $ cd ~/alias-test $ bat test.txt $ g plom $ bat test.txt \uc774\ub85c\uc368 \ub2e4\uc74c\uacfc \uac19\uc774 213 \ud0c0\ub97c \uccd0\uc57c \ud588\ub358 \uac83\uc744 79 \ud0c0\ub9cc \uce60 \uc218 \uc788\ub3c4\ub85d \ub300\ud3ed \uc808\uc57d\uc744 \ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc6d0\ub798 \uba85\ub839\uc5b4 alias \uba85\ub839\uc5b4 git init g i git status g s git add g a git status g s git commit -m g cm git status g s git add . g a git commit -m g cm git log g l git remote add g rao git push -u origin master g psom git clone g cl git add . g a git commit g cm git push origin master g psom git pull origin master g plom \ucd1d\ud569 213 \uac1c \ucd1d\ud569 79 \uac1c Tip \uc774\ub7ec\ud55c git \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac \ud328\ud134\uc740 \ucf54\ub529\uc744 \ud560 \ub54c\ub9c8\ub2e4 \ubc18\ubcf5\ub418\ub294\ub370, \uc774 \ud328\ud134\uc744 \uac1c\ubc1c\uc790\ub85c \uc0b4\uc544\uac00\uba74\uc11c \uc801\uac8c \uc7a1\uc544\uc11c 10000 \ubc88 \ubc18\ubcf5\ud55c\ub2e4\uace0 \ud55c\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc740 10000 * 213 = 2\ubc31 13\ub9cc \ubc88 \uce60 \uac83\uc744 10000 * 79 = 79\ub9cc \ub9cc\ucce4\uc2b5\ub2c8\ub2e4. \uc989, \ub611\uac19\uc740 \uc77c\uc744 \ud558\ub294\ub370 134\ub9cc \ubc88\uc758 \ud0c0\uc790\ub97c \uc548 \uce5c\uac83\uc785\ub2c8\ub2e4!","title":"\ub354 \ube68\ub77c\uc9c4 git"},{"location":"dev/cli/cli/#cli","text":"","title":"CLI \uc5c5\uadf8\ub808\uc774\ub4dc"},{"location":"dev/cli/cli/#ls-lsd","text":"lsd \ub294 \uad6c\uc2dd\uc778 ls \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. ls \uc640 lsd \ub97c \ube44\uad50\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. lsd \ub294 \uceec\ub7ec\ud480\ud558\uac8c \ucd9c\ub825\uacb0\uacfc\ub97c \ubcf4\uc5ec\uc918\uc11c \uac00\ub3c5\uc131\uc774 \ud6e8\uc52c \uc62c\ub824\uc90d\ub2c8\ub2e4. Info lsd --icon never \uc5d0\uc11c --icon never \uc635\uc158\uc740 \uc544\uc774\ucf58\uc744 \ucd9c\ub825\ud558\uc9c0 \uc54a\ub294 \uc635\uc158\uc785\ub2c8\ub2e4. \uc774\ub294 \uc21c\uc218 CLI \ud658\uacbd\uc5d0\uc11c \ud544\uc694\ud55c \uc635\uc158\uc774\uae30 \ub54c\ubb38\uc5d0 \ub9cc\uc57d GUI \ud658\uacbd( macOS \uc774\ub098 \ub9ac\ub205\uc2a4 \ub370\uc2a4\ud06c\ud0d1 \ud658\uacbd)\uc5d0\uc11c \uc544\uc774\ucf58\uc744 \uc124\uce58\ud558\uace0 --icon never \uc635\uc158\uc744 \uc81c\uac70\ud558\uace0 lsd \ub97c \uc2e4\ud589\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc544\uc774\ucf58\ub3c4 \ud568\uaed8 \ucd9c\ub825\ub418\uc5b4 \uac00\ub3c5\uc131\uc774 \ud6e8\uc52c \uc62c\ub77c\uac00\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"ls \u279c lsd"},{"location":"dev/cli/cli/#cat-bat","text":"bat \ub294 \uad6c\uc2dd\uc778 cat \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uadf8\ub7fc cat \uc640 bat \ub97c \ube44\uad50\ud574\ubd05\uc2dc\ub2e4. cat \uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc0b\ubc0b\ud558\uac8c \ucd9c\ub825\ub418\ub294 \ubc18\uba74, bat \uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \uceec\ub7ec\ud480\ud558\uac8c \ucd9c\ub825\ub429\ub2c8\ub2e4. Tip bat \uc740 more \uc774\ub098 less \ucc98\ub7fc e \uc640 y \ub97c \ub204\ub974\uba74 \uc704\uc544\ub798\ub85c \uc6c0\uc9c1\uc77c \uc218 \uc788\uace0 Spacebar \uc640 u \ub97c \ub204\ub974\uba74 \ud398\uc774\uc9c0 \ub2e8\uc704\ub85c \uc704\uc544\ub798\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\uc73c\uba70 vim \ucc98\ub7fc / \ub85c \ud2b9\uc815 \ubb38\uc790\uc5f4\uc744 \uac80\uc0c9\ud560 \uc218 \uc788\uace0 q \ub85c \uc885\ub8cc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"cat \u279c bat"},{"location":"dev/cli/cli/#find-fd","text":"fd \ub294 \uad6c\uc2dd\uc778 find \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. fd \ub294 find \ubcf4\ub2e4 5\ubc30 \uc815\ub3c4 \ube60\ub974\uace0 \uc880 \ub354 \uc720\uc800\ub4e4\uc774 \uc0ac\uc6a9\ud558\uae30 \ud3b8\ud558\ub3c4\ub85d \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub300\ud3ed \uac1c\uc120\ub41c \ubaa8\ub358\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. fd \ub294 find \uc640 \uc0c1\uc138\ud558\uac8c \ube44\uad50\ud558\uae30\ubcf4\ub2e4 \ub2e4\uc74c\uc758 \uc0ac\uc6a9\uc608\ub97c \uac00\ubccd\uac8c \ud55c\ubc88 \uc0b4\ud3b4\ubcf4\ub294 \uac83\uc73c\ub85c \ub9c8\ubb34\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98 : https://github.com/sharkdp/fd fd \uc758 \uc0c1\uc138\ud55c \uc124\uba85\uc744 \uc54c\uace0 \uc2f6\ub2e4\uba74 \uacf5\uc2dd \ub808\ud3ec\uc9c0\ud1a0\ub9ac https://github.com/sharkdp/fd \ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694.","title":"find \u279c fd"},{"location":"dev/cli/cli/#top-htop-gotop","text":"top \uba85\ub839\uc5b4\ub294 \uc2dc\uc2a4\ud15c\uc758 \ub9ac\uc18c\uc2a4 \uc0c1\ud0dc(RAM, CPU \ub4f1) \uc744 \ucd9c\ub825\ud574\uc8fc\ub294 \uc88b\uc740 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uae30\uc874\uc758 top \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc57d\uac04\uc740 \ubc0b\ubc0b\ud558\uac8c \uc2dc\uc2a4\ud15c\uc758 \uc0c1\ud0dc\ub97c \ucd9c\ub825\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc htop \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc0c9\uae54\ub3c4 \uce60\ud558\uace0 \uba54\ubaa8\ub9ac\uc640 CPU \uc0c1\ud0dc\ub97c \ud578\ub4dc\ud3f0 \ubc30\ud130\ub9ac \ubc14\ucc98\ub7fc \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c gotop \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc644\ubcbd\ud55c \uadf8\ub798\ud504\ub85c \uc2dc\uc2a4\ud15c\uc758 \uc0c1\ud0dc\ub97c \uc9c1\uad00\uc801\uc73c\ub85c \ucd9c\ub825\ud574\uc90d\ub2c8\ub2e4. Note \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub97c \ucd9c\ub825\ud574\uc904 \uc218 \uc788\ub294 \uc720\ud2f8\ub9ac\ud2f0\ub294 \uac1c\uc778\uc801\uc778 \uc120\ud638\uc5d0 \ub530\ub77c \uc88b\uace0 \ub098\uc068\uc774 \uacb0\uc815\ub418\ubbc0\ub85c \ud655\uc2e4\ud788 \uc5b4\ub5a4 \uac8c \uc88b\ub2e4\ub77c\uace0 \ub9d0\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uadf8\ub0e5 \uac1c\uc778\uc801\uc73c\ub85c \ub354 \ub098\uc740 \uac83 \uac19\uc740 CLI \ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. \uc804 \uac1c\uc778\uc801\uc73c\ub85c gotop \uc774 \uc9c1\uad00\uc801\uc774\uace0 \uc88b\ub354\ub77c\uad6c\uc694.","title":"top \u279c htop \u279c gotop"},{"location":"dev/cli/cli/#man-tldr","text":"man \uc740 \uba85\ub839\uc5b4\uc758 \uc0ac\uc6a9\ubc95\uc744 \ucd9c\ub825\ud558\ub294 \ub9e4\uc6b0 \uc88b\uc740 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc man \uc758 \ud55c \uac00\uc9c0 \ub2e8\uc810\uc740 \uadf8 \uc0ac\uc6a9\ubc95\uc774 \ub108\ubb34 \ubc29\ub300\ud558\uace0 \uc7a5\ud669\ud558\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \ud504\ub85c\uadf8\ub7a8\uc758 \ud575\uc2ec \uc0ac\uc6a9\ubc95\uc744 \uc27d\uace0 \ube60\ub974\uac8c \uc54c\uace0 \uc2f6\uc740 \uc0ac\uc6a9\uc790\ub4e4\uc740 \uadf8 \ubc29\ub300\ud55c \uc0ac\uc6a9\ubc95\uc5d0\uc11c \uc790\uc2e0\uc774 \uc6d0\ud558\ub294 \ud575\uc2ec \uc0ac\uc6a9\ubc95\uc744 \uc774\ub9ac\uc800\ub9ac \ucc3e\uace0 \uc788\uc5b4\uc57c\ub9cc \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc tldr \uc740 man \ucc98\ub7fc \ubc29\ub300\ud55c \uc0ac\uc6a9\ubc95\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ub9e4\uc6b0 \uac04\ub2e8\ud55c \ud575\uc2ec \uc0ac\uc6a9\ubc95\ub9cc\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. tldr \uc740 \uc0ac\uc6a9\uc790\ub4e4\uc758 \uc8fc\ub3c4\ub85c \ub9cc\ub4e4\uc5b4\uc838\uc11c \uac1c\ubc1c\uc790\ub4e4\uc774 \uacbd\ud5d8\uc801\uc73c\ub85c \"\uc774\uac8c \uac00\uc7a5 \ud575\uc2ec\uc801\uc778 \uc0ac\uc6a9\ubc95\uc774\ub2e4!\" \ub77c\ub294 \uc0ac\uc6a9\ubc95\ub9cc \uac04\ub2e8\ud558\uac8c \ucd9c\ub825\ud569\ub2c8\ub2e4. man \uc73c\ub85c tar \uba85\ub839\uc5b4\uc758 \uc124\uba85\uc744 \ubcf4\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \ub429\ub2c8\ub2e4. $ man tar \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 tar \uc758 \ubaa8\ub4e0 \uc0ac\uc6a9\ubc95 \uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4. \uc774\ub7f0... \ud558\uc9c0\ub9cc man \uc73c\ub85c tar \ub97c \ubcf4\ub2c8 \uc124\uba85\uc774 \ub9e4\uc6b0 \ubc29\ub300\ud558\uace0 \ub9e4\uc6b0 \uc5f0\uc5ed\uc801\uc73c\ub85c, \uadf8\ub7ec\ub2c8\uae4c \uc57d\uac04\uc740 \ucd94\uc0c1\uc801\uc73c\ub85c \uc124\uba85\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc774\uc81c tldr \ub85c tar \uc758 \uc0ac\uc6a9\ubc95\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. $ tldr tar \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uac1c\ubc1c\uc790\ub4e4\uc774 \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 tar \uc758 \ud575\uc2ec \uae30\ub2a5\ub4e4\uc774 \uc57d\uac04 \uadc0\ub0a9\uc801\uc73c\ub85c, \uc989 \uc0c1\ub2f9\ud788 \uad6c\uccb4\uc801\uc73c\ub85c \uc124\uba85\ub41c \uc0ac\uc6a9\ubc95\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4.","title":"man \u279c tldr"},{"location":"dev/cli/cli/#python-bpython","text":"\uc774\ubc88\uc5d0\ub294 \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130 python \uc5d0 \ucf54\ub4dc \ud558\uc774\ub77c\uc774\ud305\uacfc \uc790\ub3d9\uc644\uc131 \uae30\ub2a5 \ub4f1\uc758 \ud3b8\ub9ac\ud55c \uae30\ub2a5\uc774 \ucd94\uac00\ub41c bpython \uc785\ub2c8\ub2e4. \uae30\uc874\uc758 \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc2e4\ud589\ub42c\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc bpython \uc744 \uc0ac\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc \ud558\uc774\ub77c\uc774\ud305, \uc790\ub3d9 \uc644\uc131, \ud568\uc218 \ucd94\ucc9c \uae30\ub2a5, \uc790\ub3d9 \uc778\ub374\ud2b8 \ub4f1\uc758 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud76c\ubbf8\ud55c \uae00\uc528\ub85c \uc790\ub3d9 \uc644\uc131 \ucd94\ucc9c \uae30\ub2a5\uc774 \ubc1c\ub3d9\ub418\uba74 \ubc29\ud5a5\ud0a4 \u2192 \ub97c \ub20c\ub7ec\uc11c \uc790\ub3d9\uc644\uc131\uc744 \uc2dc\ucf1c\ubcf4\uc138\uc694.","title":"python \u279c bpython"},{"location":"dev/cli/cli/#nvidia-smi-nvtop","text":"WICWIU \ub97c \uac1c\ubc1c\ud558\uace0 \ub514\ubc84\uae45\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac GPU \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud574\uc57c \ud569\ub2c8\ub2e4. GPU \uac00 \ub108\ubb34 \ub35c \uc4f0\uc774\uace0 \uc788\ub294\uc9c0, \uc544\ub2c8\uba74 \ub108\ubb34 \uacfc\ud558\uac8c \uc4f0\uc5ec\uc9c0\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud558\uace0 \ub2e4\ub978 \ub204\uad70\uac00 \uc4f0\uace0 \uc788\ub294 GPU \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774\ub54c \ubcf4\ud1b5\uc740 nvidia-smi \ud504\ub85c\uadf8\ub7a8\uc744 \uc0ac\uc6a9\ud558\uc5ec GPU \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc nvida-smi \ub294 GPU \uc0c1\ud669\uc744 \ud55c \ubc88 \ucd9c\ub825\ud558\uace0 \ub05d\ub098\ubc84\ub9ac\uae30 \ub54c\ubb38\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 watch \ud504\ub85c\uadf8\ub7a8\uacfc \ud568\uaed8 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. $ watch -n 1 nvida-smi # 1\ucd08\uc5d0 \ud55c\ubc88 nvidia-smi \ub97c \uc2e4\ud589\ud55c\ub2e4. nvida-smi \uc2e4\ud589 \uacb0\uacfc \ud558\uc9c0\ub9cc nvtop \uc740 GPU \uc0c1\ud0dc\ub97c \uadf8\ub798\ud504 \ud615\ud0dc\ub85c \ub098\ud0c0\ub0b4\uc904 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc5b4\ub5a4 \uc720\uc800\uac00 GPU \ub97c \uc0ac\uc6a9\ud558\ub294 \ud504\ub85c\uc138\uc2a4\ub97c \uc2e4\ud589\ud588\ub294\uc9c0\ub3c4 \ub098\ud0c0\ub0b4\uc90d\ub2c8\ub2e4. $ nvtop nvtop \uc2e4\ud589 \uacb0\uacfc","title":"nvidia-smi \u279c nvtop"},{"location":"dev/cli/cli/#nvtop","text":"Note nvtop \ud504\ub85c\uadf8\ub7a8\uc758 \uc124\uce58\ubc95\uc740 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \ub098\uc640\uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c \uc124\uba85\ud574\ub4dc\ub9bd\ub2c8\ub2e4. nvtop \ud504\ub85c\uadf8\ub7a8\uc758 \uc124\uce58\ub294 \uc774\uacf3 \uc5d0 \ub4e4\uc5b4\uac00\uc11c \uc2dc\uc2a4\ud15c\uc5d0 \ub9de\ub294 \uc124\uce58\ubc95\uc744 \ub530\ub974\uba74 \ub429\ub2c8\ub2e4.","title":"nvtop \uc124\uce58"},{"location":"dev/cli/tmux/","text":"tmux \ub85c \ud130\ubbf8\ub110 \ud3b8\ud558\uac8c \uc0ac\uc6a9\ud558\uae30 \u00b6 \uc9c0\uae08\uae4c\uc9c0 \ud568\uaed8 \uc0b4\ud3b4\ubcf4\uc558\ub358 CLI \ud504\ub85c\uadf8\ub7a8\ub4e4\ub85c Linux \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub3c4 \ud3b8\ud558\uace0 \ube60\ub974\uac8c \uac1c\ubc1c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uac70\uc758 \ubaa8\ub4e0 \uac1c\ubc1c \uc0c1\ud669\uc5d0\uc11c \ud130\ubbf8\ub110 \ucc3d \ud558\ub098\ub294 \ubd80\uc871\ud569\ub2c8\ub2e4. \uc774\ub54c tmux \uac00 \ud544\uc694\ud569\ub2c8\ub2e4. tmux \uc0ac\uc6a9\ubc95\ub3c4 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \uc790\uc138\ud788 \uc368\ub193\uc558\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 tmux \ub97c \uc0ac\uc6a9\ud558\uba74, \ub610 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\ud558\uba74 \uc5bc\ub9c8\ub098 \uc0dd\uc0b0\uc131\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0\ub9cc \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub354 \ube68\ub77c\uc9c4 tmux ! \u00b6 tmux \uc5c5\uadf8\ub808\uc774\ub4dc\ub294 \uc0ac\uc2e4 \uc2e4\uc81c\uc801\uc778 \uc5c5\uadf8\ub808\uc774\ub4dc\uac00 \uc544\ub2c8\ub77c tmux \uc758 \uc124\uc815\uc744 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\ud560 \uc218 \uc788\ub294 ~/.tmux.conf \ud30c\uc77c\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ub354 \ud3b8\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uc815\uc744 \uc870\uc791\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc81c\uac00 \uc124\uc815\ud55c ~/.tmux.conf \ud30c\uc77c\uc744 \uc911\uc2ec\uc73c\ub85c tmux \ub97c \uc0ac\uc6a9\ud558\uae30\uac00 \uc5bc\ub9c8\ub098 \ud3b8\ud574\uc84c\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub354 \ube68\ub77c\uc9c4 alias \u00b6 \uba3c\uc800 tmux \ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ub9e4\ubc88 \uce58\ub294 \uac83\uc740 \ub108\ubb34 \ube44\ud6a8\uc728\uc801\uc785\ub2c8\ub2e4. \ubb34\ub824 4 \ubc88\uc774\ub098 \ud0a4\ubcf4\ub4dc\ub97c \uccd0\uc57c\ud558\uae30 \ub54c\ubb38\uc774\uc8e0. \uadf8\ub798\uc11c ~/.zsh_aliases \uc5d0 alias t = tmux \ub97c \ucd94\uac00\ud558\uc5ec t \ub9cc \ub20c\ub7ec\ub3c4 tmux \uac00 \ucf1c\uc9c0\ub3c4\ub85d \ud569\ub2c8\ub2e4. Note bash \uc258 \uc720\uc800\ub294 ~/.bashrc \ud30c\uc77c\uc5d0 \ucd94\uac00\ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\uc81c \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c tmux \ub97c \ucf30\ub2e4\uac00 \ub04c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example $ t $ q \ub354 \uc774\ubed0\uc9c4 \ud14c\ub9c8 \u00b6 tmux \uc758 \uc624\ub9ac\uc9c0\ub110 \ud14c\ub9c8\ub294 \ub108\ubb34 \uc548\uc774\uc058\ub124\uc694. \uadf8\ub798\uc11c \uc880 \ub354 \uac00\ub3c5\uc131\ub3c4 \ub192\uc544\uc9c0\uace0 \ubcf4\uae30\uc5d0\ub3c4 \uc88b\uace0 \uc2dc\uac04\ub3c4 \uc54c \uc218 \uc788\ub3c4\ub85d \ub2e4\uc74c\uacfc \uac19\uc740 \uc124\uc815\uc73c\ub85c \ud14c\ub9c8\ub97c \uace0\uce69\ub2c8\ub2e4. set -g status-bg default set -g status-fg colour137 set -g status-style dim set -g status-left '#[fg=colour51,bg=colour0,bold] %R ' # set -g status-right '#[fg=colour51,bg=colour0,bold] #(uname -r) ' set -g status-right '#[fg=colour51,bg=colour0,bold] #(osname) ' set -g status-right-length 100 setw -g window-status-current-style bg = colour14,fg = colour00,bold setw -g window-status-current-format ' #I#[fg=colour0] #[fg=colour0]#W#[fg=colour0] ' setw -g window-status-style fg = colour49,none,bg = colour00 setw -g window-status-format '#I #W ' setw -g window-status-bell-style fg = colour255,bold,bg = colour1 set -g message-style fg = colour232,bold,bg = colour16 \uc774 \uc124\uc815\ub4e4\uc744 ~/.tmux.conf \uc5d0 \ub123\uc73c\uba74 \ub429\ub2c8\ub2e4. Example \ub2e4\uc74c\uc740 \ud14c\ub9c8\ub97c \uc124\uc815\ud558\uae30 \uc804\uc758 \uc624\ub9ac\uc9c0\ub110 tmux \uc758 \ud14c\ub9c8\uc785\ub2c8\ub2e4. \uc0c1\ud0dc\ubc14\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\uace0, \uc0c8 \ud654\uba74\uc744 \ub9cc\ub4e4\uc5c8\uc9c0\ub9cc \ud55c \ub208\uc5d0 \ub4e4\uc5b4\uc624\uc9c0\uac00 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ub978\ucabd\uc5d0 \uc2dc\uac04\ub3c4 \ud45c\uc2dc\ub418\ub294\ub370 \uc5ed\uc2dc \ud55c \ub208\uc5d0 \ub4e4\uc5b4\uc624\uc9c0 \uc54a\ub124\uc694. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uacfc \uac19\uc774 \ud14c\ub9c8\ub97c \ubc14\uafd4\uc11c \uac00\ub3c5\uc131\uc744 \ud655\uc5f0\ud788 \ub192\ud614\uc2b5\ub2c8\ub2e4. \uc0c1\ud0dc\ubc14\uac00 \uc704\ub85c \uc62c\ub77c\uac14\uace0, \uc67c\ucabd\uc5d0\ub294 \uc2dc\uac04\uc774 \uac04\ub7b5\ud558\uc9c0\ub9cc \ub208\uc5d0 \ud655 \ub4e4\uc5b4\uc624\uac8c \ubcf4\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 0 \ubc88\uc9f8 \ud654\uba74\uc5d0\ub294 zsh \uc774 \ucf1c\uc838\uc788\uace0, 1 \ubc88\uc9f8 \ud654\uba74\uc5d0\ub294 vim \uc774 \ucf1c\uc838\uc788\ub294\ub370 \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 \ud654\uba74\uc5d0 \ud558\uc774\ub77c\uc774\ud305\uc774 \ub418\uc11c \uac00\ub3c5\uc131\uc774 \ub9e4\uc6b0 \ub192\uc544\uc9d1\ub2c8\ub2e4. \uc624\ub978\ucabd\uc5d0\ub294 \uc6b4\uc601\uccb4\uc81c\uc758 \uc774\ub984\ub3c4 \ub098\ud0c0\ub0a9\ub2c8\ub2e4. \ub354 \ube68\ub77c\uc9c4 \uba54\ud0c0 \ud0a4 \u00b6 \uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 Meta \ud0a4 Ctrl + b Ctrl + a tmux \ub294 Meta \ud0a4 \ub97c \uc0ac\uc6a9\ud558\uc5ec \uba85\ub839\uc5b4\ub4e4\uc744 \uc815\uc758\ud558\uae30 \ub54c\ubb38\uc5d0 Ctrl + b \ub97c \uc785\ub825\ud588\uc5b4\uc57c \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Ctrl \uc640 b \ub294 \uac70\ub9ac\uac00 \ub108\ubb34 \uba40\uc5b4\uc11c \uc190\uc774 \uc544\ud515\ub2c8\ub2e4. \uadf8\ub798\uc11c ~/.tmux.conf \uc5d0 unbind C-b set-option -g prefix C-a bind-key C-a send-prefix \ub97c \ucd94\uac00\ud558\uc5ec \uac70\ub9ac\uac00 \uac00\uae4c\uc6b4 Ctrl + a \ub85c Meta \ud0a4\ub97c \uc7ac\uc124\uc815\ud569\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108\uc5d0\ub294 \uc774\ubbf8 \uc124\uc815 \ub418\uc5b4\uc788\uc73c\ub2c8 \uac71\uc815\ud558\uc9c0 \ub9c8\uc138\uc694. Info \uc55e\uc73c\ub85c \uc0b4\ud3b4\ubcfc tmux \uc5c5\uadf8\ub808\uc774\ub4dc\ub4e4\ub3c4 \uc704\uc640 \uac19\uc740 \uc124\uc815 \ud30c\uc77c\uc744 \uc870\uc791\ud558\ub294 \uac83\uc73c\ub85c \uc774\ub8e8\uc5b4\uc84c\uc9c0\ub9cc, \uc77c\uc77c\uc774 \uc5b4\ub5a4 \uc124\uc815\uc73c\ub85c tmux \uac00 \uc5c5\uadf8\ub808\uc774\ub4dc\ub418\uc5c8\ub294\uc9c0 \uc0c1\uc138\ud788 \uc124\uba85\ud558\uc9c0\ub294 \uc54a\uaca0\uc2b5\ub2c8\ub2e4. .tmux.conf \ub97c \ubcf4\uc2dc\ub824\uba74 .tmux.conf \ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694. \ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ubd84\ud560 \u00b6 \uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \ud130\ubbf8\ub110 \uc218\uc9c1 \ubd84\ud560 Meta + % Meta + \u29f5 \ud130\ubbf8\ub110 \uc218\ud3c9 \ubd84\ud560 Meta + \" Meta + - \ub2e4\uc74c \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 Meta + o Alt + o (\uc22b\uc790) \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 Meta + q + (\uc22b\uc790) tmux \uc5d0\uc11c \ud130\ubbf8\ub110\uc744 \uc218\ud3c9\uc73c\ub85c \ubd84\ud560\ud558\ub824\uba74 \uae30\uc874\uc758 \uba85\ub839\uc5b4 Meta + \" \ub97c \uc785\ub825\ud574\uc57c \ud558\ub294\ub370 \uc774\uac74 \uc678\uc6b0\uae30\uac00 \ub108\ubb34 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc678\uc6b0\uae30 \uc27d\ub3c4\ub85d \uc218\ud3c9\uc73c\ub85c \ub098\ub208\ub2e4\ub294 \uc758\ubbf8\uc5d0\uc11c Meta + - \ub85c \uc9c1\uad00\uc801\uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4. \ub610\ud55c \ud130\ubbf8\ub110\uc744 \uc218\uc9c1\uc73c\ub85c \ubd84\ud560\ud558\ub824\uba74 \uae30\uc874\uc758 \uba85\ub839\uc5b4 Meta + % \ub97c \uc785\ub825\ud574\uc57c \ud558\ub294\ub370 \uc774\uac83 \uc5ed\uc2dc \uc678\uc6b0\uae30\uac00 \ub108\ubb34 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc678\uc6b0\uae30 \uc27d\ub3c4\ub85d \uc218\uc9c1\uc73c\ub85c \ub098\ub208\ub2e4\ub294 \uc758\ubbf8\uc5d0\uc11c \ubc31\uc2ac\ub798\uc26c\ub85c \ubc14\uafd4\uc11c Meta + \u29f5 \ub85c \uc9c1\uad00\uc801\uc778 \ub2e8\ucd95\ud0a4\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud558\ub294 \ub2e8\ucd95\ud0a4 Meta + o \ub294 \uc2e4\uc81c\ub85c ( Ctrl + a ) + o \uc778\ub370, \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud558\ub294 \uc791\uc5c5\uc740 \ub9e4\uc6b0 \ub9ce\uc774 \uc77c\uc5b4\ub098\ubbc0\ub85c \ud0a4\ub97c 3 \ubc88\uc774\ub098 \ub20c\ub7ec\uc57c \ud558\ub294 \uac83\uc740 \ub108\ubb34 \ube44\ud6a8\uc728\uc801\uc774\uc5b4\uc11c \ucc38\uc744 \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c Alt + o \ub85c \ubc14\uafc9\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110\uc744 \uc218\uc9c1, \uc218\ud3c9\uc73c\ub85c \uc5ec\ub7ec\ubc88 \ubd84\ud560\ud574\ubcf4\uace0 Alt \ub97c \uacc4\uc18d \ub204\ub978 \ucc44\ub85c o \ub97c \ub20c\ub7ec\uc11c \ud130\ubbf8\ub110\uc744 \uc774\ub3d9\ud574\ubcf4\uc138\uc694. \ud130\ubbf8\ub110 \uc774\ub3d9\uc774 \uc815\ub9d0 \ube68\ub77c\uc84c\uc2b5\ub2c8\ub2e4. \ub354 \ube68\ub77c\uc9c4 \ud654\uba74 \uc0dd\uc131 \u00b6 \uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ud654\uba74 \uc0dd\uc131 Meta + c Alt + c \ub2e4\uc74c \ud654\uba74\uc73c\ub85c \uc774\ub3d9 Meta + n Alt + n \uc774\uc804 \ud654\uba74\uc73c\ub85c \uc774\ub3d9 Meta + p Alt + p \uc0c8\ub85c\uc6b4 \ud654\uba74\uc744 \uc0dd\uc131\ud558\uace0 \ud654\uba74\uc744 \ub118\uae30\ub294 \uc77c\ub3c4 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud558\uc5ec Meta \ud0a4 \ub300\uc2e0 Alt \ub97c \uc0ac\uc6a9\ud569\uc2dc\ub2e4. \uba54\ud0c0\ud0a4\ub97c Alt \ud0a4\ub85c \ubc14\uafb8\ub294 \uac83\ub9cc\uc73c\ub85c \uc5bc\ub9c8\ub098 \uc791\uc5c5\uc774 \ube68\ub77c\uc9c0\ub294\uc9c0 \ubcf4\uc138\uc694. Example \ub2e4\uc74c\uacfc \uac19\uc774 Alt \ub97c \uacc4\uc18d \ub204\ub978\ucc44\ub85c c \ub97c \uc5f0\ud0c0\ud574\uc11c \ud654\uba74\uc744 \ub354\uc6b1 \ube60\ub974\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc5ec\ub7ec \ud654\uba74\uc744 \ub9c8\ucc2c\uac00\uc9c0\ub85c Alt \ub97c \uacc4\uc18d \ub204\ub978\ucc44\ub85c n \ub610\ub294 p \ub97c \ub204\ub974\uba74\uc11c \uc774\ub3d9\ud574\ubcf4\uc138\uc694. \ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \uc774\ub3d9 \u00b6 \uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \uc67c\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + h \uc624\ub978\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + l \uc704\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + k \uc544\ub798\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + j \ud130\ubbf8\ub110 \uc774\ub3d9\uc744 Alt + o \ub85c \ub9e4\uc6b0 \ube60\ub974\uac8c \ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc9c0\ub9cc\uc11c\ub3c4 \ud130\ubbf8\ub110\uc774 \uc5ec\ub7ec\uac1c\ub85c \ub098\ub258\uc5c8\uc744 \ub54c Alt + o \ub85c \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c\ubc16\uc5d0 \uc774\ub3d9\ud560 \uc218 \uc5c6\ub2e4\uba74, \uc815\ud655\ud788 \uc6d0\ud558\ub294 \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub97c \uc704\ud558\uc5ec tmux \ub294 \uc815\ud655\ud788 \uc67c\ucabd, \uc624\ub978\ucabd, \uc704\ucabd, \uc544\ub798\ucabd \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uba85\ub839\uc5b4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac74 \ub108\ubb34 \ubcf5\uc7a1\ud588\uc5c8\uace0 \uadf8\uac8c \ubb50\uc600\ub294\uc9c0 \uc194\uc9c1\ud788 \uae4c\uba39\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \ub300\uc2e0 vim \uc5d0\uc11c\uc758 \ucee4\uc11c \uc774\ub3d9\ud0a4\uc600\ub358 h , l , k , j \uc5d0\uc11c \ucc29\uc548\ud558\uc5ec \ud130\ubbf8\ub110 \uc774\ub3d9\uc744 \ub9e4\uc6b0 \uc27d\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110\uc744 \uc5ec\ub7ec\uac1c\ub85c \ubd84\ud560\ud558\uace0 Alt \ub97c \ub204\ub978\ucc44\ub85c h , l , k , j \ub97c \ub204\ub974\uba74\uc11c \ud130\ubbf8\ub110\uc744 \uc774\ub3d9\ud574\ubcf4\uc138\uc694. \ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808 \u00b6 \uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc67c\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2190 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc624\ub978\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2192 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc704\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2191 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc544\ub798\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2193 \ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\uc774\ub77c\uace0 \ud574\ubd10\uc57c \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b0\uc9c0\ub3c4 \uc54a\uc558\ub294\ub370 \ub77c\uace0 \uc0dd\uac01\ud560 \uc218\ub3c4 \uc788\uaca0\uc9c0\ub9cc, \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\ud558\ub294 \ubc29\ubc95\uc774 \uc678\uc6b8 \uc218 \uc5c6\uc744 \ub9cc\ud07c \ub108\ubb34 \ubcf5\uc7a1\ud55c \uac83\uc774\uc5b4\uc11c \uc548\uc37c\uc2b5\ub2c8\ub2e4. \uacfc\uac70\uc758 \uc81c\uac00 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \ub108\ubb34\ub108\ubb34 \uc27d\uac8c \uc870\uc808\ud560 \uc218 \uc788\ub3c4\ub85d \uc704\uc640 \uac19\uc774 \uc124\uc815\ud574\ub193\uc558\uc2b5\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110 \ub2e8\ucd95\ud0a4 Alt \ub97c \uacc4\uc18d \ub204\ub978 \ucc44\ub85c \u2192 , \u2190 , \u2191 , \u2193 \uc744 \ub20c\ub7ec\uc11c \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \ub108\ubb34\ub098\ub3c4 \uc27d\uac8c \uc870\uc808\ud574\ubcf4\uc138\uc694. tmux \uc0ac\uc6a9 \uc608\uc2dc \u00b6 \ub2e4\uc74c\uc740 tmux \ub97c \ud1b5\ud558\uc5ec nvtop \uacfc gotop \uc73c\ub85c GPU \uc0c1\ud669\uacfc CPU, RAM \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\uba74\uc11c \ub525\ub7ec\ub2dd\uc744 \ub3cc\ub9ac\uace0 \uc788\ub294 \ubaa8\uc2b5\uc785\ub2c8\ub2e4. nvtop \uacfc gotop \uc73c\ub85c \uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1 \ud558\uba74\uc11c \ub525\ub7ec\ub2dd\ud558\ub294 \ubaa8\uc2b5","title":"tmux"},{"location":"dev/cli/tmux/#tmux","text":"\uc9c0\uae08\uae4c\uc9c0 \ud568\uaed8 \uc0b4\ud3b4\ubcf4\uc558\ub358 CLI \ud504\ub85c\uadf8\ub7a8\ub4e4\ub85c Linux \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub3c4 \ud3b8\ud558\uace0 \ube60\ub974\uac8c \uac1c\ubc1c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uac70\uc758 \ubaa8\ub4e0 \uac1c\ubc1c \uc0c1\ud669\uc5d0\uc11c \ud130\ubbf8\ub110 \ucc3d \ud558\ub098\ub294 \ubd80\uc871\ud569\ub2c8\ub2e4. \uc774\ub54c tmux \uac00 \ud544\uc694\ud569\ub2c8\ub2e4. tmux \uc0ac\uc6a9\ubc95\ub3c4 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \uc790\uc138\ud788 \uc368\ub193\uc558\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 tmux \ub97c \uc0ac\uc6a9\ud558\uba74, \ub610 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\ud558\uba74 \uc5bc\ub9c8\ub098 \uc0dd\uc0b0\uc131\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0\ub9cc \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"tmux \ub85c \ud130\ubbf8\ub110 \ud3b8\ud558\uac8c \uc0ac\uc6a9\ud558\uae30"},{"location":"dev/cli/tmux/#tmux_1","text":"tmux \uc5c5\uadf8\ub808\uc774\ub4dc\ub294 \uc0ac\uc2e4 \uc2e4\uc81c\uc801\uc778 \uc5c5\uadf8\ub808\uc774\ub4dc\uac00 \uc544\ub2c8\ub77c tmux \uc758 \uc124\uc815\uc744 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\ud560 \uc218 \uc788\ub294 ~/.tmux.conf \ud30c\uc77c\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ub354 \ud3b8\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uc815\uc744 \uc870\uc791\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc81c\uac00 \uc124\uc815\ud55c ~/.tmux.conf \ud30c\uc77c\uc744 \uc911\uc2ec\uc73c\ub85c tmux \ub97c \uc0ac\uc6a9\ud558\uae30\uac00 \uc5bc\ub9c8\ub098 \ud3b8\ud574\uc84c\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"\ub354 \ube68\ub77c\uc9c4 tmux!"},{"location":"dev/cli/tmux/#alias","text":"\uba3c\uc800 tmux \ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ub9e4\ubc88 \uce58\ub294 \uac83\uc740 \ub108\ubb34 \ube44\ud6a8\uc728\uc801\uc785\ub2c8\ub2e4. \ubb34\ub824 4 \ubc88\uc774\ub098 \ud0a4\ubcf4\ub4dc\ub97c \uccd0\uc57c\ud558\uae30 \ub54c\ubb38\uc774\uc8e0. \uadf8\ub798\uc11c ~/.zsh_aliases \uc5d0 alias t = tmux \ub97c \ucd94\uac00\ud558\uc5ec t \ub9cc \ub20c\ub7ec\ub3c4 tmux \uac00 \ucf1c\uc9c0\ub3c4\ub85d \ud569\ub2c8\ub2e4. Note bash \uc258 \uc720\uc800\ub294 ~/.bashrc \ud30c\uc77c\uc5d0 \ucd94\uac00\ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\uc81c \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c tmux \ub97c \ucf30\ub2e4\uac00 \ub04c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example $ t $ q","title":"\ub354 \ube68\ub77c\uc9c4 alias"},{"location":"dev/cli/tmux/#_1","text":"tmux \uc758 \uc624\ub9ac\uc9c0\ub110 \ud14c\ub9c8\ub294 \ub108\ubb34 \uc548\uc774\uc058\ub124\uc694. \uadf8\ub798\uc11c \uc880 \ub354 \uac00\ub3c5\uc131\ub3c4 \ub192\uc544\uc9c0\uace0 \ubcf4\uae30\uc5d0\ub3c4 \uc88b\uace0 \uc2dc\uac04\ub3c4 \uc54c \uc218 \uc788\ub3c4\ub85d \ub2e4\uc74c\uacfc \uac19\uc740 \uc124\uc815\uc73c\ub85c \ud14c\ub9c8\ub97c \uace0\uce69\ub2c8\ub2e4. set -g status-bg default set -g status-fg colour137 set -g status-style dim set -g status-left '#[fg=colour51,bg=colour0,bold] %R ' # set -g status-right '#[fg=colour51,bg=colour0,bold] #(uname -r) ' set -g status-right '#[fg=colour51,bg=colour0,bold] #(osname) ' set -g status-right-length 100 setw -g window-status-current-style bg = colour14,fg = colour00,bold setw -g window-status-current-format ' #I#[fg=colour0] #[fg=colour0]#W#[fg=colour0] ' setw -g window-status-style fg = colour49,none,bg = colour00 setw -g window-status-format '#I #W ' setw -g window-status-bell-style fg = colour255,bold,bg = colour1 set -g message-style fg = colour232,bold,bg = colour16 \uc774 \uc124\uc815\ub4e4\uc744 ~/.tmux.conf \uc5d0 \ub123\uc73c\uba74 \ub429\ub2c8\ub2e4. Example \ub2e4\uc74c\uc740 \ud14c\ub9c8\ub97c \uc124\uc815\ud558\uae30 \uc804\uc758 \uc624\ub9ac\uc9c0\ub110 tmux \uc758 \ud14c\ub9c8\uc785\ub2c8\ub2e4. \uc0c1\ud0dc\ubc14\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\uace0, \uc0c8 \ud654\uba74\uc744 \ub9cc\ub4e4\uc5c8\uc9c0\ub9cc \ud55c \ub208\uc5d0 \ub4e4\uc5b4\uc624\uc9c0\uac00 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ub978\ucabd\uc5d0 \uc2dc\uac04\ub3c4 \ud45c\uc2dc\ub418\ub294\ub370 \uc5ed\uc2dc \ud55c \ub208\uc5d0 \ub4e4\uc5b4\uc624\uc9c0 \uc54a\ub124\uc694. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uacfc \uac19\uc774 \ud14c\ub9c8\ub97c \ubc14\uafd4\uc11c \uac00\ub3c5\uc131\uc744 \ud655\uc5f0\ud788 \ub192\ud614\uc2b5\ub2c8\ub2e4. \uc0c1\ud0dc\ubc14\uac00 \uc704\ub85c \uc62c\ub77c\uac14\uace0, \uc67c\ucabd\uc5d0\ub294 \uc2dc\uac04\uc774 \uac04\ub7b5\ud558\uc9c0\ub9cc \ub208\uc5d0 \ud655 \ub4e4\uc5b4\uc624\uac8c \ubcf4\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 0 \ubc88\uc9f8 \ud654\uba74\uc5d0\ub294 zsh \uc774 \ucf1c\uc838\uc788\uace0, 1 \ubc88\uc9f8 \ud654\uba74\uc5d0\ub294 vim \uc774 \ucf1c\uc838\uc788\ub294\ub370 \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 \ud654\uba74\uc5d0 \ud558\uc774\ub77c\uc774\ud305\uc774 \ub418\uc11c \uac00\ub3c5\uc131\uc774 \ub9e4\uc6b0 \ub192\uc544\uc9d1\ub2c8\ub2e4. \uc624\ub978\ucabd\uc5d0\ub294 \uc6b4\uc601\uccb4\uc81c\uc758 \uc774\ub984\ub3c4 \ub098\ud0c0\ub0a9\ub2c8\ub2e4.","title":"\ub354 \uc774\ubed0\uc9c4 \ud14c\ub9c8"},{"location":"dev/cli/tmux/#_2","text":"\uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 Meta \ud0a4 Ctrl + b Ctrl + a tmux \ub294 Meta \ud0a4 \ub97c \uc0ac\uc6a9\ud558\uc5ec \uba85\ub839\uc5b4\ub4e4\uc744 \uc815\uc758\ud558\uae30 \ub54c\ubb38\uc5d0 Ctrl + b \ub97c \uc785\ub825\ud588\uc5b4\uc57c \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Ctrl \uc640 b \ub294 \uac70\ub9ac\uac00 \ub108\ubb34 \uba40\uc5b4\uc11c \uc190\uc774 \uc544\ud515\ub2c8\ub2e4. \uadf8\ub798\uc11c ~/.tmux.conf \uc5d0 unbind C-b set-option -g prefix C-a bind-key C-a send-prefix \ub97c \ucd94\uac00\ud558\uc5ec \uac70\ub9ac\uac00 \uac00\uae4c\uc6b4 Ctrl + a \ub85c Meta \ud0a4\ub97c \uc7ac\uc124\uc815\ud569\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108\uc5d0\ub294 \uc774\ubbf8 \uc124\uc815 \ub418\uc5b4\uc788\uc73c\ub2c8 \uac71\uc815\ud558\uc9c0 \ub9c8\uc138\uc694. Info \uc55e\uc73c\ub85c \uc0b4\ud3b4\ubcfc tmux \uc5c5\uadf8\ub808\uc774\ub4dc\ub4e4\ub3c4 \uc704\uc640 \uac19\uc740 \uc124\uc815 \ud30c\uc77c\uc744 \uc870\uc791\ud558\ub294 \uac83\uc73c\ub85c \uc774\ub8e8\uc5b4\uc84c\uc9c0\ub9cc, \uc77c\uc77c\uc774 \uc5b4\ub5a4 \uc124\uc815\uc73c\ub85c tmux \uac00 \uc5c5\uadf8\ub808\uc774\ub4dc\ub418\uc5c8\ub294\uc9c0 \uc0c1\uc138\ud788 \uc124\uba85\ud558\uc9c0\ub294 \uc54a\uaca0\uc2b5\ub2c8\ub2e4. .tmux.conf \ub97c \ubcf4\uc2dc\ub824\uba74 .tmux.conf \ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.","title":"\ub354 \ube68\ub77c\uc9c4 \uba54\ud0c0 \ud0a4"},{"location":"dev/cli/tmux/#_3","text":"\uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \ud130\ubbf8\ub110 \uc218\uc9c1 \ubd84\ud560 Meta + % Meta + \u29f5 \ud130\ubbf8\ub110 \uc218\ud3c9 \ubd84\ud560 Meta + \" Meta + - \ub2e4\uc74c \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 Meta + o Alt + o (\uc22b\uc790) \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 Meta + q + (\uc22b\uc790) tmux \uc5d0\uc11c \ud130\ubbf8\ub110\uc744 \uc218\ud3c9\uc73c\ub85c \ubd84\ud560\ud558\ub824\uba74 \uae30\uc874\uc758 \uba85\ub839\uc5b4 Meta + \" \ub97c \uc785\ub825\ud574\uc57c \ud558\ub294\ub370 \uc774\uac74 \uc678\uc6b0\uae30\uac00 \ub108\ubb34 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc678\uc6b0\uae30 \uc27d\ub3c4\ub85d \uc218\ud3c9\uc73c\ub85c \ub098\ub208\ub2e4\ub294 \uc758\ubbf8\uc5d0\uc11c Meta + - \ub85c \uc9c1\uad00\uc801\uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4. \ub610\ud55c \ud130\ubbf8\ub110\uc744 \uc218\uc9c1\uc73c\ub85c \ubd84\ud560\ud558\ub824\uba74 \uae30\uc874\uc758 \uba85\ub839\uc5b4 Meta + % \ub97c \uc785\ub825\ud574\uc57c \ud558\ub294\ub370 \uc774\uac83 \uc5ed\uc2dc \uc678\uc6b0\uae30\uac00 \ub108\ubb34 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc678\uc6b0\uae30 \uc27d\ub3c4\ub85d \uc218\uc9c1\uc73c\ub85c \ub098\ub208\ub2e4\ub294 \uc758\ubbf8\uc5d0\uc11c \ubc31\uc2ac\ub798\uc26c\ub85c \ubc14\uafd4\uc11c Meta + \u29f5 \ub85c \uc9c1\uad00\uc801\uc778 \ub2e8\ucd95\ud0a4\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud558\ub294 \ub2e8\ucd95\ud0a4 Meta + o \ub294 \uc2e4\uc81c\ub85c ( Ctrl + a ) + o \uc778\ub370, \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud558\ub294 \uc791\uc5c5\uc740 \ub9e4\uc6b0 \ub9ce\uc774 \uc77c\uc5b4\ub098\ubbc0\ub85c \ud0a4\ub97c 3 \ubc88\uc774\ub098 \ub20c\ub7ec\uc57c \ud558\ub294 \uac83\uc740 \ub108\ubb34 \ube44\ud6a8\uc728\uc801\uc774\uc5b4\uc11c \ucc38\uc744 \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c Alt + o \ub85c \ubc14\uafc9\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110\uc744 \uc218\uc9c1, \uc218\ud3c9\uc73c\ub85c \uc5ec\ub7ec\ubc88 \ubd84\ud560\ud574\ubcf4\uace0 Alt \ub97c \uacc4\uc18d \ub204\ub978 \ucc44\ub85c o \ub97c \ub20c\ub7ec\uc11c \ud130\ubbf8\ub110\uc744 \uc774\ub3d9\ud574\ubcf4\uc138\uc694. \ud130\ubbf8\ub110 \uc774\ub3d9\uc774 \uc815\ub9d0 \ube68\ub77c\uc84c\uc2b5\ub2c8\ub2e4.","title":"\ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ubd84\ud560"},{"location":"dev/cli/tmux/#_4","text":"\uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ud654\uba74 \uc0dd\uc131 Meta + c Alt + c \ub2e4\uc74c \ud654\uba74\uc73c\ub85c \uc774\ub3d9 Meta + n Alt + n \uc774\uc804 \ud654\uba74\uc73c\ub85c \uc774\ub3d9 Meta + p Alt + p \uc0c8\ub85c\uc6b4 \ud654\uba74\uc744 \uc0dd\uc131\ud558\uace0 \ud654\uba74\uc744 \ub118\uae30\ub294 \uc77c\ub3c4 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud558\uc5ec Meta \ud0a4 \ub300\uc2e0 Alt \ub97c \uc0ac\uc6a9\ud569\uc2dc\ub2e4. \uba54\ud0c0\ud0a4\ub97c Alt \ud0a4\ub85c \ubc14\uafb8\ub294 \uac83\ub9cc\uc73c\ub85c \uc5bc\ub9c8\ub098 \uc791\uc5c5\uc774 \ube68\ub77c\uc9c0\ub294\uc9c0 \ubcf4\uc138\uc694. Example \ub2e4\uc74c\uacfc \uac19\uc774 Alt \ub97c \uacc4\uc18d \ub204\ub978\ucc44\ub85c c \ub97c \uc5f0\ud0c0\ud574\uc11c \ud654\uba74\uc744 \ub354\uc6b1 \ube60\ub974\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc5ec\ub7ec \ud654\uba74\uc744 \ub9c8\ucc2c\uac00\uc9c0\ub85c Alt \ub97c \uacc4\uc18d \ub204\ub978\ucc44\ub85c n \ub610\ub294 p \ub97c \ub204\ub974\uba74\uc11c \uc774\ub3d9\ud574\ubcf4\uc138\uc694.","title":"\ub354 \ube68\ub77c\uc9c4 \ud654\uba74 \uc0dd\uc131"},{"location":"dev/cli/tmux/#_5","text":"\uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \uc67c\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + h \uc624\ub978\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + l \uc704\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + k \uc544\ub798\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + j \ud130\ubbf8\ub110 \uc774\ub3d9\uc744 Alt + o \ub85c \ub9e4\uc6b0 \ube60\ub974\uac8c \ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc9c0\ub9cc\uc11c\ub3c4 \ud130\ubbf8\ub110\uc774 \uc5ec\ub7ec\uac1c\ub85c \ub098\ub258\uc5c8\uc744 \ub54c Alt + o \ub85c \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c\ubc16\uc5d0 \uc774\ub3d9\ud560 \uc218 \uc5c6\ub2e4\uba74, \uc815\ud655\ud788 \uc6d0\ud558\ub294 \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub97c \uc704\ud558\uc5ec tmux \ub294 \uc815\ud655\ud788 \uc67c\ucabd, \uc624\ub978\ucabd, \uc704\ucabd, \uc544\ub798\ucabd \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uba85\ub839\uc5b4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac74 \ub108\ubb34 \ubcf5\uc7a1\ud588\uc5c8\uace0 \uadf8\uac8c \ubb50\uc600\ub294\uc9c0 \uc194\uc9c1\ud788 \uae4c\uba39\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \ub300\uc2e0 vim \uc5d0\uc11c\uc758 \ucee4\uc11c \uc774\ub3d9\ud0a4\uc600\ub358 h , l , k , j \uc5d0\uc11c \ucc29\uc548\ud558\uc5ec \ud130\ubbf8\ub110 \uc774\ub3d9\uc744 \ub9e4\uc6b0 \uc27d\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110\uc744 \uc5ec\ub7ec\uac1c\ub85c \ubd84\ud560\ud558\uace0 Alt \ub97c \ub204\ub978\ucc44\ub85c h , l , k , j \ub97c \ub204\ub974\uba74\uc11c \ud130\ubbf8\ub110\uc744 \uc774\ub3d9\ud574\ubcf4\uc138\uc694.","title":"\ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \uc774\ub3d9"},{"location":"dev/cli/tmux/#_6","text":"\uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc67c\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2190 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc624\ub978\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2192 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc704\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2191 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc544\ub798\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2193 \ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\uc774\ub77c\uace0 \ud574\ubd10\uc57c \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b0\uc9c0\ub3c4 \uc54a\uc558\ub294\ub370 \ub77c\uace0 \uc0dd\uac01\ud560 \uc218\ub3c4 \uc788\uaca0\uc9c0\ub9cc, \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\ud558\ub294 \ubc29\ubc95\uc774 \uc678\uc6b8 \uc218 \uc5c6\uc744 \ub9cc\ud07c \ub108\ubb34 \ubcf5\uc7a1\ud55c \uac83\uc774\uc5b4\uc11c \uc548\uc37c\uc2b5\ub2c8\ub2e4. \uacfc\uac70\uc758 \uc81c\uac00 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \ub108\ubb34\ub108\ubb34 \uc27d\uac8c \uc870\uc808\ud560 \uc218 \uc788\ub3c4\ub85d \uc704\uc640 \uac19\uc774 \uc124\uc815\ud574\ub193\uc558\uc2b5\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110 \ub2e8\ucd95\ud0a4 Alt \ub97c \uacc4\uc18d \ub204\ub978 \ucc44\ub85c \u2192 , \u2190 , \u2191 , \u2193 \uc744 \ub20c\ub7ec\uc11c \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \ub108\ubb34\ub098\ub3c4 \uc27d\uac8c \uc870\uc808\ud574\ubcf4\uc138\uc694.","title":"\ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808"},{"location":"dev/cli/tmux/#tmux_2","text":"\ub2e4\uc74c\uc740 tmux \ub97c \ud1b5\ud558\uc5ec nvtop \uacfc gotop \uc73c\ub85c GPU \uc0c1\ud669\uacfc CPU, RAM \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\uba74\uc11c \ub525\ub7ec\ub2dd\uc744 \ub3cc\ub9ac\uace0 \uc788\ub294 \ubaa8\uc2b5\uc785\ub2c8\ub2e4. nvtop \uacfc gotop \uc73c\ub85c \uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1 \ud558\uba74\uc11c \ub525\ub7ec\ub2dd\ud558\ub294 \ubaa8\uc2b5","title":"tmux \uc0ac\uc6a9 \uc608\uc2dc"},{"location":"dev/cli/zsh/","text":"bash \u279c zsh - \ub354 \ube68\ub77c\uc9c4 \uc258 \u00b6 zsh \uc740 \uc218\ub9ce\uc740 \ud50c\ub7ec\uadf8\uc778\uacfc \ud14c\ub9c8\uac00 \uc9c0\uc6d0\ub418\ub294 \uc258\uc785\ub2c8\ub2e4. \uc774\uc81c bash \uc258\uc744 \uadf8\ub9cc \uc4f0\uace0 zsh \uc744 \uc0ac\uc6a9\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. zsh \uc740 oh-my-zsh \uc744 \uc124\uce58\ud574\uc57c\ub9cc \uadf8 \uc9c4\uac00\ub97c \ubc1c\ud718\ud558\ub294\ub370, \uadf8 \uc124\uce58\ubc95\uc740 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \uc774\ubbf8 \uc124\uba85\ud588\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 zsh \uc744 \uc0ac\uc6a9\ud558\uba74 \uc5bc\ub9c8\ub098 \uc0dd\uc0b0\uc131\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0\ub9cc \uac00\ubccd\uac8c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ud14c\ub9c8 \u00b6 zsh \uc740 \uc815\ub9d0 \uc218\ub9ce\uc740 \ud14c\ub9c8\ub97c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. Tip https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes \uc5d0 \ub4e4\uc5b4\uac00\uc11c \ub9c8\uc74c\uc5d0 \ub4dc\ub294 \ud14c\ub9c8\uac00 \uc788\ub294\uc9c0 \ubcfc \uc218 \uc788\uc5b4\uc694. \uc81c\uac00 \ubcf4\uc5ec\ub4dc\ub9b4 zsh \ud14c\ub9c8\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 alien-minimal \uc785\ub2c8\ub2e4. zsh \uae30\ubcf8 \uae30\ub2a5 \u00b6 zsh \ud14c\ub9c8\ub294 \ub2e8\uc21c\ud788 bash \uc258 \ud504\ub86c\ud504\ud2b8\ubcf4\ub2e4 \ub354 \uba4b\uc788\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uac83\ub3c4 \uc788\uc9c0\ub9cc \uc218\ub9ce\uc740 \uae30\ub2a5\ub4e4\ub3c4 \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8 \uc218\ub9ce\uc740 \uae30\ub2a5 \uc911 \ub2e4\uc74c \ub450 \uac00\uc9c0 \uae30\ub2a5\ub9cc \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 git \ube0c\ub79c\uce58\ub97c \ud504\ub86c\ud504\ud2b8\uc5d0 \ubcf4\uc5ec\uc900\ub2e4. \uc704\uc640 \uac19\uc774 \ud504\ub86c\ud504\ud2b8 \uc6b0\uce21\uc5d0 master \uac00 dev \ub85c \ubc14\ub00c\uace0 \ub2e4\uc2dc master \ub85c \ubc14\ub00c\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c git \uc73c\ub85c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uad00\ub9ac\ud558\ub2e4\uac00 \uc2e4\ud5d8\uc801\uc778 \uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud574\uc57c \ud574\uc11c \uc0c8\ub85c\uc6b4 branch \uc778 dev \ub97c \ub9cc\ub4e4\uace0 \uc774\uc8fc\ud588\uc744 \ub54c, zsh \uc758 \ud504\ub86c\ud504\ud2b8\uac00 \uc6b0\uce21\uc5d0 \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 branch \uc815\ubcf4\ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub9e4\ubc88 git branch \ub97c \uc785\ub825\ud558\uc5ec \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 branch \uac00 \uc5b4\ub5a4 \uac74\uc9c0 \ud655\uc778\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc758 \ub9ac\ud134\uac12\uc774 \uc815\uc0c1\uac12 0 \uc774 \uc544\ub2d0\uacbd\uc6b0 \ud504\ub86c\ud504\ud2b8\uc5d0 \ubcf4\uc5ec\uc900\ub2e4. \uc704\uc640 \uac19\uc774 ls \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc 0 \uac00 \ubc18\ud658\ub418\uc9c0\ub9cc \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 lss \uac00 \uc785\ub825\ub418\uba74 \ube44\uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc 127 \uc774 \ubc18\ud658\ub429\ub2c8\ub2e4. zsh \ud504\ub86c\ud504\ud2b8\ub294 \uadf8\ub7ec\ud55c \ube44\uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc\ub97c \ubcf4\uc5ec\uc8fc\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc885\ub8cc\ub418\uc5c8\uc744 \ub54c \ud504\ub86c\ud504\ud2b8 \uc0c9\uae54\uc744 \ub2e4\ub978 \uc0c9\uae54\ub85c \ubc14\uafd4\uc90d\ub2c8\ub2e4. tab-completion \uae30\ub2a5 \u00b6 \uc774 \uae30\ub2a5\uc740 \uba85\ub839\uc5b4\uc758 \ubd80\ubd84\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub20c\ub800\uc744 \ub54c zsh \uc774 \uc54c\uc544\uc11c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\ub294 \uae30\ub2a5\uc785\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 cd \ub9cc \ub204\ub974\uace0 Tab \uc744 \ub204\ub974\uba74 \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\uc744 \ud574\uc8fc\uace0, cd \ub97c \uc120\ud0dd\ud558\uace0 \ub2e4\uc2dc Tab \uc744 \ub204\ub974\ub2c8\uae4c \uc774\ub3d9\ud560 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ucd94\ucc9c\ud574\uc90d\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \ud574\uc57c \ud560 \uc77c\uc740 \ub2e8\uc9c0 Enter \ub97c \ub204\ub974\ub294 \uac83 \ubfd0\uc774\uc8e0. \ub2e4\uc74c\uacfc \uac19\uc774 \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac\ub9cc \uc785\ub825\ud558\uace0 \ub098\uc11c Tab \uc744 \ub204\ub974\uba74 \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\ub97c \ucd94\ucc9c\ud574\uc90d\ub2c8\ub2e4. auto-completion \uae30\ub2a5 \u00b6 \uc774 \uae30\ub2a5\uc740 \uc0ac\uc6a9\uc790\uac00 \uae38\uace0 \ubcf5\uc7a1\ud55c \uacbd\ub85c\ub97c \uc774\ub3d9\ud574\uc57c \ud560\ub54c \uadf8\uac83\uc744 \ud2b9\uc815\ud560 \uc218 \uc788\ub294 \ubb38\uc790\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub204\ub974\uba74 \uc790\ub3d9\uc73c\ub85c \uc644\uc131\ud574\uc8fc\ub294 zsh \uc758 \uae30\ub2a5\uc785\ub2c8\ub2e4. /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \uc758 \uacbd\ub85c\ub85c \uc774\ub3d9\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\ub77c\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. $ cd /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \ud558\uc9c0\ub9cc \uc774\uac74 \ub108\ubb34 \uae38\uc5b4\uc11c \uc9dc\uc99d\ub098\uc11c \uacac\ub51c \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub204\ub985\ub2c8\ub2e4. $ cd /u/l/g/x/9 \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 zsh \uc774 \uacbd\ub85c\ub97c \uc9c0\uac00 \uc54c\uc544\uc11c \uc644\uc131\uc2dc\ucf1c \uc90d\ub2c8\ub2e4. z \uba85\ub839\uc5b4 \u00b6 z \uba85\ub839\uc5b4\ub294 \uc0ac\uc6a9\uc790\uac00 \uc790\uc8fc \uc774\ub3d9\ud558\ub294 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\uc758 \ud1b5\uacc4\ub97c \ub0b4\uc5b4\uc11c \uc0ac\uc6a9\uc790\uac00 \uc774\ub3d9\ud558\ub294 \uacbd\ub85c\ub97c \ud2b9\uc815\ud560 \uc218 \uc788\ub294 \uc9e7\uc740 \uacbd\ub85c\ub9cc \uc785\ub825\ud574\ub3c4 \uc774\ub3d9\ud560 \uc218 \uc788\uac8c\ub054 \ud574\uc8fc\ub294 \ub108\ubb34\ub108\ubb34 \ud3b8\ub9ac \ud55c zsh \ud50c\ub7ec\uadf8\uc778\uc785\ub2c8\ub2e4. \ub2e8 z \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubc18\ub4dc\uc2dc \ud55c \ubc88 \uc774\uc0c1\uc740 \uadf8 \uacbd\ub85c\ub85c \uc774\ub3d9\ud55c \uc801\uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 z \uc774 \uc0ac\uc6a9\uc790\uac00 \uc774\ub3d9\ud55c \uacbd\ub85c\ub97c \ubd84\uc11d\ud558\uace0 \ud1b5\uacc4\ub97c \ub0bc \uae30\ud68c\ub97c \uc918\uc57c\ud558\uae30 \ub54c\ubb38\uc774\uc8e0. \ubc29\uae08 \uc804\uc5d0 /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \ub77c\ub294 \uacbd\ub85c\ub85c \uc774\ub3d9\ud588\uc5c8\uc73c\ub2c8\uae4c \uc774 \uacbd\ub85c\ub97c \uc544\ub9c8\ub3c4 9 \uc774 \ud2b9\uc815\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc73c\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\ubd05\ub2c8\ub2e4. $ z 9 \uc2e4\ud589 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. auto-suggestions \uae30\ub2a5 \u00b6 \uc774 \uae30\ub2a5\uc740 \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \uc2e4\ud589\ud55c \uba85\ub839\uc5b4\ub97c \uae30\uc5b5\ud558\uc5ec \uc0ac\uc6a9\uc790\uac00 \uadf8 \uba85\ub839\uc5b4\uc640 \ube44\uc2b7\ud55c \ud0c0\uc790\ub97c \uce5c\ub2e4\uba74 \uc790\ub3d9\uc73c\ub85c \uc644\uc131\ub41c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\ub294 zsh \ud50c\ub7ec\uadf8\uc778\uc785\ub2c8\ub2e4. \uc774 \uae30\ub2a5\uc740 \uae34 \uba85\ub839\uc5b4\ub97c \ubc18\ubcf5\ud574\uc57c \ud560 \ub54c \ub108\ubb34 \ud3b8\ud569 \ub2c8\ub2e4. \uc0ac\uc6a9\ubc95\ub3c4 \ub9e4\uc6b0 \uac04\ub2e8\ud569\ub2c8\ub2e4. \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\ub2e4 \ubcf4\uba74 auto-suggestions \uc774 \ud76c\ubbf8\ud55c \uae00\uc528\ub85c \uc644\uc131\ub41c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud558\ub294\ub370 \uadf8\uac83\uc744 \uc2e4\ud589\ud558\uae38 \uc6d0\ud588\ub2e4\uba74 \u2192 \ub97c \ub20c\ub7ec\uc11c \uba85\ub839\uc5b4\ub97c \uc644\uc131\uc2dc\ud0a4\uba74 \ub429\ub2c8\ub2e4. \ub9cc\uc57d auto-suggestions \uc774 \ucd94\ucc9c\ud55c \uba85\ub839\uc5b4 \uc804\ubd80\ub97c \uc6d0\ud558\uc9c0 \uc54a\uace0 \ubd80\ubd84\uc801\uc778 \uac83\ub9cc \uc6d0\ud55c\ub2e4\uba74 Ctrl + \u2192 \ub97c \ub204\ub974\uba74 \ub429\ub2c8\ub2e4. \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108\ub97c \uc5ec\ub7ec\ubc88 \uc885\ub8cc\ud588\ub2e4\uac00 \uc7ac\uc2dc\uc791\ud588\uc5b4\uc57c\ub9cc \ud588\ub2e4\uba74 docker start -ai b \uc640 \uac19\uc740 \uba85\ub839\uc5b4\ub97c \ubc18\ubcf5\uc801\uc73c\ub85c \uc785\ub825\ud588\uc57c \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uacfc \uac19\uc774 auto-suggestions \uc774 \ubc18\ubcf5\ub418\ub294 \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\uae30 \ub54c\ubb38\uc5d0 \ub9e4\ubc88 \uc785\ub825\ud560 \ud544\uc694 \uc5c6\uc774 d \ub9cc \ub204\ub974\uace0 \u2192 \ub97c \ub204\ub974\uba74 \ub429\ub2c8\ub2e4. docker start -ai b \uc744 \uc77c\uc77c\uc774 \ub2e4 \uc785\ub825\ud574\uc57c \ud558\ub294 \uac83\uacfc \ube44\uad50\ud574\ubd05\ub2c8\ub2e4.","title":"zsh"},{"location":"dev/cli/zsh/#bash-zsh-","text":"zsh \uc740 \uc218\ub9ce\uc740 \ud50c\ub7ec\uadf8\uc778\uacfc \ud14c\ub9c8\uac00 \uc9c0\uc6d0\ub418\ub294 \uc258\uc785\ub2c8\ub2e4. \uc774\uc81c bash \uc258\uc744 \uadf8\ub9cc \uc4f0\uace0 zsh \uc744 \uc0ac\uc6a9\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. zsh \uc740 oh-my-zsh \uc744 \uc124\uce58\ud574\uc57c\ub9cc \uadf8 \uc9c4\uac00\ub97c \ubc1c\ud718\ud558\ub294\ub370, \uadf8 \uc124\uce58\ubc95\uc740 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \uc774\ubbf8 \uc124\uba85\ud588\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 zsh \uc744 \uc0ac\uc6a9\ud558\uba74 \uc5bc\ub9c8\ub098 \uc0dd\uc0b0\uc131\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0\ub9cc \uac00\ubccd\uac8c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"bash \u279c zsh - \ub354 \ube68\ub77c\uc9c4 \uc258"},{"location":"dev/cli/zsh/#_1","text":"zsh \uc740 \uc815\ub9d0 \uc218\ub9ce\uc740 \ud14c\ub9c8\ub97c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. Tip https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes \uc5d0 \ub4e4\uc5b4\uac00\uc11c \ub9c8\uc74c\uc5d0 \ub4dc\ub294 \ud14c\ub9c8\uac00 \uc788\ub294\uc9c0 \ubcfc \uc218 \uc788\uc5b4\uc694. \uc81c\uac00 \ubcf4\uc5ec\ub4dc\ub9b4 zsh \ud14c\ub9c8\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 alien-minimal \uc785\ub2c8\ub2e4.","title":"\ud14c\ub9c8"},{"location":"dev/cli/zsh/#zsh","text":"zsh \ud14c\ub9c8\ub294 \ub2e8\uc21c\ud788 bash \uc258 \ud504\ub86c\ud504\ud2b8\ubcf4\ub2e4 \ub354 \uba4b\uc788\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uac83\ub3c4 \uc788\uc9c0\ub9cc \uc218\ub9ce\uc740 \uae30\ub2a5\ub4e4\ub3c4 \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8 \uc218\ub9ce\uc740 \uae30\ub2a5 \uc911 \ub2e4\uc74c \ub450 \uac00\uc9c0 \uae30\ub2a5\ub9cc \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 git \ube0c\ub79c\uce58\ub97c \ud504\ub86c\ud504\ud2b8\uc5d0 \ubcf4\uc5ec\uc900\ub2e4. \uc704\uc640 \uac19\uc774 \ud504\ub86c\ud504\ud2b8 \uc6b0\uce21\uc5d0 master \uac00 dev \ub85c \ubc14\ub00c\uace0 \ub2e4\uc2dc master \ub85c \ubc14\ub00c\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c git \uc73c\ub85c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uad00\ub9ac\ud558\ub2e4\uac00 \uc2e4\ud5d8\uc801\uc778 \uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud574\uc57c \ud574\uc11c \uc0c8\ub85c\uc6b4 branch \uc778 dev \ub97c \ub9cc\ub4e4\uace0 \uc774\uc8fc\ud588\uc744 \ub54c, zsh \uc758 \ud504\ub86c\ud504\ud2b8\uac00 \uc6b0\uce21\uc5d0 \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 branch \uc815\ubcf4\ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub9e4\ubc88 git branch \ub97c \uc785\ub825\ud558\uc5ec \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 branch \uac00 \uc5b4\ub5a4 \uac74\uc9c0 \ud655\uc778\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc758 \ub9ac\ud134\uac12\uc774 \uc815\uc0c1\uac12 0 \uc774 \uc544\ub2d0\uacbd\uc6b0 \ud504\ub86c\ud504\ud2b8\uc5d0 \ubcf4\uc5ec\uc900\ub2e4. \uc704\uc640 \uac19\uc774 ls \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc 0 \uac00 \ubc18\ud658\ub418\uc9c0\ub9cc \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 lss \uac00 \uc785\ub825\ub418\uba74 \ube44\uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc 127 \uc774 \ubc18\ud658\ub429\ub2c8\ub2e4. zsh \ud504\ub86c\ud504\ud2b8\ub294 \uadf8\ub7ec\ud55c \ube44\uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc\ub97c \ubcf4\uc5ec\uc8fc\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc885\ub8cc\ub418\uc5c8\uc744 \ub54c \ud504\ub86c\ud504\ud2b8 \uc0c9\uae54\uc744 \ub2e4\ub978 \uc0c9\uae54\ub85c \ubc14\uafd4\uc90d\ub2c8\ub2e4.","title":"zsh \uae30\ubcf8 \uae30\ub2a5"},{"location":"dev/cli/zsh/#tab-completion","text":"\uc774 \uae30\ub2a5\uc740 \uba85\ub839\uc5b4\uc758 \ubd80\ubd84\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub20c\ub800\uc744 \ub54c zsh \uc774 \uc54c\uc544\uc11c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\ub294 \uae30\ub2a5\uc785\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 cd \ub9cc \ub204\ub974\uace0 Tab \uc744 \ub204\ub974\uba74 \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\uc744 \ud574\uc8fc\uace0, cd \ub97c \uc120\ud0dd\ud558\uace0 \ub2e4\uc2dc Tab \uc744 \ub204\ub974\ub2c8\uae4c \uc774\ub3d9\ud560 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ucd94\ucc9c\ud574\uc90d\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \ud574\uc57c \ud560 \uc77c\uc740 \ub2e8\uc9c0 Enter \ub97c \ub204\ub974\ub294 \uac83 \ubfd0\uc774\uc8e0. \ub2e4\uc74c\uacfc \uac19\uc774 \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac\ub9cc \uc785\ub825\ud558\uace0 \ub098\uc11c Tab \uc744 \ub204\ub974\uba74 \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\ub97c \ucd94\ucc9c\ud574\uc90d\ub2c8\ub2e4.","title":"tab-completion \uae30\ub2a5"},{"location":"dev/cli/zsh/#auto-completion","text":"\uc774 \uae30\ub2a5\uc740 \uc0ac\uc6a9\uc790\uac00 \uae38\uace0 \ubcf5\uc7a1\ud55c \uacbd\ub85c\ub97c \uc774\ub3d9\ud574\uc57c \ud560\ub54c \uadf8\uac83\uc744 \ud2b9\uc815\ud560 \uc218 \uc788\ub294 \ubb38\uc790\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub204\ub974\uba74 \uc790\ub3d9\uc73c\ub85c \uc644\uc131\ud574\uc8fc\ub294 zsh \uc758 \uae30\ub2a5\uc785\ub2c8\ub2e4. /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \uc758 \uacbd\ub85c\ub85c \uc774\ub3d9\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\ub77c\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. $ cd /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \ud558\uc9c0\ub9cc \uc774\uac74 \ub108\ubb34 \uae38\uc5b4\uc11c \uc9dc\uc99d\ub098\uc11c \uacac\ub51c \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub204\ub985\ub2c8\ub2e4. $ cd /u/l/g/x/9 \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 zsh \uc774 \uacbd\ub85c\ub97c \uc9c0\uac00 \uc54c\uc544\uc11c \uc644\uc131\uc2dc\ucf1c \uc90d\ub2c8\ub2e4.","title":"auto-completion \uae30\ub2a5"},{"location":"dev/cli/zsh/#z","text":"z \uba85\ub839\uc5b4\ub294 \uc0ac\uc6a9\uc790\uac00 \uc790\uc8fc \uc774\ub3d9\ud558\ub294 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\uc758 \ud1b5\uacc4\ub97c \ub0b4\uc5b4\uc11c \uc0ac\uc6a9\uc790\uac00 \uc774\ub3d9\ud558\ub294 \uacbd\ub85c\ub97c \ud2b9\uc815\ud560 \uc218 \uc788\ub294 \uc9e7\uc740 \uacbd\ub85c\ub9cc \uc785\ub825\ud574\ub3c4 \uc774\ub3d9\ud560 \uc218 \uc788\uac8c\ub054 \ud574\uc8fc\ub294 \ub108\ubb34\ub108\ubb34 \ud3b8\ub9ac \ud55c zsh \ud50c\ub7ec\uadf8\uc778\uc785\ub2c8\ub2e4. \ub2e8 z \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubc18\ub4dc\uc2dc \ud55c \ubc88 \uc774\uc0c1\uc740 \uadf8 \uacbd\ub85c\ub85c \uc774\ub3d9\ud55c \uc801\uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 z \uc774 \uc0ac\uc6a9\uc790\uac00 \uc774\ub3d9\ud55c \uacbd\ub85c\ub97c \ubd84\uc11d\ud558\uace0 \ud1b5\uacc4\ub97c \ub0bc \uae30\ud68c\ub97c \uc918\uc57c\ud558\uae30 \ub54c\ubb38\uc774\uc8e0. \ubc29\uae08 \uc804\uc5d0 /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \ub77c\ub294 \uacbd\ub85c\ub85c \uc774\ub3d9\ud588\uc5c8\uc73c\ub2c8\uae4c \uc774 \uacbd\ub85c\ub97c \uc544\ub9c8\ub3c4 9 \uc774 \ud2b9\uc815\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc73c\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\ubd05\ub2c8\ub2e4. $ z 9 \uc2e4\ud589 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.","title":"z \uba85\ub839\uc5b4"},{"location":"dev/cli/zsh/#auto-suggestions","text":"\uc774 \uae30\ub2a5\uc740 \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \uc2e4\ud589\ud55c \uba85\ub839\uc5b4\ub97c \uae30\uc5b5\ud558\uc5ec \uc0ac\uc6a9\uc790\uac00 \uadf8 \uba85\ub839\uc5b4\uc640 \ube44\uc2b7\ud55c \ud0c0\uc790\ub97c \uce5c\ub2e4\uba74 \uc790\ub3d9\uc73c\ub85c \uc644\uc131\ub41c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\ub294 zsh \ud50c\ub7ec\uadf8\uc778\uc785\ub2c8\ub2e4. \uc774 \uae30\ub2a5\uc740 \uae34 \uba85\ub839\uc5b4\ub97c \ubc18\ubcf5\ud574\uc57c \ud560 \ub54c \ub108\ubb34 \ud3b8\ud569 \ub2c8\ub2e4. \uc0ac\uc6a9\ubc95\ub3c4 \ub9e4\uc6b0 \uac04\ub2e8\ud569\ub2c8\ub2e4. \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\ub2e4 \ubcf4\uba74 auto-suggestions \uc774 \ud76c\ubbf8\ud55c \uae00\uc528\ub85c \uc644\uc131\ub41c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud558\ub294\ub370 \uadf8\uac83\uc744 \uc2e4\ud589\ud558\uae38 \uc6d0\ud588\ub2e4\uba74 \u2192 \ub97c \ub20c\ub7ec\uc11c \uba85\ub839\uc5b4\ub97c \uc644\uc131\uc2dc\ud0a4\uba74 \ub429\ub2c8\ub2e4. \ub9cc\uc57d auto-suggestions \uc774 \ucd94\ucc9c\ud55c \uba85\ub839\uc5b4 \uc804\ubd80\ub97c \uc6d0\ud558\uc9c0 \uc54a\uace0 \ubd80\ubd84\uc801\uc778 \uac83\ub9cc \uc6d0\ud55c\ub2e4\uba74 Ctrl + \u2192 \ub97c \ub204\ub974\uba74 \ub429\ub2c8\ub2e4. \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108\ub97c \uc5ec\ub7ec\ubc88 \uc885\ub8cc\ud588\ub2e4\uac00 \uc7ac\uc2dc\uc791\ud588\uc5b4\uc57c\ub9cc \ud588\ub2e4\uba74 docker start -ai b \uc640 \uac19\uc740 \uba85\ub839\uc5b4\ub97c \ubc18\ubcf5\uc801\uc73c\ub85c \uc785\ub825\ud588\uc57c \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uacfc \uac19\uc774 auto-suggestions \uc774 \ubc18\ubcf5\ub418\ub294 \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\uae30 \ub54c\ubb38\uc5d0 \ub9e4\ubc88 \uc785\ub825\ud560 \ud544\uc694 \uc5c6\uc774 d \ub9cc \ub204\ub974\uace0 \u2192 \ub97c \ub204\ub974\uba74 \ub429\ub2c8\ub2e4. docker start -ai b \uc744 \uc77c\uc77c\uc774 \ub2e4 \uc785\ub825\ud574\uc57c \ud558\ub294 \uac83\uacfc \ube44\uad50\ud574\ubd05\ub2c8\ub2e4.","title":"auto-suggestions \uae30\ub2a5"},{"location":"dev/makefile/makefile/","text":"makefile \uc740 \ud504\ub85c\uc81d\ud2b8\ub97c \uc790\ub3d9\uc73c\ub85c \ube4c\ub4dc\ud558\uae30 \uc704\ud55c \uaddc\uce59\ub4e4\uc744 \uba85\uc2dc\ud574\uc8fc\uc5b4 make \uba85\ub839\uc5b4\ub85c \uae34 \ucef4\ud30c\uc77c \uba85\ub839\uc5b4\ub4e4\uc744 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc8fc\ub294 \ud30c\uc77c\uc785\ub2c8\ub2e4. Note \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 \uc800\uc758 \ube14\ub85c\uadf8 \ub0b4\uc6a9 \uc744 \ub2e4\uc2dc \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \uc9c0\uae08\ubd80\ud130 \ud559\uc2b5\ud558\uba74\uc11c \uc18c\uac1c\ud574\ub4dc\ub9ac\ub294 \uc608\uc81c \ucf54\ub4dc\ub4e4\uc744 makefile \uc5d0 \uc800\uc7a5\ud558\uace0 make \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\ubcf4\uc138\uc694! \uae30\ubcf8 \uaddc\uce59 \u00b6 Makefile \uc740 \ud504\ub85c\uc81d\ud2b8\ub97c \uc790\ub3d9\uc73c\ub85c \ube4c\ub4dc\ud558\uae30 \uc704\ud55c \uc5ec\ub7ec\uac1c\uc758 \uaddc\uce59\uc73c\ub85c \uad6c\uc131\ub418\ub294\ub370 \uaddc\uce59\uc758 \uc77c\ubc18\uc801 \ubb38\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. targets : prerequisites command command command ... targets : \uaddc\uce59 \uc774\ub984\uc73c\ub85c\uc368 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud30c\uc77c \uc774\ub984\ub4e4\uc774\ub2e4. \ub9cc\ub4e4\uc5b4\uc9c8 \ud30c\uc77c \uc774\ub984\uc744 \ub73b\ud55c\ub2e4. \ubcf4\ud1b5 \uaddc\uce59 \ub2f9 \ud558\ub098\uc758 \ud30c\uc77c\ub9cc \uc788\ub2e4. commands : targets \uc744 \ub9cc\ub4dc\ub294 \uc77c\ub828\uc758 \uba85\ub839\uc5b4\ub4e4\uc774\ub2e4. \uc774 \ubd80\ubd84\uc740 \uacf5\ubc31\uc774 \uc544\ub2cc \ud0ed\uc73c\ub85c \uc2dc\uc791\ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4. prerequisites : \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud30c\uc77c \uc774\ub984\ub4e4\ub85c\uc368 commands \uac00 \uc2e4\ud589\ub418\uae30 \uc704\ud558\uc5ec \ud544\uc694\ud55c \uc758\uc874\uc131 \ud30c\uc77c \ub9ac\uc2a4\ud2b8\ub97c \ub73b\ud55c\ub2e4. Info \ub9cc\uc57d prerequisites \uc5d0\uc11c \uba85\uc2dc\ub41c \ud30c\uc77c\ub4e4 \uc911 \ud558\ub098\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uba3c\uc800 \uadf8 \ud30c\uc77c \uc774\ub984\uc758 \uaddc\uce59\uc744 \ucc3e\uc544\uc11c \uadf8 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc5ec \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \uaddc\uce59 \uc2e4\ud589 \uc21c\uc11c \u00b6 make \uba85\ub839\uc744 \uc778\uc790 \uc5c6\uc774 \uc2e4\ud589\ud558\uba74 Makefile \uc758 \uccab\ubc88\uc9f8 \uaddc\uce59\uc774 \uc2e4\ud589\ub41c\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uccab\ubc88\uc9f8 \uaddc\uce59\uc744 all \ub85c \uc815\ud558\ub294 \uad6d\ub8f0\uc774 \uc788\ub2e4. Example blah : blah . o cc blah.o -o blah blah.o : blah . c cc -c blah.c -o blah.o blah.c : echo \"int main() { return 0; }\" > blah.c clean : rm -f blah.o blah.c blah \uc774\ub7ec\ud55c Makefile \uc758 \uacbd\uc6b0 blah \uac00 \uccab\ubc88\uc9f8 \uaddc\uce59\uc774\ubbc0\ub85c \ub514\ud3f4\ud2b8 \uaddc\uce59\uc774 \ub41c\ub2e4. \uad00\ub840 \u00b6 \ud1b5\uc0c1\uc801\uc73c\ub85c CC \uc5d0 \ucef4\ud30c\uc77c\ub7ec\ub97c, CFLAGS \uc5d0 \ucef4\ud30c\uc77c \uc635\uc158\uc744 \uc800\uc7a5\ud558\uc5ec \uaddc\uce59\uc5d0 \uc0bd\uc785\ud55c\ub2e4. \uaddc\uce59\uc758 targets \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0 \u00b6 make \ub294 \uaddc\uce59\uc758 \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0 \"up to date\" \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\uace0 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. Example some_file : touch some_file \ucc98\uc74c \uc2e4\ud589\ud560 \ub54c\ub294 \uaddc\uce59\uc774 \uc2e4\ud589 \ub418\uc9c0\ub9cc \ud55c\ubc88 \ub354 \uc2e4\ud589\ud558\uba74 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. \ucd95\uc57d\uaddc\uce59 \u00b6 \uc704 \uc608\uc81c\uc758 Makefile \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd95\uc57d\ud560 \uc218 \uc788\ub2e4. some_file : ; touch some_file PHONY \u00b6 .PHONY : targets \uc774 \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uba85\uc2dc\ud55c\ub2e4. make \ub294 \ud6a8\uc728\uc131\uc744 \uc704\ud558\uc5ec targets \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud558\uba74 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. \uadf8\ub7f0\ub370 clean \uc774\ub098 all \uac19\uc740 \uaddc\uce59\uc740 \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc744 \uc9c0\uce6d\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub9cc\uc57d \uc2e4\uc218\ub85c all \ud30c\uc77c\uc774\ub098 clean \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uc600\uc744 \uacbd\uc6b0 all \uc774\ub098 clean \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\ub2e4. \uc774\uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud558\uc5ec .PHONY \uc5d0 targets \uc744 \uba85\uc2dc\ud558\uba74 make \ub294 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \uac80\uc0ac\ud558\uc9c0 \uc54a\uace0 \uaddc\uce59\uc744 \ubb34\uc870\uac74 \uc2e4\ud589\ud55c\ub2e4. Tip \ub610\ud55c \ud30c\uc77c \uc874\uc7ac \uac80\uc0ac\ub97c \ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 .PHONY \ub97c \uc0ac\uc6a9\ud558\uba74 make \uc758 \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub41c\ub2e4. \ub2e4\uc74c\uc758 \uc608\uc2dc\ub97c \uc0b4\ud3b4\ubcf4\uba74\uc11c .PHONY \ub97c \uc774\ud574\ud574\ubd05\uc2dc\ub2e4. Example one : ; touch one clean : ; rm - f one \uc704 \uc608\uc81c\uc758 clean \uaddc\uce59\uc740 \ud30c\uc77c one \uc744 \uc0ad\uc81c\ud558\uae30\ub85c \ub418\uc5b4\uc788\ub2e4. \uadf8\ub7f0\ub370 \ub9cc\uc57d clean \uc774\ub77c\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\uba74 make clean \uc73c\ub85c \uaddc\uce59\uc744 \uc2e4\ud589\ud55c\ub2e4 \ud574\ub3c4 make: 'clean' is up to date. \ub77c\ub294 \uba54\uc138\uc9c0\uac00 \ucd9c\ub825\ub418\uace0 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. one : ; touch one clean : ; rm - f one .PHONY : clean \ub530\ub77c\uc11c .PHONY \uc5d0 clean \uc744 \uba85\uc2dc\ud558\uc5ec \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uba85\uc2dc\ud574\uc900\ub2e4. \uadf8\ub7ec\uba74 clean \ud30c\uc77c\uc774 \uc788\uc5b4\ub3c4 \uaddc\uce59\uc774 \ud56d\uc0c1 \uc2e4\ud589\ub41c\ub2e4. \ubcc0\uc218 \u00b6 \ubb38\uc790\uc5f4\uc744 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uace0 ${} \ub098 $() \ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example files = file1 file2 some_file : $( files ) echo \"Look at this variable: \" $( files ) touch some_file file1 : touch file1 file2 : touch file2 clean : rm -f file1 file2 some_file \ubcc0\uc218 \ud560\ub2f9 var = value : \uc9c0\uc5f0\ub41c \ud560\ub2f9\uc73c\ub85c\uc368 \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub420 \ub54c \uadf8 \uac12\ub4e4\uc774 \uc7ac\uadc0\uc801\uc73c\ub85c \ud560\ub2f9\ub41c\ub2e4. Example foo = $( bar ) bar = $( ugh ) ugh = Huh? all : ; echo $( foo ) \uc774\ub54c foo \uc5d0 \ud560\ub2f9\ub418\ub294 bar \ub294 foo \uac00 \uc120\uc5b8\ub418\ub294 \uc2dc\uc810\uc5d0\uc11c \uc815\uc758\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \ucef4\ud30c\uc77c \uc5d0\ub7ec\uac00 \ub0a0 \uac83 \uac19\ub2e4. \ud558\uc9c0\ub9cc = \ub294 \uc9c0\uc5f0\ub41c \ud560\ub2f9\uc73c\ub85c\uc11c foo \uac00 \uc2e4\uc9c8\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 \ub54c \ucc38\uc870\ub41c \ubaa8\ub4e0 \ubcc0\uc218\ub4e4\uc744 \uc7ac\uadc0\uc801\uc73c\ub85c \ucc3e\uc544\uac00\uba70 \ud560\ub2f9\ud55c\ub2e4. var := value : \uc989\uc2dc \ud560\ub2f9\uc73c\ub85c\uc368 \ubcc0\uc218\uac00 \uc120\uc5b8\ub420 \ub54c \uadf8 \uac12\ub4e4\uc774 \uc7ac\uadc0\uc801\uc73c\ub85c \ud560\ub2f9\ub41c\ub2e4. Example foo := $( bar ) bar := $( ugh ) ugh := Huh? all : ; echo $( foo ) \uc774\uc804 \uc608\uc81c\uc640\ub294 \ub2ec\ub9ac \uc774 \ucf54\ub4dc\ub294 \uc544\ubb34\uac83\ub3c4 \ucd9c\ub825\ud558\uc9c0 \uc54a\ub294\ub2e4. foo \uac00 \uc120\uc5b8\ub418\ub294 \uc2dc\uc810\uc5d0\uc11c bar \ub294 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc774\ub2e4. ugh := Huh? bar := $( ugh ) foo := $( bar ) all : ; echo $( foo ) \uc989\uc2dc \ud560\ub2f9\ub41c \ubcc0\uc218\ub97c \uc81c\ub300\ub85c \ucd9c\ub825\ub418\uac8c \ud558\uae30 \uc704\ud574\uc11c\ub294 \uc704\uc640 \uac19\uc774 \uc120\uc5b8 \uc21c\uc11c\ub97c \ubc14\uafb8\uc5b4 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. \uc989\uc2dc \ud560\ub2f9\uacfc \uc9c0\uc5f0 \ud560\ub2f9\uc744 \uc11e\uc5b4\uc11c \uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc21c\uc11c\ub97c \ubc30\uce58\ud558\ub294 \uac83 \ub610\ud55c \uac00\ub2a5\ud558\ub2e4. bar = $( ugh ) ugh := Huh? foo := $( bar ) all : ; echo $( foo ) \uc774\ub807\uac8c \ud574\ub3c4 \ub41c\ub2e4. foo = $( bar ) ugh := Huh? bar := $( ugh ) all : ; echo $( foo ) \ub2e4\uc74c \uc608\uc2dc\ub85c \uc9c0\uc5f0 \ud560\ub2f9\uacfc \uc989\uc2dc \ud560\ub2f9\uc744 \ube44\uad50\ud574\ubcf4\uc138\uc694. Example one = one ${ later_variable } two := two ${ later_variable } later_variable = later .PHONY : all all : echo $( one ) echo $( two ) \uc704 \uc608\uc2dc\uc5d0\uc11c one \uc5d0\ub294 later_variable \uc774 \ud560\ub2f9\ub418\uc9c0\ub9cc two \ub294 := \uc73c\ub85c \uc989\uc2dc\ud560\ub2f9\uc744 \uc0ac\uc6a9\ud588\uae30 \ub54c\ubb38\uc5d0 later_variable \uc774 \ud560\ub2f9\ub418\uc9c0 \uc54a\ub294\ub2e4. var ?= value : \ub9cc\uc57d var \uc774 \ud560\ub2f9\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc73c\uba74 value \ub85c \ud560\ub2f9\ud55c\ub2e4. Example one = hello one ?= will not be set two ?= will be set .PHONY : all all : echo $( one ) echo $( two ) \uc704 \uc608\uc2dc\uc5d0\uc11c ?= \ub85c one \uacfc two \ub97c \ud560\ub2f9\ud558\ub294\ub370 two \ub9cc \ud560\ub2f9\ub41c\ub2e4. \ubcc0\uc218 \ud655\uc7a5 : \ub2e8\uc21c\ud788 \ubcc0\uc218\ub97c \uc774\uc5b4\ubd99\ud788\ub294 \uac83\uc73c\ub85c \ubcc0\uc218 \ud655\uc7a5\uc744 \ud560 \uc218 \uc788\ub2e4. Example one = hello one := ${ one } there all : echo $( one ) \uc704 \uc608\uc2dc\uc5d0\uc11c \uc989\uc2dc\ud560\ub2f9 := \ub97c \uc9c0\uc5f0\ud560\ub2f9 = \uc73c\ub85c \ubc14\uafbc\ub2e4\uba74 \ubb34\ud55c\ub8e8\ud504 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c\ub2e4. += \ubcc0\uc218 \ud655\uc7a5 : += \uc5f0\uc0b0\uc790\ub85c\ub3c4 \ubcc0\uc218 \ud655\uc7a5\uc744 \ud560 \uc218 \uc788\ub2e4. Example one = hello one += there all : echo $( one ) \uc704 \uc608\uc2dc\ub294 hello there \ub97c \ucd9c\ub825\ud55c\ub2e4. \ud560\ub2f9\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218 : \ud560\ub2f9\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub97c \ub2e4\ub978 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud558\uba74 \uc2a4\ud398\uc774\uc2a4 \ud558\ub098\uac00 \ud560\ub2f9\ub41c\ub2e4. Example with_spaces = hello # with_spaces has many spaces after \"hello\" after = $( with_spaces ) there nullstring = space = $( nullstring ) # Make a variable with a single space. .PHONY : all all : @echo \" $( after ) \" @echo start \" $( nullstring ) \" end @echo start \" $( space ) \" end \uc704 \uc608\uc2dc\uc758 \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ make hello there startend start end \ubcc0\uc218 \uce58\ud658 : $(var:a=b) \ub85c \ubcc0\uc218 var \uc758 a \uac00 b \ub85c \uce58\ud658\ub41c\ub2e4. Example foo := a.o b.o c.o bar := $( foo:.o = .c ) all : ; echo $( bar ) \uc704 \uc608\uc2dc\ub294 a.c b.c c.c \ub97c \ucd9c\ub825\ud55c\ub2e4. \ud328\ud134 \ubcc0\uc218 \uce58\ud658 : % \ub97c \uc0ac\uc6a9\ud55c \ud328\ud134\uc744 \ud3ec\ud568\ud558\uc5ec \ubcc0\uc218 \uce58\ud658\uc744 \ud560 \uc218\ub3c4 \uc788\ub2e4. Example foo := a.o b.o c.c bar := $( foo:%.o = % ) all : ; echo $( bar ) \uc704 \uc608\uc2dc\ub294 a b c.c \ub97c \ucd9c\ub825\ud55c\ub2e4. \ud568\ucd95 \uaddc\uce59 \u00b6 Makefile \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud568\ucd95 \uaddc\uce59\uc744 \uc9c0\uc6d0\ud55c\ub2e4. # blah.o \uaddc\uce59 \uc548\uc5d0 \uc8fc\uc11d\uc744 \ub2ec\uba74 \ud568\ucd95 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. # Implicit command of: \"cc blah.o -o blah\" blah : # Implicit command of: \"cc -c blah.c -o blah.o\" blah.o : blah.c : echo \"int main() { return 0; }\" > blah.c clean : rm -f blah.o blah blah.c \ud2b9\uc218 \ubb38\uc790 \u00b6 \uc640\uc77c\ub4dc\uce74\ub4dc * : \uc640\uc77c\ub4dc\uce74\ub4dc * \ub294 targets , prerequisites , commands \uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4. Example some_file : *. c # create the binary *.c : touch f1.c touch f2.c clean : rm -f *.c \uc774 Makefile \uc740 .c \ud30c\uc77c\uc774 \ub2e8 \ud558\ub098\ub77c\ub3c4 \uc788\uc73c\uba74 *.c \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. \uc640\uc77c\ub4dc\uce74\ub4dc * \ub294 \uc5b4\ub5a4 \ubb38\uc790\uc5f4\uc774\ub77c\ub3c4 \ud574\ub2f9\ub418\uae30\uc5d0 make \uac00 *.c \ub77c\ub294 \uc758\uc874\uc131\uc774 \ud574\uacb0 \ub41c \uac83\uc73c\ub85c \ud310\ub2e8\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc640\uc77c\ub4dc\uce74\ub4dc * \ud568\uc218 : \uc640\uc77c\ub4dc\uce74\ub4dc * \ub97c targets , prerequisites , commands \uc5d0\uc11c\ubc16\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\uae30 \ub54c\ubb38\uc5d0 \ubcc0\uc218\ud560\ub2f9\uc774\ub098 \ud568\uc218\uc778\uc790 \uc804\ub2ec \uc2dc\uc5d0\ub294 \uc640\uc77c\ub4dc\uce74\ub4dc \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Example wrong = *.o # Wrong objects := $( wildcard *.c ) # Right some_binary : touch f1.c touch f2.c echo $( wrong ) echo $( objects ) clean : rm -f *.c % \ub294 \ubaa8\ub4e0 \ud30c\uc77c \uc774\ub984\uc744 \ub73b\ud55c\ub2e4. Example %.c \ub77c\uace0 \ud558\uba74 \ubaa8\ub4e0 .c \ud30c\uc77c\uc744 \ub73b\ud55c\ub2e4. $@ \ub294 \uaddc\uce59\uc758 : \uc67c\ucabd \ubd80\ubd84\uc774\ub2e4. $< \ub294 \uaddc\uce59\uc758 : \uc624\ub978\ucabd \ubd80\ubd84\uc758 \uccab\ubc88\uc9f8 \uc544\uc774\ud15c\uc774\ub2e4. $^ \ub294 \uaddc\uce59\uc758 : \uc624\ub978\ucabd \ubd80\ubd84\uc774\ub2e4. \ub2e4\uc911 \ud0c0\uac9f \u00b6 targets \uc5d0 \uc5ec\ub7ec \ud30c\uc77c\uc774 \uc120\uc5b8\ub418\uc5b4 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. Example all : f 1. o f 2. o f1.o f2.o : echo $@ \uc704 \uc608\uc2dc\uc5d0\uc11c \uaddc\uce59 all \uc5d0\uc11c f1.o \uc640 f2.o \ub97c \uc9c0\uc815\ud558\uc600\ub294\ub370 \uac01\uac01 f1.o f2.o \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uac8c \ub41c\ub2e4. \uc774\ub54c \uc2e4\ud589 \uba85\ub839 echo $@ \uc758 $@ \uc5d0\ub294 \uac01\uac01 \ub9e5\ub77d\uc5d0 \ub530\ub77c f1.o \uc640 f2.o \uac00 \ub300\uc785\ub41c\ub2e4. targets \uc5d0 \uc640\uc77c\ub4dc\uce74\ub4dc % \ub85c \uc77c\ubc18\uc801\uc778 \ud30c\uc77c\uc744 \uc120\uc5b8\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example all : f 1. o f 2. o %.o : echo $@ \uc774 \uacbd\uc6b0 %.o \uaddc\uce59\uc73c\ub85c \uc778\ud574 .o \ud655\uc7a5\uc790\ub97c \uac00\uc9c4 \ubaa8\ub4e0 \ud30c\uc77c\uc774 \uc774 \uaddc\uce59\uc73c\ub85c \uc0dd\uc131\ub41c\ub2e4. all : f 1. o f 2. o %.o : echo $@ f1.o : echo TEST \ud558\uc9c0\ub9cc \uc704\uc640 \uac19\uc774 f1.o \uc758 \uaddc\uce59\uc744 \ub530\ub85c \uc9c0\uc815\ud574\uc904 \uacbd\uc6b0 f1.o \ub97c \uc0dd\uc131\ud560 \ub54c make \ub294 %.o \uaddc\uce59\uc774 \uc544\ub2c8\ub77c f1.o \uaddc\uce59\uc744 \uc2e4\ud589\ud55c\ub2e4. \ucc38\uace0 \ubc0f \ucd9c\ucc98 : https://makefiletutorial.com/ http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/","title":"Makefile \uae30\ubcf8"},{"location":"dev/makefile/makefile/#_1","text":"Makefile \uc740 \ud504\ub85c\uc81d\ud2b8\ub97c \uc790\ub3d9\uc73c\ub85c \ube4c\ub4dc\ud558\uae30 \uc704\ud55c \uc5ec\ub7ec\uac1c\uc758 \uaddc\uce59\uc73c\ub85c \uad6c\uc131\ub418\ub294\ub370 \uaddc\uce59\uc758 \uc77c\ubc18\uc801 \ubb38\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. targets : prerequisites command command command ... targets : \uaddc\uce59 \uc774\ub984\uc73c\ub85c\uc368 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud30c\uc77c \uc774\ub984\ub4e4\uc774\ub2e4. \ub9cc\ub4e4\uc5b4\uc9c8 \ud30c\uc77c \uc774\ub984\uc744 \ub73b\ud55c\ub2e4. \ubcf4\ud1b5 \uaddc\uce59 \ub2f9 \ud558\ub098\uc758 \ud30c\uc77c\ub9cc \uc788\ub2e4. commands : targets \uc744 \ub9cc\ub4dc\ub294 \uc77c\ub828\uc758 \uba85\ub839\uc5b4\ub4e4\uc774\ub2e4. \uc774 \ubd80\ubd84\uc740 \uacf5\ubc31\uc774 \uc544\ub2cc \ud0ed\uc73c\ub85c \uc2dc\uc791\ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4. prerequisites : \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud30c\uc77c \uc774\ub984\ub4e4\ub85c\uc368 commands \uac00 \uc2e4\ud589\ub418\uae30 \uc704\ud558\uc5ec \ud544\uc694\ud55c \uc758\uc874\uc131 \ud30c\uc77c \ub9ac\uc2a4\ud2b8\ub97c \ub73b\ud55c\ub2e4. Info \ub9cc\uc57d prerequisites \uc5d0\uc11c \uba85\uc2dc\ub41c \ud30c\uc77c\ub4e4 \uc911 \ud558\ub098\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uba3c\uc800 \uadf8 \ud30c\uc77c \uc774\ub984\uc758 \uaddc\uce59\uc744 \ucc3e\uc544\uc11c \uadf8 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc5ec \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","title":"\uae30\ubcf8 \uaddc\uce59"},{"location":"dev/makefile/makefile/#_2","text":"make \uba85\ub839\uc744 \uc778\uc790 \uc5c6\uc774 \uc2e4\ud589\ud558\uba74 Makefile \uc758 \uccab\ubc88\uc9f8 \uaddc\uce59\uc774 \uc2e4\ud589\ub41c\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uccab\ubc88\uc9f8 \uaddc\uce59\uc744 all \ub85c \uc815\ud558\ub294 \uad6d\ub8f0\uc774 \uc788\ub2e4. Example blah : blah . o cc blah.o -o blah blah.o : blah . c cc -c blah.c -o blah.o blah.c : echo \"int main() { return 0; }\" > blah.c clean : rm -f blah.o blah.c blah \uc774\ub7ec\ud55c Makefile \uc758 \uacbd\uc6b0 blah \uac00 \uccab\ubc88\uc9f8 \uaddc\uce59\uc774\ubbc0\ub85c \ub514\ud3f4\ud2b8 \uaddc\uce59\uc774 \ub41c\ub2e4.","title":"\uaddc\uce59 \uc2e4\ud589 \uc21c\uc11c"},{"location":"dev/makefile/makefile/#_3","text":"\ud1b5\uc0c1\uc801\uc73c\ub85c CC \uc5d0 \ucef4\ud30c\uc77c\ub7ec\ub97c, CFLAGS \uc5d0 \ucef4\ud30c\uc77c \uc635\uc158\uc744 \uc800\uc7a5\ud558\uc5ec \uaddc\uce59\uc5d0 \uc0bd\uc785\ud55c\ub2e4.","title":"\uad00\ub840"},{"location":"dev/makefile/makefile/#targets","text":"make \ub294 \uaddc\uce59\uc758 \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0 \"up to date\" \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\uace0 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. Example some_file : touch some_file \ucc98\uc74c \uc2e4\ud589\ud560 \ub54c\ub294 \uaddc\uce59\uc774 \uc2e4\ud589 \ub418\uc9c0\ub9cc \ud55c\ubc88 \ub354 \uc2e4\ud589\ud558\uba74 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4.","title":"\uaddc\uce59\uc758 targets \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0"},{"location":"dev/makefile/makefile/#_4","text":"\uc704 \uc608\uc81c\uc758 Makefile \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd95\uc57d\ud560 \uc218 \uc788\ub2e4. some_file : ; touch some_file","title":"\ucd95\uc57d\uaddc\uce59"},{"location":"dev/makefile/makefile/#phony","text":".PHONY : targets \uc774 \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uba85\uc2dc\ud55c\ub2e4. make \ub294 \ud6a8\uc728\uc131\uc744 \uc704\ud558\uc5ec targets \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud558\uba74 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. \uadf8\ub7f0\ub370 clean \uc774\ub098 all \uac19\uc740 \uaddc\uce59\uc740 \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc744 \uc9c0\uce6d\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub9cc\uc57d \uc2e4\uc218\ub85c all \ud30c\uc77c\uc774\ub098 clean \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uc600\uc744 \uacbd\uc6b0 all \uc774\ub098 clean \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\ub2e4. \uc774\uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud558\uc5ec .PHONY \uc5d0 targets \uc744 \uba85\uc2dc\ud558\uba74 make \ub294 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \uac80\uc0ac\ud558\uc9c0 \uc54a\uace0 \uaddc\uce59\uc744 \ubb34\uc870\uac74 \uc2e4\ud589\ud55c\ub2e4. Tip \ub610\ud55c \ud30c\uc77c \uc874\uc7ac \uac80\uc0ac\ub97c \ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 .PHONY \ub97c \uc0ac\uc6a9\ud558\uba74 make \uc758 \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub41c\ub2e4. \ub2e4\uc74c\uc758 \uc608\uc2dc\ub97c \uc0b4\ud3b4\ubcf4\uba74\uc11c .PHONY \ub97c \uc774\ud574\ud574\ubd05\uc2dc\ub2e4. Example one : ; touch one clean : ; rm - f one \uc704 \uc608\uc81c\uc758 clean \uaddc\uce59\uc740 \ud30c\uc77c one \uc744 \uc0ad\uc81c\ud558\uae30\ub85c \ub418\uc5b4\uc788\ub2e4. \uadf8\ub7f0\ub370 \ub9cc\uc57d clean \uc774\ub77c\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\uba74 make clean \uc73c\ub85c \uaddc\uce59\uc744 \uc2e4\ud589\ud55c\ub2e4 \ud574\ub3c4 make: 'clean' is up to date. \ub77c\ub294 \uba54\uc138\uc9c0\uac00 \ucd9c\ub825\ub418\uace0 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. one : ; touch one clean : ; rm - f one .PHONY : clean \ub530\ub77c\uc11c .PHONY \uc5d0 clean \uc744 \uba85\uc2dc\ud558\uc5ec \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uba85\uc2dc\ud574\uc900\ub2e4. \uadf8\ub7ec\uba74 clean \ud30c\uc77c\uc774 \uc788\uc5b4\ub3c4 \uaddc\uce59\uc774 \ud56d\uc0c1 \uc2e4\ud589\ub41c\ub2e4.","title":"PHONY"},{"location":"dev/makefile/makefile/#_5","text":"\ubb38\uc790\uc5f4\uc744 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uace0 ${} \ub098 $() \ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example files = file1 file2 some_file : $( files ) echo \"Look at this variable: \" $( files ) touch some_file file1 : touch file1 file2 : touch file2 clean : rm -f file1 file2 some_file","title":"\ubcc0\uc218"},{"location":"dev/makefile/makefile/#_6","text":"Makefile \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud568\ucd95 \uaddc\uce59\uc744 \uc9c0\uc6d0\ud55c\ub2e4. # blah.o \uaddc\uce59 \uc548\uc5d0 \uc8fc\uc11d\uc744 \ub2ec\uba74 \ud568\ucd95 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. # Implicit command of: \"cc blah.o -o blah\" blah : # Implicit command of: \"cc -c blah.c -o blah.o\" blah.o : blah.c : echo \"int main() { return 0; }\" > blah.c clean : rm -f blah.o blah blah.c","title":"\ud568\ucd95 \uaddc\uce59"},{"location":"dev/makefile/makefile/#_7","text":"\uc640\uc77c\ub4dc\uce74\ub4dc * : \uc640\uc77c\ub4dc\uce74\ub4dc * \ub294 targets , prerequisites , commands \uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4. Example some_file : *. c # create the binary *.c : touch f1.c touch f2.c clean : rm -f *.c \uc774 Makefile \uc740 .c \ud30c\uc77c\uc774 \ub2e8 \ud558\ub098\ub77c\ub3c4 \uc788\uc73c\uba74 *.c \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. \uc640\uc77c\ub4dc\uce74\ub4dc * \ub294 \uc5b4\ub5a4 \ubb38\uc790\uc5f4\uc774\ub77c\ub3c4 \ud574\ub2f9\ub418\uae30\uc5d0 make \uac00 *.c \ub77c\ub294 \uc758\uc874\uc131\uc774 \ud574\uacb0 \ub41c \uac83\uc73c\ub85c \ud310\ub2e8\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc640\uc77c\ub4dc\uce74\ub4dc * \ud568\uc218 : \uc640\uc77c\ub4dc\uce74\ub4dc * \ub97c targets , prerequisites , commands \uc5d0\uc11c\ubc16\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\uae30 \ub54c\ubb38\uc5d0 \ubcc0\uc218\ud560\ub2f9\uc774\ub098 \ud568\uc218\uc778\uc790 \uc804\ub2ec \uc2dc\uc5d0\ub294 \uc640\uc77c\ub4dc\uce74\ub4dc \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Example wrong = *.o # Wrong objects := $( wildcard *.c ) # Right some_binary : touch f1.c touch f2.c echo $( wrong ) echo $( objects ) clean : rm -f *.c % \ub294 \ubaa8\ub4e0 \ud30c\uc77c \uc774\ub984\uc744 \ub73b\ud55c\ub2e4. Example %.c \ub77c\uace0 \ud558\uba74 \ubaa8\ub4e0 .c \ud30c\uc77c\uc744 \ub73b\ud55c\ub2e4. $@ \ub294 \uaddc\uce59\uc758 : \uc67c\ucabd \ubd80\ubd84\uc774\ub2e4. $< \ub294 \uaddc\uce59\uc758 : \uc624\ub978\ucabd \ubd80\ubd84\uc758 \uccab\ubc88\uc9f8 \uc544\uc774\ud15c\uc774\ub2e4. $^ \ub294 \uaddc\uce59\uc758 : \uc624\ub978\ucabd \ubd80\ubd84\uc774\ub2e4.","title":"\ud2b9\uc218 \ubb38\uc790"},{"location":"dev/makefile/makefile/#_8","text":"targets \uc5d0 \uc5ec\ub7ec \ud30c\uc77c\uc774 \uc120\uc5b8\ub418\uc5b4 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. Example all : f 1. o f 2. o f1.o f2.o : echo $@ \uc704 \uc608\uc2dc\uc5d0\uc11c \uaddc\uce59 all \uc5d0\uc11c f1.o \uc640 f2.o \ub97c \uc9c0\uc815\ud558\uc600\ub294\ub370 \uac01\uac01 f1.o f2.o \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uac8c \ub41c\ub2e4. \uc774\ub54c \uc2e4\ud589 \uba85\ub839 echo $@ \uc758 $@ \uc5d0\ub294 \uac01\uac01 \ub9e5\ub77d\uc5d0 \ub530\ub77c f1.o \uc640 f2.o \uac00 \ub300\uc785\ub41c\ub2e4. targets \uc5d0 \uc640\uc77c\ub4dc\uce74\ub4dc % \ub85c \uc77c\ubc18\uc801\uc778 \ud30c\uc77c\uc744 \uc120\uc5b8\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example all : f 1. o f 2. o %.o : echo $@ \uc774 \uacbd\uc6b0 %.o \uaddc\uce59\uc73c\ub85c \uc778\ud574 .o \ud655\uc7a5\uc790\ub97c \uac00\uc9c4 \ubaa8\ub4e0 \ud30c\uc77c\uc774 \uc774 \uaddc\uce59\uc73c\ub85c \uc0dd\uc131\ub41c\ub2e4. all : f 1. o f 2. o %.o : echo $@ f1.o : echo TEST \ud558\uc9c0\ub9cc \uc704\uc640 \uac19\uc774 f1.o \uc758 \uaddc\uce59\uc744 \ub530\ub85c \uc9c0\uc815\ud574\uc904 \uacbd\uc6b0 f1.o \ub97c \uc0dd\uc131\ud560 \ub54c make \ub294 %.o \uaddc\uce59\uc774 \uc544\ub2c8\ub77c f1.o \uaddc\uce59\uc744 \uc2e4\ud589\ud55c\ub2e4. \ucc38\uace0 \ubc0f \ucd9c\ucc98 : https://makefiletutorial.com/ http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/","title":"\ub2e4\uc911 \ud0c0\uac9f"},{"location":"dev/makefile/makefile2/","text":"Note \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 \uc800\uc758 \ube14\ub85c\uadf8 \ub0b4\uc6a9 \uc744 \ub2e4\uc2dc \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. vpath \u00b6 vpath : prerequisites \ub97c \ucc3e\ub294 \uacbd\ub85c\ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc640 \ub354\ubd88\uc5b4\uc11c \ucd94\uac00\ud55c\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c make \ub294 prerequisites \ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \ucc3e\ub294\ub2e4. \uadf8\ub7f0\ub370 vpath \ub85c \ud2b9\uc815 prerequisites \uc758 \ud0d0\uc0c9\uacbd\ub85c\ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub354\ubd88\uc5b4\uc11c \ucd94\uac00\ud560 \uc218 \uc788\ub2e4. \ud615\uc2dd : vpath <pattern> <directories, space/colon seperated> <pattern> \uc5d0\uc11c \ud2b9\uc218\ubb38\uc790 % \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. VPATH \ud658\uacbd\ubcc0\uc218\uc5d0\ub3c4 \uacbd\ub85c\ub97c \ucd94\uac00\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example vpath %.h ../headers ../other-directory some_binary : ../ headers blah . h touch some_binary ../headers : mkdir ../headers blah.h : touch ../headers/blah.h \uc704 \uc608\uc2dc\uc758 vpath \ub54c\ubb38\uc5d0 .h \ud655\uc7a5\uc790\ub97c \uac00\uc9c4 \ud30c\uc77c\uc744 \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac \ubfd0\ub9cc \uc544\ub2c8\ub77c ../headers \ub514\ub809\ud1a0\ub9ac\uc640 ../other-directory \uc5d0\uc11c\ub3c4 \ucc3e\ub294\ub2e4. \uc774\uc5d0 \ub530\ub77c \ub9cc\uc57d vpath \uac00 \ud3ec\ud568\ub41c \ub77c\uc778\uc744 \uc9c0\uc6b0\uace0 make \ub97c \uc2e4\ud589\ud574\ubcf4\uba74 \ud30c\uc77c blah.h \ub97c \ucc3e\uc9c0 \ubabb\ud558\uc5ec \uaddc\uce59 blah.h: \ub97c \ud56d\uc0c1 \uc2e4\ud589\ud558\uac8c \ub41c\ub2e4. Static Pattern Rules \u00b6 static pattern : \ud328\ud134\uc5d0 \ub9de\ub294 targets \uc744 \uc790\ub3d9\uc73c\ub85c prerequisites \uc73c\ub85c \ubcc0\ud658\ud574\uc8fc\ub294 \uaddc\uce59\uc774\ub2e4. targets ...: target-pattern: prereq-patterns ... \uc758 \ud615\uc2dd\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4. target-pattern \uc5d0 \ub9e4\uce6d\ub41c target \uc744 prereq-pattern \uc73c\ub85c \ubcc0\ud658\ud574\uc900\ub2e4. Example objects = foo.o bar.o $(objects) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc740 \ub2e4\uc74c\uc758 \uaddc\uce59\uacfc \ub3d9\uc77c\ud558\ub2e4. foo.o : foo . c echo \"Call gcc to generate $@ from $ <\" bar.o : bar . c echo \"Call gcc to generate bar.o from bar.c\" Static Pattern Rules and Filter \u00b6 static pattern with Filter : static pattern \uc758 targets \uc744 \ud328\ud134\uc73c\ub85c \ud544\ud130\ub9c1\ud574\uc11c \ub9e4\uce6d\ub418\uc9c0 \uc54a\ub294 target \uc740 \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a4\uc9c0 \uc54a\ub294 \uaddc\uce59\uc774\ub2e4. Example objects = foo.o bar.o f1.c $(objects) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc5d0\uc11c f1.c \ub294 \ubd84\uba85 static pattern \uc5d0 \ud574\ub2f9\ub418\uc9c0 \uc54a\ub294 \uc608\uc678\uc774\ub2e4. \uc774 \uaddc\uce59\uc740 \ub2e4\uc74c\uc758 \uaddc\uce59\uacfc \ub3d9\uc77c\ud55c \uae30\ub2a5\uc744 \ud558\uac8c \ub41c\ub2e4. foo.o : foo . c echo \"Call gcc to generate $@ from $ <\" bar.o : bar . c echo \"Call gcc to generate bar.o from bar.c\" f1.c : echo \"Call gcc to generate f1.c from\" \ub530\ub77c\uc11c \uc774\ub7ec\ud55c \uc608\uc678\ub294 \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a4\uc9c0 \uc54a\uae30 \uc704\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \ud544\ud130\ub9c1\uc744 \uac78 \uc218 \uc788\ub2e4. objects = foo.o bar.o f1.c $(filter %.o $(objects)) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc740 objects \uc5d0\uc11c .o \ub85c \ub05d\ub098\ub294 \ud30c\uc77c\ub9cc \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a8\ub2e4. Double-Colon \u00b6 Double-Colon : Double-Colon \uc73c\ub85c \uc2dc\uc791\ub418\ub294 \uaddc\uce59\uc774 \uc5ec\ub7ec\ubc88 \uc815\uc758\ub418\uc5b4\ub3c4 \uadf8\uac83\ub4e4\uc744 \ubaa8\ub450 \uc2e4\ud589\ud558\uac8c \ud574\uc900\ub2e4. \uc774 \uaddc\uce59\uc740 \ud754\ud788 \uc4f0\uc774\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\ub3c4 \ub2e4\uc74c \uc608\uc2dc\ub97c \ud55c \ubc88 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Example all : blah blah :: echo \"hello\" blah :: echo \"hello again\" \uc704 \uaddc\uce59\uc5d0\uc11c blah \uac00 Double-Colon \uc73c\ub85c \uc2dc\uc791\ub418\ub294\ub370 Single-Colon \uc73c\ub85c \ubc14\uafb8\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uba74\uc11c \ub9c8\uc9c0\ub9c9 \uaddc\uce59\ub9cc \uc2e4\ud589\ub41c\ub2e4. \uba85\ub839 \uc2e4\ud589 \uad00\ub828 \uaddc\uce59 \u00b6 Command Echoing/Silencing \u00b6 Command Echoing/Silencing : \uba85\ub839\uc5b4 \uc55e\uc5d0 @ \ub97c \ubd99\ud788\uba74 \uba85\ub839\uc5b4\uac00 \ucd9c\ub825\ub418\uc9c0 \uc54a\ub294\ub2e4. Example all : @echo \"hello\" echo \"hello again\" \uc704 \uc608\uc2dc\uc758 \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ make hello echo \"hello again\" hello again Tip make -s \ub85c \uc2e4\ud589\ud558\uba74 \ubaa8\ub4e0 \uba85\ub839\uc5b4\uc5d0 @ \ub97c \ubd99\ud600\uc11c \uc2e4\ud589\ud55c \ud6a8\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4. Command Execution \u00b6 Command Execution : \uac01\uac01\uc758 \uba85\ub839\uc5b4\ub294 \ud56d\uc0c1 \uc0c8\ub85c\uc6b4 \uc258\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \uac83\uacfc \uac19\ub2e4. \ub530\ub77c\uc11c make \uc5d0\uc11c \uba85\ub839\uc5b4\ub4e4\uc744 \uc2e4\ud589\ud558\uae30 \uc704\ud558\uc5ec \ubcf4\ud1b5 ; \\ \ub85c \uba85\ub839\uc5b4\ub97c \uc774\uc5b4\uc900\ub2e4. Example all : cd .. echo ` pwd ` cd .. ; echo ` pwd ` cd .. ; \\ echo ` pwd ` \uc704 \uc608\uc2dc\uc758 \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ make cd .. echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io/maketest cd .. ; echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io cd .. ; \\ echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io Default Shell \u00b6 Default Shell : make \uac00 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud558\ub294 \uae30\ubcf8 \uc258\uc740 /bin/sh \uc778\ub370 SHELL \ubcc0\uc218\ub97c \ubc14\uafc8\uc73c\ub85c\uc368 \uae30\ubcf8 \uc258\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. Example all : echo \"current shell: $$ 0\" \uc704 \uc608\uc2dc\uac00 /bin/sh \uc744 \ucd9c\ub825\ud558\ub294\ub370 \ube44\ud574 \ub2e4\uc74c \uc608\uc2dc\ub294 /bin/bash \ub97c \ucd9c\ub825\ud55c\ub2e4. SHELL = /bin/bash all : echo \"current shell: $$ 0\" DELETE_ON_ERROR \u00b6 DELETE_ON_ERROR : make \ub294 \uaddc\uce59\uc774 nonzero \uc885\ub8cc \ucf54\ub4dc\ub97c \ubc18\ud658\ud558\uba74 \uc804\uccb4 \uc2e4\ud589\uc744 \uc911\ub2e8\ud558\ub294\ub370, .DELETE_ON_ERROR \uac00 \uc124\uc815\ub418\uba74 \uc774\ub54c nonzero \ubc18\ud658\uac12\uc744 \ubc18\ud658\ud55c \uaddc\uce59\uc758 target \ud30c\uc77c\uc744 \uc0ad\uc81c\ud55c\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 .DELETE_ON_ERROR \ub97c \uc124\uc815\ud558\ub294 \uac83\uc774 \uc88b\ub2e4. Example all : one one : touch one false \uc704 \uc608\uc2dc\ub294 false \uac00 nonzero \uc885\ub8cc\ucf54\ub4dc\ub97c \ubc18\ud658\ud558\uae30\uc5d0 \uc804\uccb4\uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uc9c0\ub9cc \ud30c\uc77c one \uc774 \uc0ac\ub77c\uc9c0\uc9c0 \uc54a\ub294\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc74c \uc608\uc2dc\ub294 \ud30c\uc77c one \uc774 \uc790\ub3d9\uc73c\ub85c \uc0ad\uc81c\ub41c\ub2e4. .DELETE_ON_ERROR all : one one : touch one false \uc5d0\ub7ec \ucc98\ub9ac \u00b6 -k \uc635\uc158 : make \ub97c \uc774 \uc635\uc158\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud574\ub3c4 \uc2e4\ud589\uc744 \uc911\ub2e8\ud558\uc9c0 \uc54a\uace0 \ub05d\uae4c\uc9c0 \uc2e4\ud589\ud55c\ub2e4. \ubaa8\ub4e0 \uc5d0\ub7ec\ub97c \ud55c\ubc88\uc5d0 \ud655\uc778\ud558\uace0 \uc2f6\uc744 \ub54c \uc720\uc6a9\ud558\ub2e4. -i \uc635\uc158 : make \ub97c \uc774 \uc635\uc158\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \ubaa8\ub4e0 \uc5d0\ub7ec\ub97c \ubb34\uc2dc\ud55c\ub2e4. Example .DELETE_ON_ERROR : all : one one : touch one false touch one-post \uc704 \uc608\uc2dc\ub97c make -k \ub85c \uc2e4\ud589\ud558\uba74 \ud30c\uc77c one \uc0dd\uc131\ub418\uc5c8\ub2e4\uac00 false \uc5d0\uc11c \uc804\uccb4 \uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uace0 one \uc774 \uc0ad\uc81c\ub41c\ub2e4. \ubc18\uba74 make -i \ub85c \uc2e4\ud589\ud558\uba74 false \uac00 \ubc18\ud658\ud558\ub294 nonzero \ub9ac\ud134\uac12\uc744 \ubb34\uc2dc\ud558\uace0 \ud30c\uc77c one \uacfc \ud30c\uc77c one-post \uac00 \uc0dd\uc131\ub41c\ub2e4. - : \uba85\ub839\uc5b4 \uc55e\uc5d0 - \ub97c \ubd99\ud788\uba74 nonzero \uc885\ub8cc\ucf54\ub4dc\uac00 \ubc18\ud658\ub418\uc5b4\ub3c4 \uc804\uccb4 \uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uc9c0 \uc54a\uace0 \ubb34\uc2dc\ub41c\ub2e4. Example one : -false touch one \uc704 \uc608\uc2dc\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubb34\uc2dc\ub418\uace0 \ud30c\uc77c one \uc774 \uc798 \uc2e4\ud589\ub41c\ub2e4. Recursive make \u00b6 make -C <directory> : <directory> \ub97c make \ud55c\ub2e4. Example new_contents = \"hello:;touch inside_file\" all : mkdir -p subdir echo $( new_contents ) > subdir/makefile make -C subdir \uc704 \uc608\uc2dc\ub294 subdir \ub514\ub809\ud1a0\ub9ac\ub97c \ub9cc\ub4e4\uace0 subdir/makefile \uc744 make \ud55c\ub2e4. export <variable> : \uc7ac\uadc0\uc801\uc73c\ub85c \ud638\ucd9c\ub41c \ud558\uc704 make \uc5d0\uc11c \uc0c1\uc704 make \uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. Example new_contents = \"hello:;echo \\$ $( cooly ) \" all : mkdir -p subdir echo $( new_contents ) | sed -e 's/^ //' > subdir/makefile make -C subdir cooly = \"The subdirectory can see me!\" export cooly \uc704 \uc608\uc2dc\uc758 export cooly \ub85c \uc0dd\uc131\ub41c subdir/makefile \uc5d0\uc11c cooly \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. EXPORT_ALL_VARIABLES : .EXPORT_ALL_VARIABLES: \ub97c \uc120\uc5b8\ud558\uba74 \ubaa8\ub4e0 \ubcc0\uc218\uac00 export \ub41c\ub2e4. Example .EXPORT_ALL_VARIABLES : new_contents = \"hello:\\n\\techo \\$ $( cooly ) \" cooly = \"The subdirectory can see me!\" # This would nullify the line above: unexport cooly all : mkdir -p subdir echo $( new_contents ) | sed -e 's/^ //' > subdir/makefile @echo \"---MAKEFILE CONTENTS---\" @cd subdir && cat makefile @echo \"---END MAKEFILE CONTENTS---\" cd subdir && $( MAKE ) \ucc38\uace0 \ubc0f \ucd9c\ucc98 : https://makefiletutorial.com/ http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/","title":"Makefile \uace0\uae09"},{"location":"dev/makefile/makefile2/#vpath","text":"vpath : prerequisites \ub97c \ucc3e\ub294 \uacbd\ub85c\ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc640 \ub354\ubd88\uc5b4\uc11c \ucd94\uac00\ud55c\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c make \ub294 prerequisites \ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \ucc3e\ub294\ub2e4. \uadf8\ub7f0\ub370 vpath \ub85c \ud2b9\uc815 prerequisites \uc758 \ud0d0\uc0c9\uacbd\ub85c\ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub354\ubd88\uc5b4\uc11c \ucd94\uac00\ud560 \uc218 \uc788\ub2e4. \ud615\uc2dd : vpath <pattern> <directories, space/colon seperated> <pattern> \uc5d0\uc11c \ud2b9\uc218\ubb38\uc790 % \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. VPATH \ud658\uacbd\ubcc0\uc218\uc5d0\ub3c4 \uacbd\ub85c\ub97c \ucd94\uac00\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example vpath %.h ../headers ../other-directory some_binary : ../ headers blah . h touch some_binary ../headers : mkdir ../headers blah.h : touch ../headers/blah.h \uc704 \uc608\uc2dc\uc758 vpath \ub54c\ubb38\uc5d0 .h \ud655\uc7a5\uc790\ub97c \uac00\uc9c4 \ud30c\uc77c\uc744 \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac \ubfd0\ub9cc \uc544\ub2c8\ub77c ../headers \ub514\ub809\ud1a0\ub9ac\uc640 ../other-directory \uc5d0\uc11c\ub3c4 \ucc3e\ub294\ub2e4. \uc774\uc5d0 \ub530\ub77c \ub9cc\uc57d vpath \uac00 \ud3ec\ud568\ub41c \ub77c\uc778\uc744 \uc9c0\uc6b0\uace0 make \ub97c \uc2e4\ud589\ud574\ubcf4\uba74 \ud30c\uc77c blah.h \ub97c \ucc3e\uc9c0 \ubabb\ud558\uc5ec \uaddc\uce59 blah.h: \ub97c \ud56d\uc0c1 \uc2e4\ud589\ud558\uac8c \ub41c\ub2e4.","title":"vpath"},{"location":"dev/makefile/makefile2/#static-pattern-rules","text":"static pattern : \ud328\ud134\uc5d0 \ub9de\ub294 targets \uc744 \uc790\ub3d9\uc73c\ub85c prerequisites \uc73c\ub85c \ubcc0\ud658\ud574\uc8fc\ub294 \uaddc\uce59\uc774\ub2e4. targets ...: target-pattern: prereq-patterns ... \uc758 \ud615\uc2dd\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4. target-pattern \uc5d0 \ub9e4\uce6d\ub41c target \uc744 prereq-pattern \uc73c\ub85c \ubcc0\ud658\ud574\uc900\ub2e4. Example objects = foo.o bar.o $(objects) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc740 \ub2e4\uc74c\uc758 \uaddc\uce59\uacfc \ub3d9\uc77c\ud558\ub2e4. foo.o : foo . c echo \"Call gcc to generate $@ from $ <\" bar.o : bar . c echo \"Call gcc to generate bar.o from bar.c\"","title":"Static Pattern Rules"},{"location":"dev/makefile/makefile2/#static-pattern-rules-and-filter","text":"static pattern with Filter : static pattern \uc758 targets \uc744 \ud328\ud134\uc73c\ub85c \ud544\ud130\ub9c1\ud574\uc11c \ub9e4\uce6d\ub418\uc9c0 \uc54a\ub294 target \uc740 \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a4\uc9c0 \uc54a\ub294 \uaddc\uce59\uc774\ub2e4. Example objects = foo.o bar.o f1.c $(objects) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc5d0\uc11c f1.c \ub294 \ubd84\uba85 static pattern \uc5d0 \ud574\ub2f9\ub418\uc9c0 \uc54a\ub294 \uc608\uc678\uc774\ub2e4. \uc774 \uaddc\uce59\uc740 \ub2e4\uc74c\uc758 \uaddc\uce59\uacfc \ub3d9\uc77c\ud55c \uae30\ub2a5\uc744 \ud558\uac8c \ub41c\ub2e4. foo.o : foo . c echo \"Call gcc to generate $@ from $ <\" bar.o : bar . c echo \"Call gcc to generate bar.o from bar.c\" f1.c : echo \"Call gcc to generate f1.c from\" \ub530\ub77c\uc11c \uc774\ub7ec\ud55c \uc608\uc678\ub294 \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a4\uc9c0 \uc54a\uae30 \uc704\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \ud544\ud130\ub9c1\uc744 \uac78 \uc218 \uc788\ub2e4. objects = foo.o bar.o f1.c $(filter %.o $(objects)) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc740 objects \uc5d0\uc11c .o \ub85c \ub05d\ub098\ub294 \ud30c\uc77c\ub9cc \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a8\ub2e4.","title":"Static Pattern Rules and Filter"},{"location":"dev/makefile/makefile2/#double-colon","text":"Double-Colon : Double-Colon \uc73c\ub85c \uc2dc\uc791\ub418\ub294 \uaddc\uce59\uc774 \uc5ec\ub7ec\ubc88 \uc815\uc758\ub418\uc5b4\ub3c4 \uadf8\uac83\ub4e4\uc744 \ubaa8\ub450 \uc2e4\ud589\ud558\uac8c \ud574\uc900\ub2e4. \uc774 \uaddc\uce59\uc740 \ud754\ud788 \uc4f0\uc774\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\ub3c4 \ub2e4\uc74c \uc608\uc2dc\ub97c \ud55c \ubc88 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Example all : blah blah :: echo \"hello\" blah :: echo \"hello again\" \uc704 \uaddc\uce59\uc5d0\uc11c blah \uac00 Double-Colon \uc73c\ub85c \uc2dc\uc791\ub418\ub294\ub370 Single-Colon \uc73c\ub85c \ubc14\uafb8\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uba74\uc11c \ub9c8\uc9c0\ub9c9 \uaddc\uce59\ub9cc \uc2e4\ud589\ub41c\ub2e4.","title":"Double-Colon"},{"location":"dev/makefile/makefile2/#_1","text":"","title":"\uba85\ub839 \uc2e4\ud589 \uad00\ub828 \uaddc\uce59"},{"location":"dev/makefile/makefile2/#command-echoingsilencing","text":"Command Echoing/Silencing : \uba85\ub839\uc5b4 \uc55e\uc5d0 @ \ub97c \ubd99\ud788\uba74 \uba85\ub839\uc5b4\uac00 \ucd9c\ub825\ub418\uc9c0 \uc54a\ub294\ub2e4. Example all : @echo \"hello\" echo \"hello again\" \uc704 \uc608\uc2dc\uc758 \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ make hello echo \"hello again\" hello again Tip make -s \ub85c \uc2e4\ud589\ud558\uba74 \ubaa8\ub4e0 \uba85\ub839\uc5b4\uc5d0 @ \ub97c \ubd99\ud600\uc11c \uc2e4\ud589\ud55c \ud6a8\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.","title":"Command Echoing/Silencing"},{"location":"dev/makefile/makefile2/#command-execution","text":"Command Execution : \uac01\uac01\uc758 \uba85\ub839\uc5b4\ub294 \ud56d\uc0c1 \uc0c8\ub85c\uc6b4 \uc258\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \uac83\uacfc \uac19\ub2e4. \ub530\ub77c\uc11c make \uc5d0\uc11c \uba85\ub839\uc5b4\ub4e4\uc744 \uc2e4\ud589\ud558\uae30 \uc704\ud558\uc5ec \ubcf4\ud1b5 ; \\ \ub85c \uba85\ub839\uc5b4\ub97c \uc774\uc5b4\uc900\ub2e4. Example all : cd .. echo ` pwd ` cd .. ; echo ` pwd ` cd .. ; \\ echo ` pwd ` \uc704 \uc608\uc2dc\uc758 \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ make cd .. echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io/maketest cd .. ; echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io cd .. ; \\ echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io","title":"Command Execution"},{"location":"dev/makefile/makefile2/#default-shell","text":"Default Shell : make \uac00 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud558\ub294 \uae30\ubcf8 \uc258\uc740 /bin/sh \uc778\ub370 SHELL \ubcc0\uc218\ub97c \ubc14\uafc8\uc73c\ub85c\uc368 \uae30\ubcf8 \uc258\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. Example all : echo \"current shell: $$ 0\" \uc704 \uc608\uc2dc\uac00 /bin/sh \uc744 \ucd9c\ub825\ud558\ub294\ub370 \ube44\ud574 \ub2e4\uc74c \uc608\uc2dc\ub294 /bin/bash \ub97c \ucd9c\ub825\ud55c\ub2e4. SHELL = /bin/bash all : echo \"current shell: $$ 0\"","title":"Default Shell"},{"location":"dev/makefile/makefile2/#delete_on_error","text":"DELETE_ON_ERROR : make \ub294 \uaddc\uce59\uc774 nonzero \uc885\ub8cc \ucf54\ub4dc\ub97c \ubc18\ud658\ud558\uba74 \uc804\uccb4 \uc2e4\ud589\uc744 \uc911\ub2e8\ud558\ub294\ub370, .DELETE_ON_ERROR \uac00 \uc124\uc815\ub418\uba74 \uc774\ub54c nonzero \ubc18\ud658\uac12\uc744 \ubc18\ud658\ud55c \uaddc\uce59\uc758 target \ud30c\uc77c\uc744 \uc0ad\uc81c\ud55c\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 .DELETE_ON_ERROR \ub97c \uc124\uc815\ud558\ub294 \uac83\uc774 \uc88b\ub2e4. Example all : one one : touch one false \uc704 \uc608\uc2dc\ub294 false \uac00 nonzero \uc885\ub8cc\ucf54\ub4dc\ub97c \ubc18\ud658\ud558\uae30\uc5d0 \uc804\uccb4\uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uc9c0\ub9cc \ud30c\uc77c one \uc774 \uc0ac\ub77c\uc9c0\uc9c0 \uc54a\ub294\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc74c \uc608\uc2dc\ub294 \ud30c\uc77c one \uc774 \uc790\ub3d9\uc73c\ub85c \uc0ad\uc81c\ub41c\ub2e4. .DELETE_ON_ERROR all : one one : touch one false","title":"DELETE_ON_ERROR"},{"location":"dev/makefile/makefile2/#_2","text":"-k \uc635\uc158 : make \ub97c \uc774 \uc635\uc158\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud574\ub3c4 \uc2e4\ud589\uc744 \uc911\ub2e8\ud558\uc9c0 \uc54a\uace0 \ub05d\uae4c\uc9c0 \uc2e4\ud589\ud55c\ub2e4. \ubaa8\ub4e0 \uc5d0\ub7ec\ub97c \ud55c\ubc88\uc5d0 \ud655\uc778\ud558\uace0 \uc2f6\uc744 \ub54c \uc720\uc6a9\ud558\ub2e4. -i \uc635\uc158 : make \ub97c \uc774 \uc635\uc158\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \ubaa8\ub4e0 \uc5d0\ub7ec\ub97c \ubb34\uc2dc\ud55c\ub2e4. Example .DELETE_ON_ERROR : all : one one : touch one false touch one-post \uc704 \uc608\uc2dc\ub97c make -k \ub85c \uc2e4\ud589\ud558\uba74 \ud30c\uc77c one \uc0dd\uc131\ub418\uc5c8\ub2e4\uac00 false \uc5d0\uc11c \uc804\uccb4 \uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uace0 one \uc774 \uc0ad\uc81c\ub41c\ub2e4. \ubc18\uba74 make -i \ub85c \uc2e4\ud589\ud558\uba74 false \uac00 \ubc18\ud658\ud558\ub294 nonzero \ub9ac\ud134\uac12\uc744 \ubb34\uc2dc\ud558\uace0 \ud30c\uc77c one \uacfc \ud30c\uc77c one-post \uac00 \uc0dd\uc131\ub41c\ub2e4. - : \uba85\ub839\uc5b4 \uc55e\uc5d0 - \ub97c \ubd99\ud788\uba74 nonzero \uc885\ub8cc\ucf54\ub4dc\uac00 \ubc18\ud658\ub418\uc5b4\ub3c4 \uc804\uccb4 \uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uc9c0 \uc54a\uace0 \ubb34\uc2dc\ub41c\ub2e4. Example one : -false touch one \uc704 \uc608\uc2dc\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubb34\uc2dc\ub418\uace0 \ud30c\uc77c one \uc774 \uc798 \uc2e4\ud589\ub41c\ub2e4.","title":"\uc5d0\ub7ec \ucc98\ub9ac"},{"location":"dev/makefile/makefile2/#recursive-make","text":"make -C <directory> : <directory> \ub97c make \ud55c\ub2e4. Example new_contents = \"hello:;touch inside_file\" all : mkdir -p subdir echo $( new_contents ) > subdir/makefile make -C subdir \uc704 \uc608\uc2dc\ub294 subdir \ub514\ub809\ud1a0\ub9ac\ub97c \ub9cc\ub4e4\uace0 subdir/makefile \uc744 make \ud55c\ub2e4. export <variable> : \uc7ac\uadc0\uc801\uc73c\ub85c \ud638\ucd9c\ub41c \ud558\uc704 make \uc5d0\uc11c \uc0c1\uc704 make \uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. Example new_contents = \"hello:;echo \\$ $( cooly ) \" all : mkdir -p subdir echo $( new_contents ) | sed -e 's/^ //' > subdir/makefile make -C subdir cooly = \"The subdirectory can see me!\" export cooly \uc704 \uc608\uc2dc\uc758 export cooly \ub85c \uc0dd\uc131\ub41c subdir/makefile \uc5d0\uc11c cooly \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. EXPORT_ALL_VARIABLES : .EXPORT_ALL_VARIABLES: \ub97c \uc120\uc5b8\ud558\uba74 \ubaa8\ub4e0 \ubcc0\uc218\uac00 export \ub41c\ub2e4. Example .EXPORT_ALL_VARIABLES : new_contents = \"hello:\\n\\techo \\$ $( cooly ) \" cooly = \"The subdirectory can see me!\" # This would nullify the line above: unexport cooly all : mkdir -p subdir echo $( new_contents ) | sed -e 's/^ //' > subdir/makefile @echo \"---MAKEFILE CONTENTS---\" @cd subdir && cat makefile @echo \"---END MAKEFILE CONTENTS---\" cd subdir && $( MAKE ) \ucc38\uace0 \ubc0f \ucd9c\ucc98 : https://makefiletutorial.com/ http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/","title":"Recursive make"},{"location":"dev/wicwiu/about/","text":"\uc124\uacc4 \ubaa9\ud45c \u00b6 WICWIU \ub294 \uad6d\ub0b4 \ub525\ub7ec\ub2dd \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc27d\uac8c \uc774\ud574\ud558\uace0 \uc218\uc815 \ubc0f \ud655\uc7a5\uc774 \uc6a9\uc774\ud55c \ud504\ub808\uc784\uc6cc\ud06c\ub97c \ubaa9\ud45c\ub85c \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud55c WICWIU \uc758 \ud2b9\uc9d5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uad6d\ub0b4 \uac1c\ubc1c\uc790\ub4e4\uc5d0\uac8c \uce5c\uc219\ud55c C++\uc744 \uc911\uc2ec\uc73c\ub85c \uac1c\ubc1c\ub418\uc5c8\ub2e4. C++ \ud658\uacbd\uc740 \uba54\ubaa8\ub9ac \ubc0f \uc131\ub2a5 \ucd5c\uc801\ud654\uc5d0 \uc6a9\uc774\ud558\uba70 \ub2e4\uc591\ud55c \ud658\uacbd\uc5d0 \uc774\uc2dd\ud558\uae30\ub3c4 \uc6a9\uc774\ud558\ub2e4. \ud655\uc7a5\uc131\uc774 \ub192\uc544 \uc0ac\uc6a9\uc790\uac00 \uc0c8\ub85c\uc6b4 \uc2e0\uacbd\ub9dd \uad6c\uc870\ub098 \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud558\uae30 \uc6a9\uc774\ud558\ub2e4. \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\uc131\ud558\ub294 \uc5f0\uc0b0\uc790, \ucd5c\uc801\ud654 \ud568\uc218, \uc190\uc2e4 \ud568\uc218\ub294 \ubaa8\ub450 \ud074\ub798\uc2a4 \uad6c\uc870\ub85c \uc124\uacc4\ud558\uc5ec \uc0ac\uc6a9\uc790\uac00 \ub525\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\uc758 \ud655\uc7a5/\uc218\uc815\uc744 \uc6a9\uc774\ud558\uac8c \ud558\uc600\ub2e4. \ubcf8 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \ucf54\ub4dc\ub294 \ubb38\uc11c\uc640 \uc8fc\uc11d \ub4f1\uc744 \ud55c\uae00\ub85c \uc81c\uacf5\ud558\uc5ec \uad6d\ub0b4 \uac1c\ubc1c\uc790\uac00 \uc774\ud574\ud558\uae30 \uc27d\ub2e4. GPU\ub97c \uc774\uc6a9\ud55c \ub300\uaddc\ubaa8 \ubcd1\ub82c \uacc4\uc0b0\uc744 \ud1b5\ud574 \uc2e0\uacbd\ub9dd\uc744 \ube60\ub978 \uc18d\ub3c4\ub85c \ud559\uc2b5\ud560 \uc218 \uc788\ub2e4. GPU \uc5f0\uc0b0\uc740 cuDNN\uacfc cuda\ub97c \uc774\uc6a9\ud574 \uad6c\ud604\ud558\uc600\ub2e4. \ub610\ud55c, \ud638\uc2a4\ud2b8 \uba54\ubaa8\ub9ac\uc640 GPU \uba54\ubaa8\ub9ac \uac04 \ub3d9\uae30\ud654\ub97c \uc790\ub3d9\uc73c\ub85c \uc218\ud589\ud574 \uac1c\ubc1c\uc790 \ud3b8\uc758\uc131\uc774 \uc6b0\uc218\ud558\ub2e4. WICWIU \uc758 \ud2b9\uc9d5 \u00b6 \ub124\ud2b8\uc6cc\ud06c \uc790\ub3d9 \ubbf8\ubd84 \ub525\ub7ec\ub2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub124\ud2b8\uc6cc\ud06c\ub97c \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574\uc11c\ub294 \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uad6c\ud558\uc5ec\uc57c \ud558\uba70, \uacbd\uc0ac\ud558\uac15\ubc95\uc744 \uc0ac\uc6a9\ud558\uc5ec\uc11c \ub124\ud2b8\uc6cc\ud06c\ub97c \ucd5c\uc801\ud654 \ud558\ub294 \uacfc\uc815\uc744 \uac70\uccd0\uc57c \ud569\ub2c8\ub2e4. WICWIU \ub294 \uc0ac\uc6a9\uc790\uac00 \uad6c\uc131\ud55c \ub124\ud2b8\uc6cc\ud06c\uc5d0 \ub300\ud574\uc11c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uc190\uc27d\uac8c \uad6c\ud560 \uc218 \uc788\ub3c4\ub85d, \uac01 \ub178\ub4dc\ub9c8\ub2e4 BackPropagation \uba54\uc18c\ub4dc\ub97c \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uc774 \uba54\uc18c\ub4dc\ub294 \uc2e0\uacbd\ub9dd \ucd9c\ub825\ubd80\uc5d0\uc11c \uc5ed\uc804\ud30c\ub418\ub294 \ubbf8\ubd84\uc744 \uc0ac\uc6a9\ud55c \uc5f0\uc1c4\ubc95\uce59\uc73c\ub85c \uc804\uccb4 \ubbf8\ubd84 \uac12\uc744 \uad6c\ud574\uc90d\ub2c8\ub2e4. \uc2e0\uacbd\ub9dd \ubaa8\ub378 \ub514\uc790\uc778 \ud234 WICWIU \ub294 \uc0ac\uc6a9\uc790\uac00 \ub525\ub7ec\ub2dd\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uad6c\uc131 \uc694\uc18c( Operator , Layer , Loss Function , Optimizer \ub4f1)\ub97c \uc870\ud569\ud558\uc5ec \uc2e0\uacbd\ub9dd(Computational NeuralNetwork) \uc744 \uad6c\uc131\ud560 \uc218 \uc788\ub3c4\ub85d \uc2e0\uacbd\ub9dd \ubaa8\ub378 \ub514\uc790\uc778 \ud234\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc778\ud130\ud398\uc774\uc2a4\uc758 \uae30\ub2a5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ube14\ub85d \uc0ac\uc774\uc758 \ub9c1\ud06c \uc5f0\uacb0 \ubc0f \ub9c1\ud06c \ucd94\uac00, \ub9c1\ud06c \uc81c\uac70 \ube14\ub85d \ud234\ubc14\uc5d0\uc11c \ub9c8\uc6b0\uc2a4 \ub4dc\ub798\uadf8\ub97c \ud1b5\ud55c \ube14\ub85d \uc0dd\uc131 \ube14\ub85d \uc120\ud0dd \uc2dc \ube14\ub85d\uc5d0 \ub300\ud55c \uc815\ubcf4 \ucd9c\ub825 \ube14\ub85d \uc5f0\uacb0 \uc0c1\ud0dc \ubd84\uc11d (BFS \uc54c\uace0\ub9ac\uc998 \uc0ac\uc6a9) \ube14\ub85d \uc5f0\uacb0 \uc0c1\ud0dc \ubc0f \ube14\ub85d \uc885\ub958\uc5d0 \ub530\ub77c \ucf54\ub4dc \uc0dd\uc131 Project layout \u00b6 WICWIU \ub294 \ud06c\uac8c lib/ , tutorials/ , src/ \ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc138\ubd80 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. lib/ # \ucef4\ud30c\uc77c \ud6c4 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc0dd\uc131\ub418\ub294 \ub514\ub809\ud1a0\ub9ac. tutorials/ # WICWIU \ub85c \uc81c\uc791\ub41c \uc5ec\ub7ec \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud574\ubcfc \uc218 \uc788\ub294 \ucf54\ub4dc\ub4e4. # net/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \uc788\uc2b5\ub2c8\ub2e4. # data/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \ud559\uc2b5\ud560 \ub370\uc774\ud130\uc14b\uc774 \uc788\uc2b5\ub2c8\ub2e4. CIFAR10/ CIFAR100Reader/ ImageNet/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. MNIST/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. GAN/ # \ud558\uc704 \ub514\ub809\ud1a0\ub9ac \ub0b4 \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 # \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. VanillaGAN/ DCGAN/ WGAN/ BEGAN/ src/ # LossFunction, Operator, Optimizer, \uadf8\ub9ac\uace0 Module # \uc744 \ube44\ub86f\ud55c \uc18c\uc2a4\ud30c\uc77c\uc774 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac. LossFunction/ Operator/ Optimizer/ Module/ \uc2dc\uc2a4\ud15c \uc694\uad6c\uc0ac\ud56d \u00b6 \uc9c0\uc6d0 \ud50c\ub7ab\ud3fc \ubc0f \uc6b4\uc601\uccb4\uc81c WICWIU \ub294 Ubuntu 16.04 \ud658\uacbd\uc5d0\uc11c \uc124\uacc4\ub418\uc5c8\uace0 \uadf8 \uc774\uc0c1 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. Hardware \uc694\uad6c\uc0ac\ud56d Intel i5 \uc774\uc0c1\uc758 CPU \ub97c \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ud558\uae30\ub97c \uad8c\uc7a5\ud569\ub2c8\ub2e4. CUDA 9.0, cudnn 7.0.5 \uc744 \uc9c0\uc6d0\ud558\ub294 NVidia GPU \uc0ac\uc6a9\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. Software \uc694\uad6c\uc0ac\ud56d C++11 \uc774\uc0c1, gcc 5.4.0 \uc774\uc0c1\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. NVIDIA GPU \uc0ac\uc6a9 \uc2dc \uc124\uce58\ub97c \uc694\uad6c\ud569\ub2c8\ub2e4. NVIDIA Grahpic Driver CUDA (tested on v9.0 / 10.0) cudnn (tested on v7.0.5 / 7.4.1)","title":"1. About WICWIU"},{"location":"dev/wicwiu/about/#_1","text":"WICWIU \ub294 \uad6d\ub0b4 \ub525\ub7ec\ub2dd \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc27d\uac8c \uc774\ud574\ud558\uace0 \uc218\uc815 \ubc0f \ud655\uc7a5\uc774 \uc6a9\uc774\ud55c \ud504\ub808\uc784\uc6cc\ud06c\ub97c \ubaa9\ud45c\ub85c \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud55c WICWIU \uc758 \ud2b9\uc9d5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uad6d\ub0b4 \uac1c\ubc1c\uc790\ub4e4\uc5d0\uac8c \uce5c\uc219\ud55c C++\uc744 \uc911\uc2ec\uc73c\ub85c \uac1c\ubc1c\ub418\uc5c8\ub2e4. C++ \ud658\uacbd\uc740 \uba54\ubaa8\ub9ac \ubc0f \uc131\ub2a5 \ucd5c\uc801\ud654\uc5d0 \uc6a9\uc774\ud558\uba70 \ub2e4\uc591\ud55c \ud658\uacbd\uc5d0 \uc774\uc2dd\ud558\uae30\ub3c4 \uc6a9\uc774\ud558\ub2e4. \ud655\uc7a5\uc131\uc774 \ub192\uc544 \uc0ac\uc6a9\uc790\uac00 \uc0c8\ub85c\uc6b4 \uc2e0\uacbd\ub9dd \uad6c\uc870\ub098 \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud558\uae30 \uc6a9\uc774\ud558\ub2e4. \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\uc131\ud558\ub294 \uc5f0\uc0b0\uc790, \ucd5c\uc801\ud654 \ud568\uc218, \uc190\uc2e4 \ud568\uc218\ub294 \ubaa8\ub450 \ud074\ub798\uc2a4 \uad6c\uc870\ub85c \uc124\uacc4\ud558\uc5ec \uc0ac\uc6a9\uc790\uac00 \ub525\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\uc758 \ud655\uc7a5/\uc218\uc815\uc744 \uc6a9\uc774\ud558\uac8c \ud558\uc600\ub2e4. \ubcf8 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \ucf54\ub4dc\ub294 \ubb38\uc11c\uc640 \uc8fc\uc11d \ub4f1\uc744 \ud55c\uae00\ub85c \uc81c\uacf5\ud558\uc5ec \uad6d\ub0b4 \uac1c\ubc1c\uc790\uac00 \uc774\ud574\ud558\uae30 \uc27d\ub2e4. GPU\ub97c \uc774\uc6a9\ud55c \ub300\uaddc\ubaa8 \ubcd1\ub82c \uacc4\uc0b0\uc744 \ud1b5\ud574 \uc2e0\uacbd\ub9dd\uc744 \ube60\ub978 \uc18d\ub3c4\ub85c \ud559\uc2b5\ud560 \uc218 \uc788\ub2e4. GPU \uc5f0\uc0b0\uc740 cuDNN\uacfc cuda\ub97c \uc774\uc6a9\ud574 \uad6c\ud604\ud558\uc600\ub2e4. \ub610\ud55c, \ud638\uc2a4\ud2b8 \uba54\ubaa8\ub9ac\uc640 GPU \uba54\ubaa8\ub9ac \uac04 \ub3d9\uae30\ud654\ub97c \uc790\ub3d9\uc73c\ub85c \uc218\ud589\ud574 \uac1c\ubc1c\uc790 \ud3b8\uc758\uc131\uc774 \uc6b0\uc218\ud558\ub2e4.","title":"\uc124\uacc4 \ubaa9\ud45c"},{"location":"dev/wicwiu/about/#wicwiu","text":"","title":"WICWIU \uc758 \ud2b9\uc9d5"},{"location":"dev/wicwiu/about/#project-layout","text":"WICWIU \ub294 \ud06c\uac8c lib/ , tutorials/ , src/ \ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc138\ubd80 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. lib/ # \ucef4\ud30c\uc77c \ud6c4 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc0dd\uc131\ub418\ub294 \ub514\ub809\ud1a0\ub9ac. tutorials/ # WICWIU \ub85c \uc81c\uc791\ub41c \uc5ec\ub7ec \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud574\ubcfc \uc218 \uc788\ub294 \ucf54\ub4dc\ub4e4. # net/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \uc788\uc2b5\ub2c8\ub2e4. # data/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \ud559\uc2b5\ud560 \ub370\uc774\ud130\uc14b\uc774 \uc788\uc2b5\ub2c8\ub2e4. CIFAR10/ CIFAR100Reader/ ImageNet/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. MNIST/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. GAN/ # \ud558\uc704 \ub514\ub809\ud1a0\ub9ac \ub0b4 \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 # \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. VanillaGAN/ DCGAN/ WGAN/ BEGAN/ src/ # LossFunction, Operator, Optimizer, \uadf8\ub9ac\uace0 Module # \uc744 \ube44\ub86f\ud55c \uc18c\uc2a4\ud30c\uc77c\uc774 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac. LossFunction/ Operator/ Optimizer/ Module/","title":"Project layout"},{"location":"dev/wicwiu/about/#_2","text":"","title":"\uc2dc\uc2a4\ud15c \uc694\uad6c\uc0ac\ud56d"},{"location":"dev/wicwiu/code/","text":"\uc774\uacf3\uc5d0\uc11c\ub294 \uc774\uc804\uc5d0 \uc124\uba85\ud55c WICWIU \ub85c \uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\uace0, WICWIU \ub85c \ub525\ub7ec\ub2dd\uc744 \ud558\ub294 \uac83\uc744 \ucf54\ub4dc\ub85c \ud568\uaed8 \ubcf4\uba74\uc11c \uc774\ud574\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uba3c\uc800 WICWIU \uc758 \ub808\uc774\uc544\uc6c3\uc744 \ub2e4\uc2dc \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Project layout \u00b6 WICWIU \ub294 \ud06c\uac8c lib/ , tutorials/ , src/ \ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc138\ubd80 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. lib/ # \ucef4\ud30c\uc77c \ud6c4 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc0dd\uc131\ub418\ub294 \ub514\ub809\ud1a0\ub9ac. tutorials/ # WICWIU \ub85c \uc81c\uc791\ub41c \uc5ec\ub7ec \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud574\ubcfc \uc218 \uc788\ub294 \ucf54\ub4dc\ub4e4. # net/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \uc788\uc2b5\ub2c8\ub2e4. # data/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \ud559\uc2b5\ud560 \ub370\uc774\ud130\uc14b\uc774 \uc788\uc2b5\ub2c8\ub2e4. CIFAR10/ CIFAR100Reader/ ImageNet/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. MNIST/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. GAN/ # \ud558\uc704 \ub514\ub809\ud1a0\ub9ac \ub0b4 \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 # \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. VanillaGAN/ DCGAN/ WGAN/ BEGAN/ src/ # LossFunction, Operator, Optimizer, \uadf8\ub9ac\uace0 Module # \uc744 \ube44\ub86f\ud55c \uc18c\uc2a4\ud30c\uc77c\uc774 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac. LossFunction/ Operator/ Optimizer/ Module/ WICWIU \ucf54\ub4dc \uc0b4\ud3b4\ubcf4\uae30 \u00b6 Tip makefile \uc758 \ubb38\ubc95\uc5d0 \ub300\ud55c \uae30\ucd08\uac00 \ubd80\uc871\ud558\ub2e4\uba74 Makefile \uae30\ucd08 \ubb38\ubc95 \ub97c \ucc38\uace0\ud558\uc138\uc694! Compile src/ \u00b6 src/ \ub294 WICWIU \ub77c\uc774\ube0c\ub7ec\ub9ac \ub514\ub809\ud1a0\ub9ac\uc785\ub2c8\ub2e4. \uc774\uac83\uc744 \ucef4\ud30c\uc77c\ud558\ub294 makefile \ub97c \uac19\uc774 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 .SUFFIXES = .cpp .o FRAMEWORK_LIB = lib/library.a CFLAGS = -O2 -std = c++11 ENABLE_CUDNN = -D__CUDNN__ DFLAGS = -g -D__DEBUG__ 1 : Suffix , CPP \ud30c\uc77c\uc744 Object \ud30c\uc77c\ub85c \ubcc0\ud658\uc2dc\ucf1c\uc8fc\ub294 \ub0b4\uc7a5 \uaddc\uce59\uc785\ub2c8\ub2e4. 3 : WICWIU \uc758 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. 4 : \ucef4\ud30c\uc77c \uc635\uc158\uc785\ub2c8\ub2e4. 6 : cuDNN \uc0ac\uc6a9 \uc5ec\ubd80 \ud50c\ub798\uadf8\uc785\ub2c8\ub2e4. Warning cuDNN \ubbf8 \uc124\uce58 \ubc0f \ubbf8 \uc0ac\uc6a9 \uc2dc \uc8fc\uc11d\ucc98\ub9ac\ub97c \ud574\uc57c\ud569\ub2c8\ub2e4. 7 : \ub514\ubc84\uadf8 \ucf54\ub4dc \uc0ac\uc6a9 \uc5ec\ubd80 \ud50c\ub798\uadf8\uc785\ub2c8\ub2e4. Warning \ubbf8 \uc0ac\uc6a9 \uc2dc \uc8fc\uc11d\ucc98\ub9ac\ub97c \ud574\uc57c\ud569\ub2c8\ub2e4. 9 10 11 12 13 14 15 16 17 18 19 20 21 INCLUDE_PATH = -I/usr/local/cuda/include LIB_PATH = -L. -L/usr/local/cuda/lib64 CC = g++ NVCC = nvcc ifdef ENABLE_CUDNN LINKER = nvcc LFLAGS = -lcudart -lcudnn -lpthread else LINKER = g++ LFLAGS = -lpthread endif 9 : \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c CUDA \ud5e4\ub354 \ud30c\uc77c\uc744 \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 10 : CUDA \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 12 : \ucef4\ud30c\uc77c\ub7ec\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 13 : CUDA \ud30c\uc77c \uc6a9 \ucef4\ud30c\uc77c\ub7ec\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 15~21 : cuDNN \uc0ac\uc6a9 \uc2dc, NVCC \ub9c1\ucee4 \uc0ac\uc6a9 \ubc0f cudart , cudnn , pthread \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. cuDNN \ubbf8 \uc0ac\uc6a9 \uc2dc, g++ \ub9c1\ucee4 \uc0ac\uc6a9 \ubc0f pthread \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 AR = ar SRCS = \\ src/Utils.cpp \\ src/Shape.cpp \\ OBJS = ${ SRCS :.cpp=.o } ifdef ENABLE_CUDNN CUDA_SRCS = \\ src/Utils_CUDA.cu \\ src/Optimizer/AdamOptimizer_CUDA.cu \\ src/Operator/Concatenate_CUDA.cu CUDA_OBJS = ${ CUDA_SRCS :.cu=.o } endif all : $( FRAMEWORK_LIB ) 25~27 : .cpp \uc18c\uc2a4 \ucf54\ub4dc \ud30c\uc77c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. 29 : SRCS \uc758 .cpp \ud30c\uc77c\uc744 \uac01\uac01 \ucef4\ud30c\uc77c\ud574 .o \ud30c\uc77c(\uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c)\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 31~38 : cuDNN \uc0ac\uc6a9 \uc2dc, CUDA_SRC/ \uc758 .cu \ud30c\uc77c\uc744 \uac01\uac01 \ucef4\ud30c\uc77c\ud574 .o \ud30c\uc77c\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 40 : \ucef4\ud30c\uc77c \uc2dc\uc791 \ud0c0\uac9f\uc785\ub2c8\ub2e4. FRAMEWORK_LIB \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 .cpp.o : $( CC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) $( LIB_PATH ) -c $< -o $@ src/Utils_CUDA.o : src / Utils_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ src/Optimizer/AdamOptimizer_CUDA.o : src / Optimizer / AdamOptimizer_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ src/Operator/Concatenate_CUDA.o : src / Operator / Concatenate_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ $(FRAMEWORK_LIB) : $( OBJS ) $( CUDA_OBJS ) $( AR ) rcs $@ $( OBJS ) $( CUDA_OBJS ) clean : rm -rf *.o $( OBJS ) $( CUDA_OBJS ) $( FRAMEWORK_LIB ) 42~43 : \uc8fc\uc5b4\uc9c4 \ud30c\uc77c\uc744 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 45~49 : \ud574\ub2f9 .cu \ud30c\uc77c\uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 52~53 : OBJS , CUDA_OBJS \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0, FRAMEWORK_LIB , OBJS , CUDA_OBJS \uc758 .o \ud30c\uc77c\ub4e4\uc744 \uac00\uc9c0\uace0 \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. Compile tutorials/ImageNet/ \u00b6 tutorials/ImageNet/ \uc740 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. \uc774\uac83\uc744 \ucef4\ud30c\uc77c\ud558\ub294 makefile \ub97c \uac19\uc774 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .SUFFIXES = .cpp .o CFLAGS = -O2 -std = c++11 -g ENABLE_CUDNN = -D__CUDNN__ DFLAGS = -g -D__DEBUG__ LFLAGS = -lcudart -lcudnn -lpthread -ljpeg -lturbojpeg INCLUDE_PATH = -I/usr/local/cuda/include -I/opt/libjpeg-turbo/include -I/opt/libjpeg-turbo/lib64 LIB_PATH = -L. -L/usr/local/cuda/lib64 -L/opt/libjpeg-turbo/lib64 CC = g++ NVCC = nvcc FRAMEWORK_LIB = ../../lib/library.a 6 : \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9 \ud50c\ub798\uadf8, cudart , cudnn , pthread , jpeg , turbojpeg \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. 8 : \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c CUDA \ud5e4\ub354 \ud30c\uc77c\uc744 \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 9 : CUDA \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 14 : \ud504\ub808\uc784\uc6cc\ud06c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 SRCS = \\ ../../src/Shape.cpp \\ ../../src/LongArray.cpp \\ ../../src/Tensor.cpp \\ ../../src/Operator.cpp \\ ../../src/LossFunction.cpp \\ ../../src/Optimizer.cpp \\ ../../src/Module.cpp \\ ../../src/NeuralNetwork.cpp all : main .cpp.o : $( CC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) $( LIB_PATH ) -c $< -o $@ main : main . o $( FRAMEWORK_LIB ) $( NVCC ) $( CFLAGS ) $( ENABLE_CUDNN ) $( DFLAGS ) $( LFLAGS ) $( INCLUDE_PATH ) $( LIB_PATH ) -o $@ $( FRAMEWORK_LIB ) main.o $(FRAMEWORK_LIB) : $( SRC ) make -C ../.. clean : rm -rf *.o main clean_all : rm -rf *.o main make clean -C ../.. 17~25 : .cpp \uc18c\uc2a4 \ucf54\ub4dc \ud30c\uc77c, \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc758 \uc758\uc874\uc131 \ud655\uc778\uc744 \uc704\ud574 \uc815\uc758\ud558\ub294 \ubcc0\uc218\uc785\ub2c8\ub2e4. 27 : \uc2dc\uc791 \ud0c0\uac9f, main \ud30c\uc77c\uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. 29~30 : \uc8fc\uc5b4\uc9c4 \ud30c\uc77c\uc744 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 32~33 : main.o \ud30c\uc77c\uacfc FRAMEWORK_LIB \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0, \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 FRAMEWORK_LIB \uacfc main.o \ud30c\uc77c\uc744 main \ud30c\uc77c\ub85c \ub9c1\ud06c\ud55c\ub2e4. 35~36 : \uc9c0\uc815\ub41c \uacbd\ub85c\uc5d0\uc11c make \uc2e4\ud589 Tutorials tutorials/MNIST \u00b6 tutorials/MNIST \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. tutorials/MNIST/net/my_CNN.hpp \u00b6 tutorials/MNIST/net/my_CNN.hpp \ub294 WICWIU \uc5d0\uc11c CNN \uc73c\ub85c MNIST \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. MNIST \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class my_CNN : public NeuralNetwork < float > { private : public : my_CNN ( Tensorholder < float > * x , Tensorholder < float > * label ) { SetInput ( 2 , x , label ); Operator < float > * out = NULL ; out = new ReShape < float > ( x , 28 , 28 , \"Flat2Image\" ); // ======================= layer 1======================= out = new ConvolutionLayer2D < float > ( out , 1 , 32 , 3 , 3 , 1 , 1 , 0 , TRUE , \"Conv_1\" ); out = new BatchNormalizeLayer < float > ( out , TRUE , \"BN_1\" ); out = new Relu < float > ( out , \"Relu_1\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_1\" ); // ======================= layer 2======================= out = new ConvolutionLayer2D < float > ( out , 32 , 64 , 3 , 3 , 1 , 1 , 0 , TRUE , \"Conv_2\" ); out = new BatchNormalizeLayer < float > ( out , TRUE , \"BN_2\" ); out = new Relu < float > ( out , \"Relu_2\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_2\" ); // ======================= layer 3======================= out = new ReShape < float > ( out , 1 , 1 , 5 * 5 * 64 , \"Image2Flat\" ); // ======================= layer 3======================= out = new Linear < float > ( out , 5 * 5 * 64 , 1024 , TRUE , \"Fully-Connected_1\" ); out = new Relu < float > ( out , \"Relu_3\" ); //// ======================= layer 4======================= out = new Linear < float > ( out , 1024 , 10 , TRUE , \"Fully-connected_2\" ); AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , label , \"SCE\" )); // ======================= Select Optimizer =================== SetOptimizer ( new RMSPropOptimizer < float > ( GetParameter (), 0.01 , 0.9 , 1e-08 , FALSE , MINIMIZE )); } virtual ~ my_CNN () {} }; 5 : SetInput \ud568\uc218\ub97c \ud1b5\ud574 \\(2\\) \uac00\uc9c0 \uc785\ub825( data , label ) \uc774 \ubaa8\ub378\uc758 \ud559\uc2b5\uc5d0 \ub4e4\uc5b4\uac04\ub2e4\ub294 \uac83\uc744 \uba85\uc2dc\ud569\ub2c8\ub2e4. 9 : ReShape \ud568\uc218\ub85c MNIST \uc190\uae00\uc528 \uc774\ubbf8\uc9c0 x \ub97c Tensor \ud615\ud0dc\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. 12~30 : ConvolutionLayer2D , BatchNormalizeLayer , Relu , Maxpooling \ub4f1\uc758 Operator \ub4e4\ub85c \uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4. 35 : SetLossFunction \ud568\uc218\ub85c \uc190\uc2e4\ud568\uc218\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 39 : SetOptimizer \ud568\uc218\ub85c Optimizer \ub97c \uc815\uc758\ud569\ub2c8\ub2e4. tutorials/MNIST/main.cpp \u00b6 tutorials/MNIST/main.cpp \ub294 tutorials/MNIST/net/my_CNN.hpp \uc5d0\uc11c \uc815\uc758\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0ac\uc6a9\ud558\uc5ec MNIST \uc190\uae00\uc528 \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. Source 19 20 21 22 23 24 25 26 27 28 29 30 // create input, label data placeholder -> Tensorholder Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 10 , \"label\" ); // ======================= Select net =================== NeuralNetwork < float > * net = new my_CNN ( x , label ); // ======================= Prepare Data =================== MNISTDataSet < float > * train_dataset = new MNISTDataSet < float > ( \"data/train-images-idx3-ubyte\" , \"data/train-labels-idx1-ubyte\" , TRAINING ); DataLoader < float > * train_dataloader = new DataLoader < float > ( train_dataset , BATCH , TRUE , 20 , FALSE ); MNISTDataSet < float > * test_dataset = new MNISTDataSet < float > ( \"data/t10k-images-idx3-ubyte\" , \"data/t10k-labels-idx1-ubyte\" , TESTING ); DataLoader < float > * test_dataloader = new DataLoader < float > ( test_dataset , BATCH , FALSE , 20 , FALSE ); 20~21 : Tensorholder (placeholder) \ud074\ub798\uc2a4\ub85c \uc190\uae00\uc528 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. 24 : \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c CNN \uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 26~30 : MNIST \ub370\uc774\ud130\uc14b\uacfc \ub370\uc774\ud130\ub85c\ub354\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 // ======================= Train ======================= float train_accuracy = 0.f ; float train_avg_loss = 0.f ; net -> SetModeTrain (); startTime = clock (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { //dataset->CreateTrainDataPair(BATCH); std :: vector < Tensor < float > *> * temp = train_dataloader -> GetDataFromGlobalBuffer (); // printf(\"%d\\r\\n\", temp->size()); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ // std::cin >> temp; net -> FeedInputTensor ( 2 , x_t , l_t ); net -> ResetParameterGradient (); net -> Train (); // std::cin >> temp; train_accuracy += net -> GetAccuracy (); train_avg_loss += net -> GetLoss (); printf ( \" \\r Train complete percentage is %d / %d -> loss : %f, acc : %f\" /*(ExcuteTime : %f)*/ , j + 1 , LOOP_FOR_TRAIN , train_avg_loss / ( j + 1 ), train_accuracy / ( j + 1 ) /*nProcessExcuteTime*/ ); fflush ( stdout ); } endTime = clock (); nProcessExcuteTime = (( double )( endTime - startTime )) / CLOCKS_PER_SEC ; printf ( \" \\n (excution time per epoch : %f) \\n\\n \" , nProcessExcuteTime ); 72~77 : MNIST \ub370\uc774\ud130\uc14b\uc73c\ub85c\ubd80\ud130 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \ubc1b\uc544 \uc800\uc7a5\ud569\ub2c8\ub2e4. 79~82 : cuDNN \uc744 \uc0ac\uc6a9 \ud560 \uacbd\uc6b0, placeholder \uc758 device \ub97c GPU \ub85c \uc124\uc815\ud55c\ub2e4. 84~86 : \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130\uc14b(\uc190\uae00\uc528 \uc774\ubbf8\uc9c0, \uc815\ub2f5\ub808\uc774\ube14)\ub97c \ub9cc\ub4e4\uc5b4 \ub123\uace0 \uc2e0\uacbd\ub9dd\uc758 Gradient \uac12\uc744 \ucd08\uae30\ud654 \ud558\uace0 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4. 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 // ======================= Test ====================== float test_accuracy = 0.f ; float test_avg_loss = 0.f ; net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_TEST ; j ++ ) { //dataset->CreateTestDataPair(BATCH); std :: vector < Tensor < float > *> * temp = test_dataloader -> GetDataFromGlobalBuffer (); // printf(\"%d\\r\\n\", temp->size()); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , x_t , l_t ); net -> Test (); test_accuracy += net -> GetAccuracy (); test_avg_loss += net -> GetLoss (); printf ( \" \\r Test complete percentage is %d / %d -> loss : %f, acc : %f\" , j + 1 , LOOP_FOR_TEST , test_avg_loss / ( j + 1 ), test_accuracy / ( j + 1 )); fflush ( stdout ); } 106 : \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8 \ubaa8\ub4dc(gradient \ub97c \uacc4\uc0b0\ud558\uc9c0 \uc54a\uc74c)\ub85c \uc804\ud658\ud569\ub2c8\ub2e4. 110~115 : MNIST \ub370\uc774\ud130\uc14b\uc73c\ub85c\ubd80\ud130 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \ubc1b\uc544 \uc800\uc7a5\ud569\ub2c8\ub2e4. 122~123 : \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130(image, label)\ub97c \uc785\ub825\ud558\uace0 \ud14c\uc2a4\ud2b8\ub97c \uc9c4\ud589\ud569\ub2c8\ub2e4. 125~126 : \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \uce21\uc815\ud55c\ub2e4. Tutorials tutorials/ImageNet (ResNet) \u00b6 tutorials/ImageNet \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. tutorials/ImageNet/net/my_Resnet.hpp \u00b6 tutorials/ImageNet/net/my_Resnet.hpp \ub294 WICWIU \uc5d0\uc11c ResNet \uc73c\ub85c ImageNet \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. ImageNet \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. ResNet \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc5ec\ub7ec \uac1c\uc758 BasicBlock(residual block) \uc744 \uc801\uce35\uc2dc\ucf1c \uad6c\uc131\ub429\ub2c8\ub2e4. Source 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 template < typename DTYPE > class BasicBlock : public Module < DTYPE > { private : public : BasicBlock ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pStride = 1 , std :: string pName = NULL ) { Alloc ( pInput , pNumInputChannel , pNumOutputChannel , pStride , pName ); } virtual ~ BasicBlock () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pStride , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * remember = pInput ; Operator < DTYPE > * out = pInput ; // 1 out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , pNumOutputChannel , 3 , 3 , pStride , pStride , 1 , FALSE , \"BasicBlock_Conv1\" + pName ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BasicBlock_BN1\" + pName ); out = new Relu < DTYPE > ( out , \"BasicBlock_Relu1\" + pName ); // 2 out = new ConvolutionLayer2D < DTYPE > ( out , pNumOutputChannel , pNumOutputChannel , 3 , 3 , 1 , 1 , 1 , FALSE , \"BasicBlock_Conv2\" + pName ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BasicBlock_BN2\" + pName ); // out = new Relu<DTYPE>(out, \"BasicBlock_Relu2\" + pName); // ShortCut if (( pStride != 1 ) || ( pNumInputChannel != pNumOutputChannel )) { remember = new ConvolutionLayer2D < DTYPE > ( remember , pNumInputChannel , pNumOutputChannel , 1 , 1 , pStride , pStride , 0 , FALSE , \"BasicBlock_Conv3_Shortcut\" + pName ); remember = new BatchNormalizeLayer < DTYPE > ( remember , TRUE , \"BasicBlock_BN3_Shortcut\" + pName ); // remember = new Relu<DTYPE>(remember, \"BasicBlock_Relu3_Shortcut\" + pName); } // Add (for skip Connection) out = new Addall < DTYPE > ( remember , out , \"ResNet_Skip_Add\" + pName ); // out = new Addall<DTYPE>(remember, out, \"ResNet_Skip_Add\"); // Last Relu out = new Relu < DTYPE > ( out , \"BasicBlock_Relu3\" + pName ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 20~32 : BasicBlock \uc740 Convolution layer , BatchNormailze layer , Relu \ub85c \uc774\ub8e8\uc5b4\uc9c4 2\uac1c\uc758 layer\uc640 skip connection(Short cut) \uc73c\ub85c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. 37 : skip connection \uc740 Addall Operator \ub85c \uad6c\ud604\ub429\ub2c8\ub2e4. 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 template < typename DTYPE > class ResNet : public NeuralNetwork < DTYPE > { private : int m_numInputChannel ; public : ResNet ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pNumOfClass ) { Alloc ( pInput , pLabel , pBlockType , pNumOfBlock1 , pNumOfBlock2 , pNumOfBlock3 , pNumOfBlock4 , pNumOfClass ); } virtual ~ ResNet () {} int Alloc ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pNumOfClass ) { this -> SetInput ( 2 , pInput , pLabel ); m_numInputChannel = 64 ; Operator < DTYPE > * out = pInput ; // ReShape out = new ReShape < DTYPE > ( out , 3 , 224 , 224 , \"ReShape\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN0\"); // 1 out = new ConvolutionLayer2D < DTYPE > ( out , 3 , m_numInputChannel , 7 , 7 , 2 , 2 , 3 , FALSE , \"Conv\" ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BN0\" ); out = new Relu < DTYPE > ( out , \"Relu0\" ); out = new Maxpooling2D < float > ( out , 3 , 3 , 2 , 2 , 1 , \"MaxPool_2\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN1\"); out = this -> MakeLayer ( out , m_numInputChannel , pBlockType , pNumOfBlock1 , 1 , \"Block1\" ); out = this -> MakeLayer ( out , 128 , pBlockType , pNumOfBlock2 , 2 , \"Block2\" ); out = this -> MakeLayer ( out , 256 , pBlockType , pNumOfBlock3 , 2 , \"Block3\" ); out = this -> MakeLayer ( out , 512 , pBlockType , pNumOfBlock3 , 2 , \"Block4\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN1\"); // out = new Relu<DTYPE>(out, \"Relu1\"); out = new GlobalAvaragePooling2D < DTYPE > ( out , \"Avg Pooling\" ); out = new ReShape < DTYPE > ( out , 1 , 1 , 512 , \"ReShape\" ); out = new Linear < DTYPE > ( out , 512 , pNumOfClass , FALSE , \"Classification\" ); // out = new BatchNormalizeLayer < DTYPE > (out, FALSE, \"BN0\"); this -> AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== this -> SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , pLabel , \"SCE\" )); // SetLossFunction(new MSE<float>(out, label, \"MSE\")); // ======================= Select Optimizer =================== // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.1, 0.9, 5e-4, MINIMIZE)); // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.001, MINIMIZE)); this -> SetOptimizer ( new AdamOptimizer < float > ( this -> GetParameter (), 0.001 , 0.9 , 0.999 , 1e-08 , 5e-4 , MINIMIZE )); return TRUE ; } Operator < DTYPE >* MakeLayer ( Operator < DTYPE > * pInput , int pNumOfChannel , std :: string pBlockType , int pNumOfBlock , int pStride , std :: string pName = NULL ) { if ( pNumOfBlock == 0 ) { return pInput ; } else if (( pBlockType == \"BasicBlock\" ) && ( pNumOfBlock > 0 )) { Operator < DTYPE > * out = pInput ; out = new BasicBlock < DTYPE > ( out , m_numInputChannel , pNumOfChannel , pStride , pName ); int pNumOutputChannel = pNumOfChannel ; for ( int i = 1 ; i < pNumOfBlock ; i ++ ) { out = new BasicBlock < DTYPE > ( out , pNumOutputChannel , pNumOutputChannel , 1 , pName ); } m_numInputChannel = pNumOutputChannel ; return out ; } else if (( pBlockType == \"Bottleneck\" ) && ( pNumOfBlock > 0 )) { return NULL ; } else return NULL ; } }; 73~83 : WICWIU \uc758 ResNet \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc740 Conv , BatchNorm \ub4f1\uc758 Operator \ub4e4\uacfc \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c 4\uac1c\uc758 BasicBlock \uc73c\ub85c \ubaa8\ub378\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4. 98~104 : SetLossFunction \uacfc SetOptimizer \ub97c \uc774\uc6a9\ud574 \uc190\uc2e4\ud568\uc218\uc640 Optimizer \ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 131 132 133 134 135 136 137 template < typename DTYPE > NeuralNetwork < DTYPE >* Resnet18 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new ResNet < DTYPE > ( pInput , pLabel , \"BasicBlock\" , 2 , 2 , 2 , 2 , pNumOfClass ); } template < typename DTYPE > NeuralNetwork < DTYPE >* Resnet34 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new ResNet < DTYPE > ( pInput , pLabel , \"BasicBlock\" , 3 , 4 , 6 , 3 , pNumOfClass ); } 131~137 ResNet \uc758 \uc885\ub958\ub294 BasicBlock \ub0b4\ubd80\uc758 \ucc44\ub110 \uc218\ub97c \ub2e4\ub974\uac8c \ud568\uc73c\ub85c\uc368 \ub098\ub204\uc5b4\uc9d1\ub2c8\ub2e4. tutorials/ImageNet/main.cpp \u00b6 tutorials/ImageNet/main.cpp \uc740 Source 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 int main ( int argc , char const * argv []) { ... // create input, label data placeholder -> Tensorholder Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 150528 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 1000 , \"label\" ); // ======================= Select net =================== NeuralNetwork < float > * net = Resnet18 < float > ( x , label , NUMBER_OF_CLASS ); // NeuralNetwork<float> *net = Resnet34<float>(x, label, NUMBER_OF_CLASS); // NeuralNetwork<float> *net = DenseNetLite<float>(x, label, NUMBER_OF_CLASS); net -> PrintGraphInformation (); // ======================= Prepare Data =================== ImageNetDataReader < float > * train_data_reader = new ImageNetDataReader < float > ( BATCH , 25 , TRUE ); train_data_reader -> UseNormalization ( TRUE , mean , stddev ); train_data_reader -> UseRandomHorizontalFlip (); // train_data_reader->UseRandomVerticalFlip(); ImageNetDataReader < float > * test_data_reader = new ImageNetDataReader < float > ( BATCH , 25 , FALSE ); test_data_reader -> UseNormalization ( TRUE , mean , stddev ); train_data_reader -> StartProduce (); test_data_reader -> StartProduce (); 21~23 : \ub370\uc774\ud130 placeholder \ub97c \ub9cc\ub4e0\ub2e4. 26 : \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud55c\ub2e4. 32~34 : ImageNet \ub370\uc774\ud130\ub294 random crop , normalization , random Filp \uacfc\uc815\uc744 \uac70\uccd0 \uc804\ucc98\ub9ac \ub41c\ub2e4. 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 // ======================= Train ======================= ... net -> SetModeTrain (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { data = train_data_reader -> GetDataFromBuffer (); #ifdef __CUDNN__ data [ 0 ] -> SetDeviceGPU ( GPUID ); data [ 1 ] -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , data [ 0 ], data [ 1 ]); delete data ; data = NULL ; net -> ResetParameterGradient (); net -> Train (); 111~117 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \ubc84\ud37c\ub85c\ubd80\ud130 \uac00\uc838\uc640 \uc2e0\uacbd\ub9dd\uc5d0 \ub123\ub294\ub2e4. 120~121 : Gradient\ub97c \ucd08\uae30\ud654 \ud55c \ub4a4 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4. 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 // ======================= Test ====================== ... net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_TEST ; j ++ ) { data = test_data_reader -> GetDataFromBuffer (); #ifdef __CUDNN__ data [ 0 ] -> SetDeviceGPU ( GPUID ); // \u7570\ubdc0\uc351 ?\uba2e\ub8de???\uafa9\uc282 data [ 1 ] -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , data [ 0 ], data [ 1 ]); delete data ; data = NULL ; net -> Test (); test_avg_accuracy += net -> GetAccuracy ( NUMBER_OF_CLASS ); test_avg_top5_accuracy += net -> GetTop5Accuracy ( NUMBER_OF_CLASS ); test_avg_loss += net -> GetLoss (); printf ( \" \\r %d / %d -> avg_loss : %0.4f, avg_acc : %0.4f, avg_top5_acc : %0.4f\" /*(ExcuteTime : %f)*/ , j + 1 , LOOP_FOR_TEST , test_avg_loss / ( j + 1 ), test_avg_accuracy / ( j + 1 ), test_avg_top5_accuracy / ( j + 1 )); fflush ( stdout ); } 157 : \uc2e0\uacbd\ub9dd\uc744 inference \ubaa8\ub4dc\ub85c \uc804\ud658 \ud55c\ub2e4. 160~170 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \ubc84\ud37c\ub85c\ubd80\ud130 \uac00\uc838\uc640 \uc2e0\uacbd\ub9dd\uc5d0 \ub123\uc5b4 \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \uce21\uc815\ud55c\ub2e4. 172~181 : \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \ucd9c\ub825\ud55c\ub2e4. Tutorials tutorials/ImageNet (DenseNet) \u00b6 tutorials/ImageNet \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. tutorials/ImageNet/net/my_Densenet.hpp \u00b6 tutorials/ImageNet/net/my_Densenet.hpp \ub294 WICWIU \uc5d0\uc11c DenseNet \uc73c\ub85c ImageNet \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. DenseNet \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc5ec\ub7ec \uac1c\uc758 DenseNetBlock \uc744 \uc801\uce35\uc2dc\ucf1c \uad6c\uc131\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 template < typename DTYPE > class DenseNetBlock : public Module < DTYPE > { private : public : DenseNetBlock ( Operator < DTYPE > * pInput , int pNumInputChannel , int pGrowthRate , std :: string pName = NULL ) : Module < DTYPE > ( pName ) { Alloc ( pInput , pNumInputChannel , pGrowthRate , pName ); } virtual ~ DenseNetBlock () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pGrowthRate , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * remember = pInput ; Operator < DTYPE > * out = pInput ; // 1 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"DenseNetBlock_BN1\" + pName ); out = new Relu < DTYPE > ( out , \"DenseNetBlock_Relu1\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , 4 * pGrowthRate , 1 , 1 , 1 , 1 , 0 , FALSE , \"DenseNetBlock_Conv1\" + pName ); // 2 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"DenseNetBlock_BN2\" + pName ); out = new Relu < DTYPE > ( out , \"DenseNetBlock_Relu2\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , 4 * pGrowthRate , pGrowthRate , 3 , 3 , 1 , 1 , 1 , FALSE , \"DenseNetBlock_Conv2\" + pName ); // Concat out = new ConcatenateChannelWise < float > ( remember , out , \"DenseNetBlock_ConCat\" ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 20~41 : DenseNet \uc740 \uc774\uc640 \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 template < typename DTYPE > class Transition : public Module < DTYPE > { private : public : Transition ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , std :: string pName = NULL ) : Module < DTYPE > ( pName ) { Alloc ( pInput , pNumInputChannel , pNumOutputChannel , pName ); } virtual ~ Transition () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * out = pInput ; // 1 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"Transition_BN\" + pName ); out = new Relu < DTYPE > ( out , \"Transition_Relu\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , pNumOutputChannel , 1 , 1 , 1 , 1 , 0 , FALSE , \"Transition_Conv\" + pName ); // Avg Pooling out = new AvaragePooling2D < float > ( out , 2 , 2 , 2 , 2 , 0 , \"AVG\" ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 40~66 : DenseNetBlock \uc744 \uc5f0\uacb0\ud558\ub294 Transition \uc740 \uc704\uc640 \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 template < typename DTYPE > class DenseNet : public NeuralNetwork < DTYPE > { private : int m_numInputChannel ; int m_numOutputChannel ; int m_growthRate ; float m_reduction ; public : DenseNet ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pGrowthRate = 12 , float pReduction = 0.5 , int pNumOfClass = 1000 ) { Alloc ( pInput , pLabel , pBlockType , pNumOfBlock1 , pNumOfBlock2 , pNumOfBlock3 , pNumOfBlock4 , pGrowthRate , pReduction , pNumOfClass ); } virtual ~ DenseNet () {} int Alloc ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pGrowthRate , float pReduction , int pNumOfClass ) { this -> SetInput ( 2 , pInput , pLabel ); m_numInputChannel = 2 * pGrowthRate ; m_growthRate = pGrowthRate ; m_reduction = pReduction ; Operator < DTYPE > * out = pInput ; // ReShape out = new ReShape < DTYPE > ( out , 3 , 224 , 224 , \"ReShape\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN0\"); // 1 out = new ConvolutionLayer2D < DTYPE > ( out , 3 , m_numInputChannel , 7 , 7 , 2 , 2 , 3 , FALSE , \"Conv\" ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BN0\" ); out = new Relu < DTYPE > ( out , \"Relu0\" ); out = this -> MakeLayer ( out , m_numInputChannel , pBlockType , pNumOfBlock1 , 1 , \"Block1\" ); m_numInputChannel += pNumOfBlock1 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans1\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock2 , 1 , \"Block2\" ); m_numInputChannel += pNumOfBlock2 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans2\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock3 , 1 , \"Block3\" ); m_numInputChannel += pNumOfBlock3 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans3\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock4 , 1 , \"Block4\" ); m_numInputChannel += pNumOfBlock4 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans4\" ); m_numInputChannel = m_numOutputChannel ; out = new GlobalAvaragePooling2D < DTYPE > ( out , \"Avg Pooling\" ); out = new ReShape < DTYPE > ( out , 1 , 1 , m_numInputChannel , \"ReShape\" ); out = new Linear < DTYPE > ( out , m_numInputChannel , pNumOfClass , TRUE , \"Classification\" ); this -> AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== this -> SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , pLabel , \"SCE\" )); // SetLossFunction(new MSE<float>(out, label, \"MSE\")); // ======================= Select Optimizer =================== // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.000001, 0.9, 5e-4, MINIMIZE)); // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.001, MINIMIZE)); this -> SetOptimizer ( new AdamOptimizer < float > ( this -> GetParameter (), 0.001 , 0.9 , 0.999 , 1e-08 , 5e-4 , MINIMIZE )); return TRUE ; } Operator < DTYPE >* MakeLayer ( Operator < DTYPE > * pInput , int pNumOfChannel , std :: string pBlockType , int pNumOfBlock , int pStride , std :: string pName = NULL ) { if ( pNumOfBlock == 0 ) { return pInput ; } else if (( pBlockType == \"DenseNetBlock\" ) && ( pNumOfBlock > 0 )) { Operator < DTYPE > * out = pInput ; for ( int i = 0 ; i < pNumOfBlock ; i ++ ) { out = new DenseNetBlock < DTYPE > ( out , pNumOfChannel , m_growthRate , pName ); pNumOfChannel += m_growthRate ; } return out ; } else if (( pBlockType == \"Bottleneck\" ) && ( pNumOfBlock > 0 )) { return NULL ; } else return NULL ; } }; template < typename DTYPE > NeuralNetwork < DTYPE >* DenseNet121 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new DenseNet < DTYPE > ( pInput , pLabel , \"DenseNetBlock\" , 6 , 12 , 24 , 16 , 12 , 0.5 , pNumOfClass ); } template < typename DTYPE > NeuralNetwork < DTYPE >* DenseNetLite ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new DenseNet < DTYPE > ( pInput , pLabel , \"DenseNetBlock\" , 2 , 3 , 6 , 4 , 32 , 0.5 , pNumOfClass ); } 92~121 : WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc758 DenseNet \uc740 \\(4\\) \uac1c\uc758 DenseNetBlock \uacfc \uac01\uac01\uc758 DenseNetBlock \uc0ac\uc774\ub97c \uc787\ub294 4\uac1c\uc758 Transition \uc73c\ub85c \uc815\uc758\ub429\ub2c8\ub2e4. Tutorials tutorials/GAN/VanillaGAN \u00b6 tutorials/GAN/VanillaGAN \uc740 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. WICWIU \uc758 GAN \uc740 Generator \uc640 Discriminator \ub97c \uac01\uac01 \uad6c\uc131\ud55c\ub2e4. tutorials/GAN/VanillaGAN/net/my_Generator.hpp \u00b6 WICWIU \uc758 GAN \ud29c\ud1a0\ub9ac\uc5bc\uc758 Generator \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 template < typename DTYPE > class my_Generator : public NeuralNetwork < DTYPE > { public : my_Generator ( Operator < float > * z ){ Alloc ( z ); } virtual ~ my_Generator () { } int Alloc ( Operator < float > * z ){ this -> SetInput ( z ); Operator < float > * out = z ; // ======================= layer 1 ====================== out = new Linear < float > ( out , 100 , 128 , TRUE , \"G_L1\" ); // ======================= layer 2 ====================== out = new Linear < float > ( out , 128 , 256 , TRUE , \"G_L2\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN1\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu1\" ); // out = new Relu<float>(out, \"G_Relu1\"); // ======================= layer 3 ====================== out = new Linear < float > ( out , 256 , 512 , TRUE , \"G_L3\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN2\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu2\" ); // out = new Relu<float>(out, \"G_Relu2\"); // ======================= layer 4 ====================== out = new Linear < float > ( out , 512 , 1024 , TRUE , \"G_L4\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN3\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu3\" ); // out = new Relu<float>(out, \"G_Relu3\"); // ======================= layer 5 ==================== out = new Linear < float > ( out , 1024 , 784 , TRUE , \"G_L5\" ); out = new Tanh < float > ( out , \"Tanh\" ); this -> AnalyzeGraph ( out ); } }; tutorials/GAN/VanillaGAN/net/my_Discriminator.hpp \u00b6 WICWIU \uc758 GAN \ud29c\ud1a0\ub9ac\uc5bc\uc758 Discriminator \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 template < typename DTYPE > class my_Discriminator : public NeuralNetwork < DTYPE > { public : my_Discriminator ( Operator < float > * x ){ Alloc ( x ); } virtual ~ my_Discriminator () { } int Alloc ( Operator < float > * x ){ this -> SetInput ( x ); Operator < float > * out = x ; // ======================= layer 1 ====================== out = new Linear < float > ( out , 784 , 512 , TRUE , \"D_L1\" ); out = new LRelu < float > ( out , 0.2 , \"D_LRelu1\" ); // out = new Relu<float>(out, \"D_Relu1\"); // ======================= layer 2 ====================== out = new Linear < float > ( out , 512 , 256 , TRUE , \"D_L2\" ); out = new LRelu < float > ( out , 0.2 , \"D_LRelu2\" ); // out = new Relu<float>(out, \"D_Relu2\"); // ======================= layer 3 ====================== out = new Linear < float > ( out , 256 , 1 , TRUE , \"D_L3\" ); out = new Sigmoid < float > ( out , \"D_Sigmoid\" ); this -> AnalyzeGraph ( out ); } }; tutorials/GAN/VanillaGAN/net/my_GAN.hpp \u00b6 WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c Generator \uc640 Discriminator \uc758 \ud559\uc2b5\uc744 \uc81c\uc5b4\ud558\ub294 GAN \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 template < typename DTYPE > class my_GAN : public GAN < DTYPE > { public : my_GAN ( Tensorholder < float > * z , Tensorholder < float > * x , Tensorholder < float > * label ){ Alloc ( z , x , label ); } virtual ~ my_GAN () { } int Alloc ( Tensorholder < float > * z , Tensorholder < float > * x , Tensorholder < float > * label ){ this -> SetInput ( 3 , z , x , label ); this -> SetGenerator ( new my_Generator < float > ( z )); this -> SetSwitch ( new Switch < float > ( this -> GetGenerator (), x )); this -> SetDiscriminator ( new my_Discriminator < float > ( this -> GetSwitch ())); this -> AnalyzeGraph ( this -> GetDiscriminator ()); this -> SetLabel ( label ); // ======================= Select LossFunction =================== this -> SetGANLossFunctions ( new VanillaGANGeneratorLoss < float > ( this -> GetDiscriminator (), this -> GetLabel (), \"VanillaGANGeneratorLoss\" ), new VanillaGANDiscriminatorLoss < float > ( this -> GetDiscriminator (), this -> GetLabel (), \"VanillaGANDiscriminatorLoss\" )); // ======================= Select Optimizer =================== // this->SetGANOptimizers(new GradientDescentOptimizer<float>(this->GetGenerator()->GetParameter(), 0.000001, MINIMIZE), new GradientDescentOptimizer<float>(this->GetDiscriminator()->GetParameter(), 0.000001, MAXIMIZE)); // this->SetGANOptimizers(new RMSPropOptimizer<float>(this->GetGenerator()->GetParameter(), 0.0001, 0.9, 1e-08, FALSE, MINIMIZE), new RMSPropOptimizer<float>(this->GetDiscriminator()->GetParameter(), 0.0001, 0.9, 1e-08, FALSE, MAXIMIZE)); this -> SetGANOptimizers ( new AdamOptimizer < float > ( this -> GetGenerator () -> GetParameter (), 0.0002 , 0.5 , 0.999 , 1e-08 , MINIMIZE ), new AdamOptimizer < float > ( this -> GetDiscriminator () -> GetParameter (), 0.0002 , 0.5 , 0.999 , 1e-08 , MINIMIZE )); } }; tutorials/GAN/VanillaGAN/main.cpp \u00b6 WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c GAN \uc744 \uc0ac\uc6a9\ud558\ub294 main \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int main ( int argc , char const * argv []) { ... // create input, label data placeholder -> Tensorholder Tensorholder < float > * z = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 100 , \"z\" ); Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 1 , \"label\" ); // create NoiseGenrator GaussianNoiseGenerator < float > * Gnoise = new GaussianNoiseGenerator < float > ( 1 , BATCH , 1 , 1 , 100 , 0 , 1 ); // ======================= Select net =================== // GAN<float> *net = new my_BEGAN<float>(z, x, label); GAN < float > * net = new my_GAN < float > ( z , x , label ); //net->Load(filename); // ======================= Prepare Data =================== MNISTDataSet < float > * dataset = CreateMNISTDataSet < float > (); 16 : Generator \uc758 \uc785\ub825\uc73c\ub85c \uc0ac\uc6a9\ud560 latent variable\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4. 25 : \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c GAN \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud55c\ub2e4. 29 : MNIST \ub370\uc774\ud130\uc14b\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4. 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 //Start make Noise Gnoise -> StartProduce (); for ( int i = epoch + 1 ; i < EPOCH ; i ++ ) { std :: cout << \"EPOCH : \" << i << '\\n' ; // ======================= Train ======================= float genLoss = 0.f ; float discLoss = 0.f ; net -> SetModeTrain (); startTime = clock (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { dataset -> CreateTrainDataPair ( BATCH ); Tensor < float > * x_t = dataset -> GetTrainFeedImage (); Tensor < float > * l_t = dataset -> GetTrainFeedLabel (); delete l_t ; Tensor < float > * z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , z_t , x_t ); net -> ResetParameterGradient (); net -> TrainDiscriminator (); z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 1 , z_t ); net -> ResetParameterGradient (); net -> TrainGenerator (); if (( j + 1 ) % 50 == 0 ){ genLoss = ( * net -> GetGeneratorLossFunction () -> GetResult ())[ Index5D ( net -> GetGeneratorLossFunction () -> GetResult () -> GetShape (), 0 , 0 , 0 , 0 , 0 )]; discLoss = ( * net -> GetDiscriminatorLossFunction () -> GetResult ())[ Index5D ( net -> GetDiscriminatorLossFunction () -> GetResult () -> GetShape (), 0 , 0 , 0 , 0 , 0 )]; printf ( \" \\r Train complete percentage is %d / %d -> Generator Loss : %f, Discriminator Loss : %f\" , j + 1 , LOOP_FOR_TRAIN , genLoss , discLoss ); fflush ( stdout ); string filePath = \"trained/epoch\" + std :: to_string ( i ) + \"_\" + std :: to_string ( j + 1 ) + \".jpg\" ; const char * cstr = filePath . c_str (); Tensor2Image < float > ( net -> GetGenerator () -> GetResult (), cstr , 3 , 20 , 28 , 28 ); } } endTime = clock (); nProcessExcuteTime = (( double )( endTime - startTime )) / CLOCKS_PER_SEC ; printf ( \" \\n (excution time per epoch : %f) \\n\\n \" , nProcessExcuteTime ); 60 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. 63 : latent \ubcc0\uc218\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. 70~71 : Gradient \ub97c \ucd08\uae30\ud654\ud558\uace0 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud569\ub2c8\ub2e4. 95 \ud589: Generator \uc5d0\uc11c \uc0dd\uc131\ud55c \uc774\ubbf8\uc9c0\ub97c \uc77c\uc815 step\ub9c8\ub2e4 \uc800\uc7a5\ud55c\ub2e4. 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 // =======================Test Generate(Save Generated Image)====================== net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_GENERATE ; j ++ ) { Tensor < float > * z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 1 , z_t ); net -> Generate (); string filePath = \"generated/epoch\" + std :: to_string ( i ) + \"_\" + std :: to_string ( j + 1 ) + \".jpg\" ; const char * cstr = filePath . c_str (); Tensor2Image < float > ( net -> GetGenerator () -> GetResult (), cstr , 3 , 20 , 28 , 28 ); printf ( \" \\r Generate complete percentage is %d / %d\" , j + 1 , LOOP_FOR_GENERATE ); fflush ( stdout ); } std :: cout << \" \\n\\n \" ; net -> Save ( filename ); 106~127 : GAN \uc5d0\uc11c\ub294 \uc815\ud655\ub3c4\uac00 \uc758\ubbf8\uc788\ub294 \uac83\uc774 \uc544\ub2c8\ubbc0\ub85c \ud14c\uc2a4\ud2b8\uc5d0\uc11c\ub294 Generator \uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \uc0dd\uc131\uc2dc\ud0a8 \ub4a4 \uc800\uc7a5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4.","title":"4. WICWIU \ucf54\ub4dc \uac19\uc774\ubcf4\uae30"},{"location":"dev/wicwiu/code/#project-layout","text":"WICWIU \ub294 \ud06c\uac8c lib/ , tutorials/ , src/ \ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc138\ubd80 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. lib/ # \ucef4\ud30c\uc77c \ud6c4 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc0dd\uc131\ub418\ub294 \ub514\ub809\ud1a0\ub9ac. tutorials/ # WICWIU \ub85c \uc81c\uc791\ub41c \uc5ec\ub7ec \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud574\ubcfc \uc218 \uc788\ub294 \ucf54\ub4dc\ub4e4. # net/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \uc788\uc2b5\ub2c8\ub2e4. # data/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \ud559\uc2b5\ud560 \ub370\uc774\ud130\uc14b\uc774 \uc788\uc2b5\ub2c8\ub2e4. CIFAR10/ CIFAR100Reader/ ImageNet/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. MNIST/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. GAN/ # \ud558\uc704 \ub514\ub809\ud1a0\ub9ac \ub0b4 \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 # \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. VanillaGAN/ DCGAN/ WGAN/ BEGAN/ src/ # LossFunction, Operator, Optimizer, \uadf8\ub9ac\uace0 Module # \uc744 \ube44\ub86f\ud55c \uc18c\uc2a4\ud30c\uc77c\uc774 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac. LossFunction/ Operator/ Optimizer/ Module/","title":"Project layout"},{"location":"dev/wicwiu/code/#wicwiu","text":"Tip makefile \uc758 \ubb38\ubc95\uc5d0 \ub300\ud55c \uae30\ucd08\uac00 \ubd80\uc871\ud558\ub2e4\uba74 Makefile \uae30\ucd08 \ubb38\ubc95 \ub97c \ucc38\uace0\ud558\uc138\uc694!","title":"WICWIU \ucf54\ub4dc \uc0b4\ud3b4\ubcf4\uae30"},{"location":"dev/wicwiu/code/#compile-src","text":"src/ \ub294 WICWIU \ub77c\uc774\ube0c\ub7ec\ub9ac \ub514\ub809\ud1a0\ub9ac\uc785\ub2c8\ub2e4. \uc774\uac83\uc744 \ucef4\ud30c\uc77c\ud558\ub294 makefile \ub97c \uac19\uc774 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 .SUFFIXES = .cpp .o FRAMEWORK_LIB = lib/library.a CFLAGS = -O2 -std = c++11 ENABLE_CUDNN = -D__CUDNN__ DFLAGS = -g -D__DEBUG__ 1 : Suffix , CPP \ud30c\uc77c\uc744 Object \ud30c\uc77c\ub85c \ubcc0\ud658\uc2dc\ucf1c\uc8fc\ub294 \ub0b4\uc7a5 \uaddc\uce59\uc785\ub2c8\ub2e4. 3 : WICWIU \uc758 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. 4 : \ucef4\ud30c\uc77c \uc635\uc158\uc785\ub2c8\ub2e4. 6 : cuDNN \uc0ac\uc6a9 \uc5ec\ubd80 \ud50c\ub798\uadf8\uc785\ub2c8\ub2e4. Warning cuDNN \ubbf8 \uc124\uce58 \ubc0f \ubbf8 \uc0ac\uc6a9 \uc2dc \uc8fc\uc11d\ucc98\ub9ac\ub97c \ud574\uc57c\ud569\ub2c8\ub2e4. 7 : \ub514\ubc84\uadf8 \ucf54\ub4dc \uc0ac\uc6a9 \uc5ec\ubd80 \ud50c\ub798\uadf8\uc785\ub2c8\ub2e4. Warning \ubbf8 \uc0ac\uc6a9 \uc2dc \uc8fc\uc11d\ucc98\ub9ac\ub97c \ud574\uc57c\ud569\ub2c8\ub2e4. 9 10 11 12 13 14 15 16 17 18 19 20 21 INCLUDE_PATH = -I/usr/local/cuda/include LIB_PATH = -L. -L/usr/local/cuda/lib64 CC = g++ NVCC = nvcc ifdef ENABLE_CUDNN LINKER = nvcc LFLAGS = -lcudart -lcudnn -lpthread else LINKER = g++ LFLAGS = -lpthread endif 9 : \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c CUDA \ud5e4\ub354 \ud30c\uc77c\uc744 \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 10 : CUDA \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 12 : \ucef4\ud30c\uc77c\ub7ec\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 13 : CUDA \ud30c\uc77c \uc6a9 \ucef4\ud30c\uc77c\ub7ec\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 15~21 : cuDNN \uc0ac\uc6a9 \uc2dc, NVCC \ub9c1\ucee4 \uc0ac\uc6a9 \ubc0f cudart , cudnn , pthread \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. cuDNN \ubbf8 \uc0ac\uc6a9 \uc2dc, g++ \ub9c1\ucee4 \uc0ac\uc6a9 \ubc0f pthread \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 AR = ar SRCS = \\ src/Utils.cpp \\ src/Shape.cpp \\ OBJS = ${ SRCS :.cpp=.o } ifdef ENABLE_CUDNN CUDA_SRCS = \\ src/Utils_CUDA.cu \\ src/Optimizer/AdamOptimizer_CUDA.cu \\ src/Operator/Concatenate_CUDA.cu CUDA_OBJS = ${ CUDA_SRCS :.cu=.o } endif all : $( FRAMEWORK_LIB ) 25~27 : .cpp \uc18c\uc2a4 \ucf54\ub4dc \ud30c\uc77c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. 29 : SRCS \uc758 .cpp \ud30c\uc77c\uc744 \uac01\uac01 \ucef4\ud30c\uc77c\ud574 .o \ud30c\uc77c(\uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c)\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 31~38 : cuDNN \uc0ac\uc6a9 \uc2dc, CUDA_SRC/ \uc758 .cu \ud30c\uc77c\uc744 \uac01\uac01 \ucef4\ud30c\uc77c\ud574 .o \ud30c\uc77c\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 40 : \ucef4\ud30c\uc77c \uc2dc\uc791 \ud0c0\uac9f\uc785\ub2c8\ub2e4. FRAMEWORK_LIB \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 .cpp.o : $( CC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) $( LIB_PATH ) -c $< -o $@ src/Utils_CUDA.o : src / Utils_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ src/Optimizer/AdamOptimizer_CUDA.o : src / Optimizer / AdamOptimizer_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ src/Operator/Concatenate_CUDA.o : src / Operator / Concatenate_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ $(FRAMEWORK_LIB) : $( OBJS ) $( CUDA_OBJS ) $( AR ) rcs $@ $( OBJS ) $( CUDA_OBJS ) clean : rm -rf *.o $( OBJS ) $( CUDA_OBJS ) $( FRAMEWORK_LIB ) 42~43 : \uc8fc\uc5b4\uc9c4 \ud30c\uc77c\uc744 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 45~49 : \ud574\ub2f9 .cu \ud30c\uc77c\uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 52~53 : OBJS , CUDA_OBJS \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0, FRAMEWORK_LIB , OBJS , CUDA_OBJS \uc758 .o \ud30c\uc77c\ub4e4\uc744 \uac00\uc9c0\uace0 \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","title":"Compile src/"},{"location":"dev/wicwiu/code/#compile-tutorialsimagenet","text":"tutorials/ImageNet/ \uc740 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. \uc774\uac83\uc744 \ucef4\ud30c\uc77c\ud558\ub294 makefile \ub97c \uac19\uc774 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .SUFFIXES = .cpp .o CFLAGS = -O2 -std = c++11 -g ENABLE_CUDNN = -D__CUDNN__ DFLAGS = -g -D__DEBUG__ LFLAGS = -lcudart -lcudnn -lpthread -ljpeg -lturbojpeg INCLUDE_PATH = -I/usr/local/cuda/include -I/opt/libjpeg-turbo/include -I/opt/libjpeg-turbo/lib64 LIB_PATH = -L. -L/usr/local/cuda/lib64 -L/opt/libjpeg-turbo/lib64 CC = g++ NVCC = nvcc FRAMEWORK_LIB = ../../lib/library.a 6 : \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9 \ud50c\ub798\uadf8, cudart , cudnn , pthread , jpeg , turbojpeg \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. 8 : \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c CUDA \ud5e4\ub354 \ud30c\uc77c\uc744 \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 9 : CUDA \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 14 : \ud504\ub808\uc784\uc6cc\ud06c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 SRCS = \\ ../../src/Shape.cpp \\ ../../src/LongArray.cpp \\ ../../src/Tensor.cpp \\ ../../src/Operator.cpp \\ ../../src/LossFunction.cpp \\ ../../src/Optimizer.cpp \\ ../../src/Module.cpp \\ ../../src/NeuralNetwork.cpp all : main .cpp.o : $( CC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) $( LIB_PATH ) -c $< -o $@ main : main . o $( FRAMEWORK_LIB ) $( NVCC ) $( CFLAGS ) $( ENABLE_CUDNN ) $( DFLAGS ) $( LFLAGS ) $( INCLUDE_PATH ) $( LIB_PATH ) -o $@ $( FRAMEWORK_LIB ) main.o $(FRAMEWORK_LIB) : $( SRC ) make -C ../.. clean : rm -rf *.o main clean_all : rm -rf *.o main make clean -C ../.. 17~25 : .cpp \uc18c\uc2a4 \ucf54\ub4dc \ud30c\uc77c, \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc758 \uc758\uc874\uc131 \ud655\uc778\uc744 \uc704\ud574 \uc815\uc758\ud558\ub294 \ubcc0\uc218\uc785\ub2c8\ub2e4. 27 : \uc2dc\uc791 \ud0c0\uac9f, main \ud30c\uc77c\uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. 29~30 : \uc8fc\uc5b4\uc9c4 \ud30c\uc77c\uc744 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 32~33 : main.o \ud30c\uc77c\uacfc FRAMEWORK_LIB \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0, \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 FRAMEWORK_LIB \uacfc main.o \ud30c\uc77c\uc744 main \ud30c\uc77c\ub85c \ub9c1\ud06c\ud55c\ub2e4. 35~36 : \uc9c0\uc815\ub41c \uacbd\ub85c\uc5d0\uc11c make \uc2e4\ud589","title":"Compile tutorials/ImageNet/"},{"location":"dev/wicwiu/code/#tutorials-tutorialsmnist","text":"tutorials/MNIST \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"Tutorials tutorials/MNIST"},{"location":"dev/wicwiu/code/#tutorialsmnistnetmy_cnnhpp","text":"tutorials/MNIST/net/my_CNN.hpp \ub294 WICWIU \uc5d0\uc11c CNN \uc73c\ub85c MNIST \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. MNIST \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class my_CNN : public NeuralNetwork < float > { private : public : my_CNN ( Tensorholder < float > * x , Tensorholder < float > * label ) { SetInput ( 2 , x , label ); Operator < float > * out = NULL ; out = new ReShape < float > ( x , 28 , 28 , \"Flat2Image\" ); // ======================= layer 1======================= out = new ConvolutionLayer2D < float > ( out , 1 , 32 , 3 , 3 , 1 , 1 , 0 , TRUE , \"Conv_1\" ); out = new BatchNormalizeLayer < float > ( out , TRUE , \"BN_1\" ); out = new Relu < float > ( out , \"Relu_1\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_1\" ); // ======================= layer 2======================= out = new ConvolutionLayer2D < float > ( out , 32 , 64 , 3 , 3 , 1 , 1 , 0 , TRUE , \"Conv_2\" ); out = new BatchNormalizeLayer < float > ( out , TRUE , \"BN_2\" ); out = new Relu < float > ( out , \"Relu_2\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_2\" ); // ======================= layer 3======================= out = new ReShape < float > ( out , 1 , 1 , 5 * 5 * 64 , \"Image2Flat\" ); // ======================= layer 3======================= out = new Linear < float > ( out , 5 * 5 * 64 , 1024 , TRUE , \"Fully-Connected_1\" ); out = new Relu < float > ( out , \"Relu_3\" ); //// ======================= layer 4======================= out = new Linear < float > ( out , 1024 , 10 , TRUE , \"Fully-connected_2\" ); AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , label , \"SCE\" )); // ======================= Select Optimizer =================== SetOptimizer ( new RMSPropOptimizer < float > ( GetParameter (), 0.01 , 0.9 , 1e-08 , FALSE , MINIMIZE )); } virtual ~ my_CNN () {} }; 5 : SetInput \ud568\uc218\ub97c \ud1b5\ud574 \\(2\\) \uac00\uc9c0 \uc785\ub825( data , label ) \uc774 \ubaa8\ub378\uc758 \ud559\uc2b5\uc5d0 \ub4e4\uc5b4\uac04\ub2e4\ub294 \uac83\uc744 \uba85\uc2dc\ud569\ub2c8\ub2e4. 9 : ReShape \ud568\uc218\ub85c MNIST \uc190\uae00\uc528 \uc774\ubbf8\uc9c0 x \ub97c Tensor \ud615\ud0dc\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. 12~30 : ConvolutionLayer2D , BatchNormalizeLayer , Relu , Maxpooling \ub4f1\uc758 Operator \ub4e4\ub85c \uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4. 35 : SetLossFunction \ud568\uc218\ub85c \uc190\uc2e4\ud568\uc218\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 39 : SetOptimizer \ud568\uc218\ub85c Optimizer \ub97c \uc815\uc758\ud569\ub2c8\ub2e4.","title":"tutorials/MNIST/net/my_CNN.hpp"},{"location":"dev/wicwiu/code/#tutorialsmnistmaincpp","text":"tutorials/MNIST/main.cpp \ub294 tutorials/MNIST/net/my_CNN.hpp \uc5d0\uc11c \uc815\uc758\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0ac\uc6a9\ud558\uc5ec MNIST \uc190\uae00\uc528 \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. Source 19 20 21 22 23 24 25 26 27 28 29 30 // create input, label data placeholder -> Tensorholder Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 10 , \"label\" ); // ======================= Select net =================== NeuralNetwork < float > * net = new my_CNN ( x , label ); // ======================= Prepare Data =================== MNISTDataSet < float > * train_dataset = new MNISTDataSet < float > ( \"data/train-images-idx3-ubyte\" , \"data/train-labels-idx1-ubyte\" , TRAINING ); DataLoader < float > * train_dataloader = new DataLoader < float > ( train_dataset , BATCH , TRUE , 20 , FALSE ); MNISTDataSet < float > * test_dataset = new MNISTDataSet < float > ( \"data/t10k-images-idx3-ubyte\" , \"data/t10k-labels-idx1-ubyte\" , TESTING ); DataLoader < float > * test_dataloader = new DataLoader < float > ( test_dataset , BATCH , FALSE , 20 , FALSE ); 20~21 : Tensorholder (placeholder) \ud074\ub798\uc2a4\ub85c \uc190\uae00\uc528 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. 24 : \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c CNN \uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 26~30 : MNIST \ub370\uc774\ud130\uc14b\uacfc \ub370\uc774\ud130\ub85c\ub354\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 // ======================= Train ======================= float train_accuracy = 0.f ; float train_avg_loss = 0.f ; net -> SetModeTrain (); startTime = clock (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { //dataset->CreateTrainDataPair(BATCH); std :: vector < Tensor < float > *> * temp = train_dataloader -> GetDataFromGlobalBuffer (); // printf(\"%d\\r\\n\", temp->size()); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ // std::cin >> temp; net -> FeedInputTensor ( 2 , x_t , l_t ); net -> ResetParameterGradient (); net -> Train (); // std::cin >> temp; train_accuracy += net -> GetAccuracy (); train_avg_loss += net -> GetLoss (); printf ( \" \\r Train complete percentage is %d / %d -> loss : %f, acc : %f\" /*(ExcuteTime : %f)*/ , j + 1 , LOOP_FOR_TRAIN , train_avg_loss / ( j + 1 ), train_accuracy / ( j + 1 ) /*nProcessExcuteTime*/ ); fflush ( stdout ); } endTime = clock (); nProcessExcuteTime = (( double )( endTime - startTime )) / CLOCKS_PER_SEC ; printf ( \" \\n (excution time per epoch : %f) \\n\\n \" , nProcessExcuteTime ); 72~77 : MNIST \ub370\uc774\ud130\uc14b\uc73c\ub85c\ubd80\ud130 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \ubc1b\uc544 \uc800\uc7a5\ud569\ub2c8\ub2e4. 79~82 : cuDNN \uc744 \uc0ac\uc6a9 \ud560 \uacbd\uc6b0, placeholder \uc758 device \ub97c GPU \ub85c \uc124\uc815\ud55c\ub2e4. 84~86 : \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130\uc14b(\uc190\uae00\uc528 \uc774\ubbf8\uc9c0, \uc815\ub2f5\ub808\uc774\ube14)\ub97c \ub9cc\ub4e4\uc5b4 \ub123\uace0 \uc2e0\uacbd\ub9dd\uc758 Gradient \uac12\uc744 \ucd08\uae30\ud654 \ud558\uace0 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4. 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 // ======================= Test ====================== float test_accuracy = 0.f ; float test_avg_loss = 0.f ; net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_TEST ; j ++ ) { //dataset->CreateTestDataPair(BATCH); std :: vector < Tensor < float > *> * temp = test_dataloader -> GetDataFromGlobalBuffer (); // printf(\"%d\\r\\n\", temp->size()); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , x_t , l_t ); net -> Test (); test_accuracy += net -> GetAccuracy (); test_avg_loss += net -> GetLoss (); printf ( \" \\r Test complete percentage is %d / %d -> loss : %f, acc : %f\" , j + 1 , LOOP_FOR_TEST , test_avg_loss / ( j + 1 ), test_accuracy / ( j + 1 )); fflush ( stdout ); } 106 : \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8 \ubaa8\ub4dc(gradient \ub97c \uacc4\uc0b0\ud558\uc9c0 \uc54a\uc74c)\ub85c \uc804\ud658\ud569\ub2c8\ub2e4. 110~115 : MNIST \ub370\uc774\ud130\uc14b\uc73c\ub85c\ubd80\ud130 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \ubc1b\uc544 \uc800\uc7a5\ud569\ub2c8\ub2e4. 122~123 : \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130(image, label)\ub97c \uc785\ub825\ud558\uace0 \ud14c\uc2a4\ud2b8\ub97c \uc9c4\ud589\ud569\ub2c8\ub2e4. 125~126 : \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \uce21\uc815\ud55c\ub2e4.","title":"tutorials/MNIST/main.cpp"},{"location":"dev/wicwiu/code/#tutorials-tutorialsimagenet-resnet","text":"tutorials/ImageNet \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"Tutorials tutorials/ImageNet (ResNet)"},{"location":"dev/wicwiu/code/#tutorialsimagenetnetmy_resnethpp","text":"tutorials/ImageNet/net/my_Resnet.hpp \ub294 WICWIU \uc5d0\uc11c ResNet \uc73c\ub85c ImageNet \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. ImageNet \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. ResNet \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc5ec\ub7ec \uac1c\uc758 BasicBlock(residual block) \uc744 \uc801\uce35\uc2dc\ucf1c \uad6c\uc131\ub429\ub2c8\ub2e4. Source 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 template < typename DTYPE > class BasicBlock : public Module < DTYPE > { private : public : BasicBlock ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pStride = 1 , std :: string pName = NULL ) { Alloc ( pInput , pNumInputChannel , pNumOutputChannel , pStride , pName ); } virtual ~ BasicBlock () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pStride , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * remember = pInput ; Operator < DTYPE > * out = pInput ; // 1 out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , pNumOutputChannel , 3 , 3 , pStride , pStride , 1 , FALSE , \"BasicBlock_Conv1\" + pName ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BasicBlock_BN1\" + pName ); out = new Relu < DTYPE > ( out , \"BasicBlock_Relu1\" + pName ); // 2 out = new ConvolutionLayer2D < DTYPE > ( out , pNumOutputChannel , pNumOutputChannel , 3 , 3 , 1 , 1 , 1 , FALSE , \"BasicBlock_Conv2\" + pName ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BasicBlock_BN2\" + pName ); // out = new Relu<DTYPE>(out, \"BasicBlock_Relu2\" + pName); // ShortCut if (( pStride != 1 ) || ( pNumInputChannel != pNumOutputChannel )) { remember = new ConvolutionLayer2D < DTYPE > ( remember , pNumInputChannel , pNumOutputChannel , 1 , 1 , pStride , pStride , 0 , FALSE , \"BasicBlock_Conv3_Shortcut\" + pName ); remember = new BatchNormalizeLayer < DTYPE > ( remember , TRUE , \"BasicBlock_BN3_Shortcut\" + pName ); // remember = new Relu<DTYPE>(remember, \"BasicBlock_Relu3_Shortcut\" + pName); } // Add (for skip Connection) out = new Addall < DTYPE > ( remember , out , \"ResNet_Skip_Add\" + pName ); // out = new Addall<DTYPE>(remember, out, \"ResNet_Skip_Add\"); // Last Relu out = new Relu < DTYPE > ( out , \"BasicBlock_Relu3\" + pName ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 20~32 : BasicBlock \uc740 Convolution layer , BatchNormailze layer , Relu \ub85c \uc774\ub8e8\uc5b4\uc9c4 2\uac1c\uc758 layer\uc640 skip connection(Short cut) \uc73c\ub85c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. 37 : skip connection \uc740 Addall Operator \ub85c \uad6c\ud604\ub429\ub2c8\ub2e4. 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 template < typename DTYPE > class ResNet : public NeuralNetwork < DTYPE > { private : int m_numInputChannel ; public : ResNet ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pNumOfClass ) { Alloc ( pInput , pLabel , pBlockType , pNumOfBlock1 , pNumOfBlock2 , pNumOfBlock3 , pNumOfBlock4 , pNumOfClass ); } virtual ~ ResNet () {} int Alloc ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pNumOfClass ) { this -> SetInput ( 2 , pInput , pLabel ); m_numInputChannel = 64 ; Operator < DTYPE > * out = pInput ; // ReShape out = new ReShape < DTYPE > ( out , 3 , 224 , 224 , \"ReShape\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN0\"); // 1 out = new ConvolutionLayer2D < DTYPE > ( out , 3 , m_numInputChannel , 7 , 7 , 2 , 2 , 3 , FALSE , \"Conv\" ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BN0\" ); out = new Relu < DTYPE > ( out , \"Relu0\" ); out = new Maxpooling2D < float > ( out , 3 , 3 , 2 , 2 , 1 , \"MaxPool_2\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN1\"); out = this -> MakeLayer ( out , m_numInputChannel , pBlockType , pNumOfBlock1 , 1 , \"Block1\" ); out = this -> MakeLayer ( out , 128 , pBlockType , pNumOfBlock2 , 2 , \"Block2\" ); out = this -> MakeLayer ( out , 256 , pBlockType , pNumOfBlock3 , 2 , \"Block3\" ); out = this -> MakeLayer ( out , 512 , pBlockType , pNumOfBlock3 , 2 , \"Block4\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN1\"); // out = new Relu<DTYPE>(out, \"Relu1\"); out = new GlobalAvaragePooling2D < DTYPE > ( out , \"Avg Pooling\" ); out = new ReShape < DTYPE > ( out , 1 , 1 , 512 , \"ReShape\" ); out = new Linear < DTYPE > ( out , 512 , pNumOfClass , FALSE , \"Classification\" ); // out = new BatchNormalizeLayer < DTYPE > (out, FALSE, \"BN0\"); this -> AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== this -> SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , pLabel , \"SCE\" )); // SetLossFunction(new MSE<float>(out, label, \"MSE\")); // ======================= Select Optimizer =================== // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.1, 0.9, 5e-4, MINIMIZE)); // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.001, MINIMIZE)); this -> SetOptimizer ( new AdamOptimizer < float > ( this -> GetParameter (), 0.001 , 0.9 , 0.999 , 1e-08 , 5e-4 , MINIMIZE )); return TRUE ; } Operator < DTYPE >* MakeLayer ( Operator < DTYPE > * pInput , int pNumOfChannel , std :: string pBlockType , int pNumOfBlock , int pStride , std :: string pName = NULL ) { if ( pNumOfBlock == 0 ) { return pInput ; } else if (( pBlockType == \"BasicBlock\" ) && ( pNumOfBlock > 0 )) { Operator < DTYPE > * out = pInput ; out = new BasicBlock < DTYPE > ( out , m_numInputChannel , pNumOfChannel , pStride , pName ); int pNumOutputChannel = pNumOfChannel ; for ( int i = 1 ; i < pNumOfBlock ; i ++ ) { out = new BasicBlock < DTYPE > ( out , pNumOutputChannel , pNumOutputChannel , 1 , pName ); } m_numInputChannel = pNumOutputChannel ; return out ; } else if (( pBlockType == \"Bottleneck\" ) && ( pNumOfBlock > 0 )) { return NULL ; } else return NULL ; } }; 73~83 : WICWIU \uc758 ResNet \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc740 Conv , BatchNorm \ub4f1\uc758 Operator \ub4e4\uacfc \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c 4\uac1c\uc758 BasicBlock \uc73c\ub85c \ubaa8\ub378\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4. 98~104 : SetLossFunction \uacfc SetOptimizer \ub97c \uc774\uc6a9\ud574 \uc190\uc2e4\ud568\uc218\uc640 Optimizer \ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 131 132 133 134 135 136 137 template < typename DTYPE > NeuralNetwork < DTYPE >* Resnet18 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new ResNet < DTYPE > ( pInput , pLabel , \"BasicBlock\" , 2 , 2 , 2 , 2 , pNumOfClass ); } template < typename DTYPE > NeuralNetwork < DTYPE >* Resnet34 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new ResNet < DTYPE > ( pInput , pLabel , \"BasicBlock\" , 3 , 4 , 6 , 3 , pNumOfClass ); } 131~137 ResNet \uc758 \uc885\ub958\ub294 BasicBlock \ub0b4\ubd80\uc758 \ucc44\ub110 \uc218\ub97c \ub2e4\ub974\uac8c \ud568\uc73c\ub85c\uc368 \ub098\ub204\uc5b4\uc9d1\ub2c8\ub2e4.","title":"tutorials/ImageNet/net/my_Resnet.hpp"},{"location":"dev/wicwiu/code/#tutorialsimagenetmaincpp","text":"tutorials/ImageNet/main.cpp \uc740 Source 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 int main ( int argc , char const * argv []) { ... // create input, label data placeholder -> Tensorholder Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 150528 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 1000 , \"label\" ); // ======================= Select net =================== NeuralNetwork < float > * net = Resnet18 < float > ( x , label , NUMBER_OF_CLASS ); // NeuralNetwork<float> *net = Resnet34<float>(x, label, NUMBER_OF_CLASS); // NeuralNetwork<float> *net = DenseNetLite<float>(x, label, NUMBER_OF_CLASS); net -> PrintGraphInformation (); // ======================= Prepare Data =================== ImageNetDataReader < float > * train_data_reader = new ImageNetDataReader < float > ( BATCH , 25 , TRUE ); train_data_reader -> UseNormalization ( TRUE , mean , stddev ); train_data_reader -> UseRandomHorizontalFlip (); // train_data_reader->UseRandomVerticalFlip(); ImageNetDataReader < float > * test_data_reader = new ImageNetDataReader < float > ( BATCH , 25 , FALSE ); test_data_reader -> UseNormalization ( TRUE , mean , stddev ); train_data_reader -> StartProduce (); test_data_reader -> StartProduce (); 21~23 : \ub370\uc774\ud130 placeholder \ub97c \ub9cc\ub4e0\ub2e4. 26 : \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud55c\ub2e4. 32~34 : ImageNet \ub370\uc774\ud130\ub294 random crop , normalization , random Filp \uacfc\uc815\uc744 \uac70\uccd0 \uc804\ucc98\ub9ac \ub41c\ub2e4. 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 // ======================= Train ======================= ... net -> SetModeTrain (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { data = train_data_reader -> GetDataFromBuffer (); #ifdef __CUDNN__ data [ 0 ] -> SetDeviceGPU ( GPUID ); data [ 1 ] -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , data [ 0 ], data [ 1 ]); delete data ; data = NULL ; net -> ResetParameterGradient (); net -> Train (); 111~117 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \ubc84\ud37c\ub85c\ubd80\ud130 \uac00\uc838\uc640 \uc2e0\uacbd\ub9dd\uc5d0 \ub123\ub294\ub2e4. 120~121 : Gradient\ub97c \ucd08\uae30\ud654 \ud55c \ub4a4 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4. 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 // ======================= Test ====================== ... net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_TEST ; j ++ ) { data = test_data_reader -> GetDataFromBuffer (); #ifdef __CUDNN__ data [ 0 ] -> SetDeviceGPU ( GPUID ); // \u7570\ubdc0\uc351 ?\uba2e\ub8de???\uafa9\uc282 data [ 1 ] -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , data [ 0 ], data [ 1 ]); delete data ; data = NULL ; net -> Test (); test_avg_accuracy += net -> GetAccuracy ( NUMBER_OF_CLASS ); test_avg_top5_accuracy += net -> GetTop5Accuracy ( NUMBER_OF_CLASS ); test_avg_loss += net -> GetLoss (); printf ( \" \\r %d / %d -> avg_loss : %0.4f, avg_acc : %0.4f, avg_top5_acc : %0.4f\" /*(ExcuteTime : %f)*/ , j + 1 , LOOP_FOR_TEST , test_avg_loss / ( j + 1 ), test_avg_accuracy / ( j + 1 ), test_avg_top5_accuracy / ( j + 1 )); fflush ( stdout ); } 157 : \uc2e0\uacbd\ub9dd\uc744 inference \ubaa8\ub4dc\ub85c \uc804\ud658 \ud55c\ub2e4. 160~170 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \ubc84\ud37c\ub85c\ubd80\ud130 \uac00\uc838\uc640 \uc2e0\uacbd\ub9dd\uc5d0 \ub123\uc5b4 \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \uce21\uc815\ud55c\ub2e4. 172~181 : \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \ucd9c\ub825\ud55c\ub2e4.","title":"tutorials/ImageNet/main.cpp"},{"location":"dev/wicwiu/code/#tutorials-tutorialsimagenet-densenet","text":"tutorials/ImageNet \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"Tutorials tutorials/ImageNet (DenseNet)"},{"location":"dev/wicwiu/code/#tutorialsimagenetnetmy_densenethpp","text":"tutorials/ImageNet/net/my_Densenet.hpp \ub294 WICWIU \uc5d0\uc11c DenseNet \uc73c\ub85c ImageNet \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. DenseNet \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc5ec\ub7ec \uac1c\uc758 DenseNetBlock \uc744 \uc801\uce35\uc2dc\ucf1c \uad6c\uc131\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 template < typename DTYPE > class DenseNetBlock : public Module < DTYPE > { private : public : DenseNetBlock ( Operator < DTYPE > * pInput , int pNumInputChannel , int pGrowthRate , std :: string pName = NULL ) : Module < DTYPE > ( pName ) { Alloc ( pInput , pNumInputChannel , pGrowthRate , pName ); } virtual ~ DenseNetBlock () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pGrowthRate , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * remember = pInput ; Operator < DTYPE > * out = pInput ; // 1 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"DenseNetBlock_BN1\" + pName ); out = new Relu < DTYPE > ( out , \"DenseNetBlock_Relu1\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , 4 * pGrowthRate , 1 , 1 , 1 , 1 , 0 , FALSE , \"DenseNetBlock_Conv1\" + pName ); // 2 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"DenseNetBlock_BN2\" + pName ); out = new Relu < DTYPE > ( out , \"DenseNetBlock_Relu2\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , 4 * pGrowthRate , pGrowthRate , 3 , 3 , 1 , 1 , 1 , FALSE , \"DenseNetBlock_Conv2\" + pName ); // Concat out = new ConcatenateChannelWise < float > ( remember , out , \"DenseNetBlock_ConCat\" ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 20~41 : DenseNet \uc740 \uc774\uc640 \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 template < typename DTYPE > class Transition : public Module < DTYPE > { private : public : Transition ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , std :: string pName = NULL ) : Module < DTYPE > ( pName ) { Alloc ( pInput , pNumInputChannel , pNumOutputChannel , pName ); } virtual ~ Transition () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * out = pInput ; // 1 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"Transition_BN\" + pName ); out = new Relu < DTYPE > ( out , \"Transition_Relu\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , pNumOutputChannel , 1 , 1 , 1 , 1 , 0 , FALSE , \"Transition_Conv\" + pName ); // Avg Pooling out = new AvaragePooling2D < float > ( out , 2 , 2 , 2 , 2 , 0 , \"AVG\" ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 40~66 : DenseNetBlock \uc744 \uc5f0\uacb0\ud558\ub294 Transition \uc740 \uc704\uc640 \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 template < typename DTYPE > class DenseNet : public NeuralNetwork < DTYPE > { private : int m_numInputChannel ; int m_numOutputChannel ; int m_growthRate ; float m_reduction ; public : DenseNet ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pGrowthRate = 12 , float pReduction = 0.5 , int pNumOfClass = 1000 ) { Alloc ( pInput , pLabel , pBlockType , pNumOfBlock1 , pNumOfBlock2 , pNumOfBlock3 , pNumOfBlock4 , pGrowthRate , pReduction , pNumOfClass ); } virtual ~ DenseNet () {} int Alloc ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pGrowthRate , float pReduction , int pNumOfClass ) { this -> SetInput ( 2 , pInput , pLabel ); m_numInputChannel = 2 * pGrowthRate ; m_growthRate = pGrowthRate ; m_reduction = pReduction ; Operator < DTYPE > * out = pInput ; // ReShape out = new ReShape < DTYPE > ( out , 3 , 224 , 224 , \"ReShape\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN0\"); // 1 out = new ConvolutionLayer2D < DTYPE > ( out , 3 , m_numInputChannel , 7 , 7 , 2 , 2 , 3 , FALSE , \"Conv\" ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BN0\" ); out = new Relu < DTYPE > ( out , \"Relu0\" ); out = this -> MakeLayer ( out , m_numInputChannel , pBlockType , pNumOfBlock1 , 1 , \"Block1\" ); m_numInputChannel += pNumOfBlock1 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans1\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock2 , 1 , \"Block2\" ); m_numInputChannel += pNumOfBlock2 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans2\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock3 , 1 , \"Block3\" ); m_numInputChannel += pNumOfBlock3 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans3\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock4 , 1 , \"Block4\" ); m_numInputChannel += pNumOfBlock4 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans4\" ); m_numInputChannel = m_numOutputChannel ; out = new GlobalAvaragePooling2D < DTYPE > ( out , \"Avg Pooling\" ); out = new ReShape < DTYPE > ( out , 1 , 1 , m_numInputChannel , \"ReShape\" ); out = new Linear < DTYPE > ( out , m_numInputChannel , pNumOfClass , TRUE , \"Classification\" ); this -> AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== this -> SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , pLabel , \"SCE\" )); // SetLossFunction(new MSE<float>(out, label, \"MSE\")); // ======================= Select Optimizer =================== // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.000001, 0.9, 5e-4, MINIMIZE)); // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.001, MINIMIZE)); this -> SetOptimizer ( new AdamOptimizer < float > ( this -> GetParameter (), 0.001 , 0.9 , 0.999 , 1e-08 , 5e-4 , MINIMIZE )); return TRUE ; } Operator < DTYPE >* MakeLayer ( Operator < DTYPE > * pInput , int pNumOfChannel , std :: string pBlockType , int pNumOfBlock , int pStride , std :: string pName = NULL ) { if ( pNumOfBlock == 0 ) { return pInput ; } else if (( pBlockType == \"DenseNetBlock\" ) && ( pNumOfBlock > 0 )) { Operator < DTYPE > * out = pInput ; for ( int i = 0 ; i < pNumOfBlock ; i ++ ) { out = new DenseNetBlock < DTYPE > ( out , pNumOfChannel , m_growthRate , pName ); pNumOfChannel += m_growthRate ; } return out ; } else if (( pBlockType == \"Bottleneck\" ) && ( pNumOfBlock > 0 )) { return NULL ; } else return NULL ; } }; template < typename DTYPE > NeuralNetwork < DTYPE >* DenseNet121 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new DenseNet < DTYPE > ( pInput , pLabel , \"DenseNetBlock\" , 6 , 12 , 24 , 16 , 12 , 0.5 , pNumOfClass ); } template < typename DTYPE > NeuralNetwork < DTYPE >* DenseNetLite ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new DenseNet < DTYPE > ( pInput , pLabel , \"DenseNetBlock\" , 2 , 3 , 6 , 4 , 32 , 0.5 , pNumOfClass ); } 92~121 : WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc758 DenseNet \uc740 \\(4\\) \uac1c\uc758 DenseNetBlock \uacfc \uac01\uac01\uc758 DenseNetBlock \uc0ac\uc774\ub97c \uc787\ub294 4\uac1c\uc758 Transition \uc73c\ub85c \uc815\uc758\ub429\ub2c8\ub2e4.","title":"tutorials/ImageNet/net/my_Densenet.hpp"},{"location":"dev/wicwiu/code/#tutorials-tutorialsganvanillagan","text":"tutorials/GAN/VanillaGAN \uc740 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. WICWIU \uc758 GAN \uc740 Generator \uc640 Discriminator \ub97c \uac01\uac01 \uad6c\uc131\ud55c\ub2e4.","title":"Tutorials tutorials/GAN/VanillaGAN"},{"location":"dev/wicwiu/code/#tutorialsganvanillagannetmy_generatorhpp","text":"WICWIU \uc758 GAN \ud29c\ud1a0\ub9ac\uc5bc\uc758 Generator \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 template < typename DTYPE > class my_Generator : public NeuralNetwork < DTYPE > { public : my_Generator ( Operator < float > * z ){ Alloc ( z ); } virtual ~ my_Generator () { } int Alloc ( Operator < float > * z ){ this -> SetInput ( z ); Operator < float > * out = z ; // ======================= layer 1 ====================== out = new Linear < float > ( out , 100 , 128 , TRUE , \"G_L1\" ); // ======================= layer 2 ====================== out = new Linear < float > ( out , 128 , 256 , TRUE , \"G_L2\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN1\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu1\" ); // out = new Relu<float>(out, \"G_Relu1\"); // ======================= layer 3 ====================== out = new Linear < float > ( out , 256 , 512 , TRUE , \"G_L3\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN2\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu2\" ); // out = new Relu<float>(out, \"G_Relu2\"); // ======================= layer 4 ====================== out = new Linear < float > ( out , 512 , 1024 , TRUE , \"G_L4\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN3\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu3\" ); // out = new Relu<float>(out, \"G_Relu3\"); // ======================= layer 5 ==================== out = new Linear < float > ( out , 1024 , 784 , TRUE , \"G_L5\" ); out = new Tanh < float > ( out , \"Tanh\" ); this -> AnalyzeGraph ( out ); } };","title":"tutorials/GAN/VanillaGAN/net/my_Generator.hpp"},{"location":"dev/wicwiu/code/#tutorialsganvanillagannetmy_discriminatorhpp","text":"WICWIU \uc758 GAN \ud29c\ud1a0\ub9ac\uc5bc\uc758 Discriminator \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 template < typename DTYPE > class my_Discriminator : public NeuralNetwork < DTYPE > { public : my_Discriminator ( Operator < float > * x ){ Alloc ( x ); } virtual ~ my_Discriminator () { } int Alloc ( Operator < float > * x ){ this -> SetInput ( x ); Operator < float > * out = x ; // ======================= layer 1 ====================== out = new Linear < float > ( out , 784 , 512 , TRUE , \"D_L1\" ); out = new LRelu < float > ( out , 0.2 , \"D_LRelu1\" ); // out = new Relu<float>(out, \"D_Relu1\"); // ======================= layer 2 ====================== out = new Linear < float > ( out , 512 , 256 , TRUE , \"D_L2\" ); out = new LRelu < float > ( out , 0.2 , \"D_LRelu2\" ); // out = new Relu<float>(out, \"D_Relu2\"); // ======================= layer 3 ====================== out = new Linear < float > ( out , 256 , 1 , TRUE , \"D_L3\" ); out = new Sigmoid < float > ( out , \"D_Sigmoid\" ); this -> AnalyzeGraph ( out ); } };","title":"tutorials/GAN/VanillaGAN/net/my_Discriminator.hpp"},{"location":"dev/wicwiu/code/#tutorialsganvanillagannetmy_ganhpp","text":"WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c Generator \uc640 Discriminator \uc758 \ud559\uc2b5\uc744 \uc81c\uc5b4\ud558\ub294 GAN \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 template < typename DTYPE > class my_GAN : public GAN < DTYPE > { public : my_GAN ( Tensorholder < float > * z , Tensorholder < float > * x , Tensorholder < float > * label ){ Alloc ( z , x , label ); } virtual ~ my_GAN () { } int Alloc ( Tensorholder < float > * z , Tensorholder < float > * x , Tensorholder < float > * label ){ this -> SetInput ( 3 , z , x , label ); this -> SetGenerator ( new my_Generator < float > ( z )); this -> SetSwitch ( new Switch < float > ( this -> GetGenerator (), x )); this -> SetDiscriminator ( new my_Discriminator < float > ( this -> GetSwitch ())); this -> AnalyzeGraph ( this -> GetDiscriminator ()); this -> SetLabel ( label ); // ======================= Select LossFunction =================== this -> SetGANLossFunctions ( new VanillaGANGeneratorLoss < float > ( this -> GetDiscriminator (), this -> GetLabel (), \"VanillaGANGeneratorLoss\" ), new VanillaGANDiscriminatorLoss < float > ( this -> GetDiscriminator (), this -> GetLabel (), \"VanillaGANDiscriminatorLoss\" )); // ======================= Select Optimizer =================== // this->SetGANOptimizers(new GradientDescentOptimizer<float>(this->GetGenerator()->GetParameter(), 0.000001, MINIMIZE), new GradientDescentOptimizer<float>(this->GetDiscriminator()->GetParameter(), 0.000001, MAXIMIZE)); // this->SetGANOptimizers(new RMSPropOptimizer<float>(this->GetGenerator()->GetParameter(), 0.0001, 0.9, 1e-08, FALSE, MINIMIZE), new RMSPropOptimizer<float>(this->GetDiscriminator()->GetParameter(), 0.0001, 0.9, 1e-08, FALSE, MAXIMIZE)); this -> SetGANOptimizers ( new AdamOptimizer < float > ( this -> GetGenerator () -> GetParameter (), 0.0002 , 0.5 , 0.999 , 1e-08 , MINIMIZE ), new AdamOptimizer < float > ( this -> GetDiscriminator () -> GetParameter (), 0.0002 , 0.5 , 0.999 , 1e-08 , MINIMIZE )); } };","title":"tutorials/GAN/VanillaGAN/net/my_GAN.hpp"},{"location":"dev/wicwiu/code/#tutorialsganvanillaganmaincpp","text":"WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c GAN \uc744 \uc0ac\uc6a9\ud558\ub294 main \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int main ( int argc , char const * argv []) { ... // create input, label data placeholder -> Tensorholder Tensorholder < float > * z = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 100 , \"z\" ); Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 1 , \"label\" ); // create NoiseGenrator GaussianNoiseGenerator < float > * Gnoise = new GaussianNoiseGenerator < float > ( 1 , BATCH , 1 , 1 , 100 , 0 , 1 ); // ======================= Select net =================== // GAN<float> *net = new my_BEGAN<float>(z, x, label); GAN < float > * net = new my_GAN < float > ( z , x , label ); //net->Load(filename); // ======================= Prepare Data =================== MNISTDataSet < float > * dataset = CreateMNISTDataSet < float > (); 16 : Generator \uc758 \uc785\ub825\uc73c\ub85c \uc0ac\uc6a9\ud560 latent variable\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4. 25 : \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c GAN \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud55c\ub2e4. 29 : MNIST \ub370\uc774\ud130\uc14b\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4. 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 //Start make Noise Gnoise -> StartProduce (); for ( int i = epoch + 1 ; i < EPOCH ; i ++ ) { std :: cout << \"EPOCH : \" << i << '\\n' ; // ======================= Train ======================= float genLoss = 0.f ; float discLoss = 0.f ; net -> SetModeTrain (); startTime = clock (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { dataset -> CreateTrainDataPair ( BATCH ); Tensor < float > * x_t = dataset -> GetTrainFeedImage (); Tensor < float > * l_t = dataset -> GetTrainFeedLabel (); delete l_t ; Tensor < float > * z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , z_t , x_t ); net -> ResetParameterGradient (); net -> TrainDiscriminator (); z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 1 , z_t ); net -> ResetParameterGradient (); net -> TrainGenerator (); if (( j + 1 ) % 50 == 0 ){ genLoss = ( * net -> GetGeneratorLossFunction () -> GetResult ())[ Index5D ( net -> GetGeneratorLossFunction () -> GetResult () -> GetShape (), 0 , 0 , 0 , 0 , 0 )]; discLoss = ( * net -> GetDiscriminatorLossFunction () -> GetResult ())[ Index5D ( net -> GetDiscriminatorLossFunction () -> GetResult () -> GetShape (), 0 , 0 , 0 , 0 , 0 )]; printf ( \" \\r Train complete percentage is %d / %d -> Generator Loss : %f, Discriminator Loss : %f\" , j + 1 , LOOP_FOR_TRAIN , genLoss , discLoss ); fflush ( stdout ); string filePath = \"trained/epoch\" + std :: to_string ( i ) + \"_\" + std :: to_string ( j + 1 ) + \".jpg\" ; const char * cstr = filePath . c_str (); Tensor2Image < float > ( net -> GetGenerator () -> GetResult (), cstr , 3 , 20 , 28 , 28 ); } } endTime = clock (); nProcessExcuteTime = (( double )( endTime - startTime )) / CLOCKS_PER_SEC ; printf ( \" \\n (excution time per epoch : %f) \\n\\n \" , nProcessExcuteTime ); 60 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. 63 : latent \ubcc0\uc218\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. 70~71 : Gradient \ub97c \ucd08\uae30\ud654\ud558\uace0 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud569\ub2c8\ub2e4. 95 \ud589: Generator \uc5d0\uc11c \uc0dd\uc131\ud55c \uc774\ubbf8\uc9c0\ub97c \uc77c\uc815 step\ub9c8\ub2e4 \uc800\uc7a5\ud55c\ub2e4. 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 // =======================Test Generate(Save Generated Image)====================== net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_GENERATE ; j ++ ) { Tensor < float > * z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 1 , z_t ); net -> Generate (); string filePath = \"generated/epoch\" + std :: to_string ( i ) + \"_\" + std :: to_string ( j + 1 ) + \".jpg\" ; const char * cstr = filePath . c_str (); Tensor2Image < float > ( net -> GetGenerator () -> GetResult (), cstr , 3 , 20 , 28 , 28 ); printf ( \" \\r Generate complete percentage is %d / %d\" , j + 1 , LOOP_FOR_GENERATE ); fflush ( stdout ); } std :: cout << \" \\n\\n \" ; net -> Save ( filename ); 106~127 : GAN \uc5d0\uc11c\ub294 \uc815\ud655\ub3c4\uac00 \uc758\ubbf8\uc788\ub294 \uac83\uc774 \uc544\ub2c8\ubbc0\ub85c \ud14c\uc2a4\ud2b8\uc5d0\uc11c\ub294 Generator \uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \uc0dd\uc131\uc2dc\ud0a8 \ub4a4 \uc800\uc7a5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4.","title":"tutorials/GAN/VanillaGAN/main.cpp"},{"location":"dev/wicwiu/learn/","text":"\uc774\uacf3\uc5d0\uc11c\ub294 WICWIU \uac00 \uad6c\uc131\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud1b5\ud558\uc5ec \uc5b4\ub5bb\uac8c \ub525\ub7ec\ub2dd\uc744 \ud558\ub294\uc9c0 \uc124\uba85\ud569\ub2c8\ub2e4. \ub525\ub7ec\ub2dd \ud559\uc2b5\ud558\uae30 \u00b6 Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor \u00b6 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574 \uc900\ube44\ub41c \ud559\uc2b5\ub370\uc774\ud130\ub97c \uba3c\uc800 Tensor \ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. Tip tutorals/<DATA_NAME>/*Reader.hpp \ud30c\uc77c\ub4e4\uc744 \ucc38\uace0\ud558\uc138\uc694. FeedInput \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubcc0\ud658\ub41c \ub370\uc774\ud130\ub97c \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ud569\ub2c8\ub2e4. Warning \uc785\ub825\uc758 \ud06c\uae30\uac00 \uc2e0\uacbd\ub9dd\uc5d0\uc11c \uae30\ub300\ud558\ub294 \uae30\ub300\uac12 \ud150\uc11c \ud06c\uae30\uc640 \uc77c\uce58\ud574\uc57c \ud558\uba70, \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0 \ud559\uc2b5\uc774 \uc62c\ubc14\ub85c \uc9c4\ud589\ub418\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc758 \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uba74 \uc2e0\uacbd\ub9dd\uc758 \uc785\ub825 \uacf5\uac04\uc5d0\ub294 \uc704\uc758 Tensor (\ud559\uc2b5 \ub370\uc774\ud130)\uac00 \ub4f1\ub85d\ub418\uc5b4 \uc0ac\uc6a9\ub41c\ub2e4. Step 2. \uc21c\uc804\ud30c \u00b6 \ub370\uc774\ud130\uac00 \uc801\uc6a9\ub41c \uc2e0\uacbd\ub9dd\uc740 \uc6b0\uc120 \uc774\uc804\uc758 \uac12\uc774 \ub4f1\ub85d\ub418\uc5b4 \uc788\uc744 \uac00\ub2a5\uc131\uc774 \uc874\uc7ac\ud558\ub294 \uad6c\uac04\uc744 \ubaa8\ub450 \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. Info \ub300\ud45c\uc801\uc73c\ub85c\ub294 \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator \ubc0f LossFunction \uc758 \uacb0\uacfc Tensor \uc640 \uae30\uc6b8\uae30\ubca1\ud130 Tensor \uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ucd08\uae30\ud654 \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uba74, \uc55e\uc11c \ubd84\uc11d\ud55c \uadf8\ub798\ud504\uc758 Operator \uc758 \uc21c\uc804\ud30c \uc5f0\uc0b0\uc744 \uc21c\uc11c\ub300\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4. Note \ubcf8 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \uc2e0\uacbd\ub9dd\uc740 \uc0ac\uc6a9\uc790\uac00 \ucd94\uac00\ud55c Operator \uc758 \uc5f0\uacb0\uc0c1\ud0dc\ub97c BFS \ub85c \ubd84\uc11d\ud558\uba70, \uc774\ub97c \uae30\uc900\uc73c\ub85c \uc2e0\uacbd\ub9dd \uc5f0\uc0b0\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 Operator \uc758 \uc5f0\uc0b0\uc774 \ub05d\ub098\uba74, \ub9c8\uc9c0\ub9c9\uc73c\ub85c LossFunction \uc758 \uc21c\uc804\ud30c\ub97c \uc2e4\ud589\ud558\uc5ec \uc190\uc2e4\uc744 \uad6c\ud569\ub2c8\ub2e4. Step 3. \uc5ed\uc804\ud30c \u00b6 \uc190\uc2e4\uc774 \uad6c\ud574\uc9c4 \uc2e0\uacbd\ub9dd\uc740, LossFunction \uc758 \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc744 \uc2dc\uc791\uc73c\ub85c \uac01 Operator \uc758 \ubc18\ub300 \uc21c\uc11c\ub85c \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uad6c\ud569\ub2c8\ub2e4. Note \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc744 \ubaa8\ub450 \ub9c8\ubb34\ub9ac\ud558\uba74, \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ub41c Weight \ud30c\ub77c\ubbf8\ud130\ub4e4\uc740 \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uac00\uc9c0\uac8c \ub429\ub2c8\ub2e4. Step 4. Weight \ud30c\ub77c\ubbf8\ud130 \uac31\uc2e0 \u00b6 \uac01 Weight \ud30c\ub77c\ubbf8\ud130\ub294 \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ub41c Optimizer \uc5d0\uc11c \uc9c0\uc815\ub41c \uc54c\uace0\ub9ac\uc998\uc744 \ub530\ub77c \ucd5c\uc801\ud654\ub429\ub2c8\ub2e4. Note \uc774\ub54c \uc0ac\uc6a9\ud558\ub294 \uac12\uc740 \uc55e\uc11c \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc73c\ub85c \uad6c\ud574\uc9c4 \uae30\uc6b8\uae30 \ubca1\ud130\uc774\uba70, \uc774\ub97c \ud1b5\ud574 \uc2e0\uacbd\ub9dd\uc740 \uc190\uc2e4\uc774 \uc791\uc544\uc9c0\ub294 \ubc29\ud5a5\uc73c\ub85c \ud559\uc2b5\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4.","title":"3. WICWIU \ub85c \ud559\uc2b5\ud558\uae30"},{"location":"dev/wicwiu/learn/#_1","text":"","title":"\ub525\ub7ec\ub2dd \ud559\uc2b5\ud558\uae30"},{"location":"dev/wicwiu/learn/#step-1-tensor","text":"\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574 \uc900\ube44\ub41c \ud559\uc2b5\ub370\uc774\ud130\ub97c \uba3c\uc800 Tensor \ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. Tip tutorals/<DATA_NAME>/*Reader.hpp \ud30c\uc77c\ub4e4\uc744 \ucc38\uace0\ud558\uc138\uc694. FeedInput \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubcc0\ud658\ub41c \ub370\uc774\ud130\ub97c \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ud569\ub2c8\ub2e4. Warning \uc785\ub825\uc758 \ud06c\uae30\uac00 \uc2e0\uacbd\ub9dd\uc5d0\uc11c \uae30\ub300\ud558\ub294 \uae30\ub300\uac12 \ud150\uc11c \ud06c\uae30\uc640 \uc77c\uce58\ud574\uc57c \ud558\uba70, \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0 \ud559\uc2b5\uc774 \uc62c\ubc14\ub85c \uc9c4\ud589\ub418\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc758 \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uba74 \uc2e0\uacbd\ub9dd\uc758 \uc785\ub825 \uacf5\uac04\uc5d0\ub294 \uc704\uc758 Tensor (\ud559\uc2b5 \ub370\uc774\ud130)\uac00 \ub4f1\ub85d\ub418\uc5b4 \uc0ac\uc6a9\ub41c\ub2e4.","title":"Step 1. \ud559\uc2b5 \ub370\uc774\ud130 &rarr; Tensor"},{"location":"dev/wicwiu/learn/#step-2","text":"\ub370\uc774\ud130\uac00 \uc801\uc6a9\ub41c \uc2e0\uacbd\ub9dd\uc740 \uc6b0\uc120 \uc774\uc804\uc758 \uac12\uc774 \ub4f1\ub85d\ub418\uc5b4 \uc788\uc744 \uac00\ub2a5\uc131\uc774 \uc874\uc7ac\ud558\ub294 \uad6c\uac04\uc744 \ubaa8\ub450 \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. Info \ub300\ud45c\uc801\uc73c\ub85c\ub294 \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator \ubc0f LossFunction \uc758 \uacb0\uacfc Tensor \uc640 \uae30\uc6b8\uae30\ubca1\ud130 Tensor \uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ucd08\uae30\ud654 \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uba74, \uc55e\uc11c \ubd84\uc11d\ud55c \uadf8\ub798\ud504\uc758 Operator \uc758 \uc21c\uc804\ud30c \uc5f0\uc0b0\uc744 \uc21c\uc11c\ub300\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4. Note \ubcf8 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \uc2e0\uacbd\ub9dd\uc740 \uc0ac\uc6a9\uc790\uac00 \ucd94\uac00\ud55c Operator \uc758 \uc5f0\uacb0\uc0c1\ud0dc\ub97c BFS \ub85c \ubd84\uc11d\ud558\uba70, \uc774\ub97c \uae30\uc900\uc73c\ub85c \uc2e0\uacbd\ub9dd \uc5f0\uc0b0\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 Operator \uc758 \uc5f0\uc0b0\uc774 \ub05d\ub098\uba74, \ub9c8\uc9c0\ub9c9\uc73c\ub85c LossFunction \uc758 \uc21c\uc804\ud30c\ub97c \uc2e4\ud589\ud558\uc5ec \uc190\uc2e4\uc744 \uad6c\ud569\ub2c8\ub2e4.","title":"Step 2. \uc21c\uc804\ud30c"},{"location":"dev/wicwiu/learn/#step-3","text":"\uc190\uc2e4\uc774 \uad6c\ud574\uc9c4 \uc2e0\uacbd\ub9dd\uc740, LossFunction \uc758 \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc744 \uc2dc\uc791\uc73c\ub85c \uac01 Operator \uc758 \ubc18\ub300 \uc21c\uc11c\ub85c \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uad6c\ud569\ub2c8\ub2e4. Note \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc744 \ubaa8\ub450 \ub9c8\ubb34\ub9ac\ud558\uba74, \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ub41c Weight \ud30c\ub77c\ubbf8\ud130\ub4e4\uc740 \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uac00\uc9c0\uac8c \ub429\ub2c8\ub2e4.","title":"Step 3. \uc5ed\uc804\ud30c"},{"location":"dev/wicwiu/learn/#step-4-weight","text":"\uac01 Weight \ud30c\ub77c\ubbf8\ud130\ub294 \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ub41c Optimizer \uc5d0\uc11c \uc9c0\uc815\ub41c \uc54c\uace0\ub9ac\uc998\uc744 \ub530\ub77c \ucd5c\uc801\ud654\ub429\ub2c8\ub2e4. Note \uc774\ub54c \uc0ac\uc6a9\ud558\ub294 \uac12\uc740 \uc55e\uc11c \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc73c\ub85c \uad6c\ud574\uc9c4 \uae30\uc6b8\uae30 \ubca1\ud130\uc774\uba70, \uc774\ub97c \ud1b5\ud574 \uc2e0\uacbd\ub9dd\uc740 \uc190\uc2e4\uc774 \uc791\uc544\uc9c0\ub294 \ubc29\ud5a5\uc73c\ub85c \ud559\uc2b5\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4.","title":"Step 4. Weight \ud30c\ub77c\ubbf8\ud130 \uac31\uc2e0"},{"location":"dev/wicwiu/nn/","text":"\uc774\uacf3\uc5d0\uc11c\ub294 WICWIU \uac00 \uc5b4\ub5bb\uac8c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294\uc9c0 \uc124\uba85\ud569\ub2c8\ub2e4. \ub370\uc774\ud130 \uad6c\uc870 \u00b6 Tensor, Shape, LongArray \ub370\uc774\ud130 \ud615\uc2dd \uc694\uc57d Class Tensor \u00b6 Class Tensor : WICWIU \uc5d0\uc11c \uc778\uacf5 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc758 \ud559\uc2b5\uc5d0 \uc774\uc6a9\ub418\ub294 \ub370\uc774\ud130\uc758 \uae30\ubcf8 \ud615\uc2dd \uc785\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 \ucd5c\ub300 5\uc758 \uacc4\uc218(Rank)\ub97c \uac16\ub294 \ud150\uc11c\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ud150\uc11c\uc758 \uac01 \ucd95\uc740 \uc778\uacf5 \uc2e0\uacbd\ub9dd \ud559\uc2b5\uc5d0\uc11c Time, Batch, Row, Column \ucd95\uc5d0 \ud574\ub2f9 \ud569\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 \ud150\uc11c\uc758 \ucc28\uc6d0\uc5d0 \uad00\ud55c \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape \ud074\ub798\uc2a4\uc640 \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 LongArray \ud074\ub798\uc2a4 \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uc2b5\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 Shape \ud074\ub798\uc2a4\uc758 \ucc28\uc6d0 \uc815\ubcf4 \ub370\uc774\ud130\ub97c \ud65c\uc6a9\ud574 \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc\ud569\ub2c8\ub2e4. Info Tensor \ub294 \ubb3c\ub9ac\ud559\uc758 \uac1c\ub150\uc744 \ucc28\uc6a9, \ub2e4\ucc28\uc6d0\uc758 \uc815\ubcf4\ub97c \uac16\ub294 \ub370\uc774\ud130\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. Class Shape \u00b6 Class Shape : Tensor \ub370\uc774\ud130\uc758 \ucc28\uc6d0\uc5d0 \uad00\ud55c \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Shape \ud074\ub798\uc2a4\ub294 \ud150\uc11c\uc758 \uacc4\uc218(Rank)\ub97c \ub2f4\uace0 \uc788\ub294 \ubcc0\uc218\uc640 \uacc4\uc218 \uac01 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ubcc0\uc218 \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uacc4\uc218 \ubcc0\uc218\uc758 \ucd5c\ub313\uac12\uc740 5 \uc774\uace0, \uac01 \ucd95\uc740 \uc778\uacf5 \uc2e0\uacbd\ub9dd \ud559\uc2b5\uc5d0\uc11c Time, Batch, Channel, Row, Column \ucd95\uc73c\ub85c \ud65c\uc6a9\ub429\ub2c8\ub2e4. \uac01 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\uc5d0 \ud574\ub2f9\ud558\ub294 \ubcc0\uc218\ub294 \ud3ec\uc778\ud130\ub85c \uc120\uc5b8 \ub418\uc5b4 \uc788\uc73c\uba70, \ucd95\uc758 \uac1c\uc218\ub9cc\ud07c \ubc30\uc5f4\ub85c\uc11c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ub418\uc5b4 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. Class LongArray \u00b6 LongArray \ud074\ub798\uc2a4\uc758 \uc704\uacc4\uc801 \ub370\uc774\ud130 \uad6c\uc870 Class LongArray : High-dimensional Array \uc758 \uc57d\uc5b4\ub85c, \uc2e4\uc81c \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. LongArray \ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub4e4\uc740 \ub3d9\uc801\uc73c\ub85c \ud55c \ubc88\uc5d0 \ud560\ub2f9\ud588\uc744 \ub54c \uba54\ubaa8\ub9ac\uac00 \ubd80\uc871\ud574 \ud560\ub2f9\uc774 \ubd88\uac00\ud558\ub294 \uacbd\uc6b0\ub97c \ub9c9\uae30 \uc704\ud574 \uc704\uacc4\uc801 \uad6c\uc870\ub97c \uac00\uc9c0\uace0 \uc774\uc911 \ud3ec\uc778\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \uc120\uc5b8 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ub17c\ub9ac\uc801\uc73c\ub85c\ub294 \ud558\ub098\uc758 \uc5f0\uc18d\uc801\uc778 \ubc30\uc5f4\uc774\ub098 \ubb3c\ub9ac\uc801\uc73c\ub85c\ub294 \ube14\ub85d\uc73c\ub85c \ub098\ub204\uc5b4\uc838 \uba54\ubaa8\ub9ac\uc5d0 \ud560\ub2f9\ub429\ub2c8\ub2e4. \uac01 \ube14\ub85d\uc740 Time \ucd95\uc744 \uae30\uc900\uc73c\ub85c \uadf8 \uc678 \ub098\uba38\uc9c0 4\uac1c\uc758 \ucc28\uc6d0(Batch, Channel, Row, Column)\uc744 \uac16\ub294 \ub370\uc774\ud130\ub85c \ubd84\ub9ac\ub429\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \uad6c\uc131 \ud074\ub798\uc2a4 \u00b6 Class Operator \u00b6 Operator \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 Operator \ud074\ub798\uc2a4 \uac04 \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 Class Operator : \uc778\uacf5\uc2e0\uacbd\ub9dd \uc548\uc5d0\uc11c \uc800\uc218\uc900\uc758 \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc758 \ub178\ub4dc\ub97c \uad6c\uc131\ud558\ub294 \uac00\uc7a5 \uc791\uc740 \ub2e8\uc704 \uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\ub294 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc131\uc744 \uc704\ud574 \uac01\uac01 \uc5f0\uc0b0\uc758 \uc785\ub825 \ubc29\ud5a5\uacfc \ucd9c\ub825 \ubc29\ud5a5\uc5d0 \ub300\ud574\uc11c Operator \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uc800\uc7a5\ud558\ub294 Container \ub97c \uba64\ubc84 \ubcc0\uc218 \ub85c \uac16\uc2b5\ub2c8\ub2e4. Note Container \ub294 WICWIU \uc5d0\uc11c \uc815\uc758\ud55c \ud050\uc640 \ube44\uc2b7\ud55c \uc790\ub8cc \uad6c\uc870\uc785\ub2c8\ub2e4. \ub610\ud55c \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc758 \uc21c\uc804\ud30c\uc640 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\uae30 \uc704\ud574 \uc5f0\uc0b0\uc758 \uacb0\uacfc \uac12\uacfc \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud55c Tensor \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uc800\uc7a5\ud558\ub294 Container \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uc2b5\ub2c8\ub2e4. \uc21c\uc804\ud30c\uc640 \uc5ed\uc804\ud30c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 Weight \ud30c\ub77c\ubbf8\ud130\ub4e4\uc740 \ud6c4\uc5d0 \uae30\uc220\ud560 NeuralNetwork \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130\ub4e4\uc758 Container \ub85c \uac00\uc9c0\uace0 \uc788\uc73c\uba70, Operator \ud074\ub798\uc2a4\uc5d0\uac8c \uc804\ub2ec\ud569\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc5f0\uc0b0\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. Class Module \u00b6 Module \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 \uc608\uc2dc Class Module : \ub2e8\uc77c Operator \ud074\ub798\uc2a4\ub85c\ub294 \uc218\ud589\ud560 \uc218 \uc5c6\ub294 \uace0\uc218\uc900\uc758 \ubcf5\ud569 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 Operator \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d \ubc1b\uc73c\uba70, \ubcf5\uc218\uc758 Operator \ub4e4\uc744 \uc870\ud569\ud558\uc5ec \uc11c\ube0c \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0 \uc5f0\uc0b0\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9(Breadth-First Search) \ubc29\uc2dd\uc744 \uc774\uc6a9\ud574 \uc11c\ube0c \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0 \uc5f0\uc0b0\ud569\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ub2e4\ub978 Module \ud074\ub798\uc2a4\ub97c \ud3ec\ud568\ud558\ub294 \uc7ac\uadc0\uc801 \uad6c\uc870\ub97c \ud615\uc131\ud560 \uc218 \uc788\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ud558\ub098\uc758 \ub2e8\uc77c Operator \ud074\ub798\uc2a4\uc640 \uac19\uc774 \uae30\ub2a5 \ubc0f \ub3d9\uc791 \ud55c\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc5f0\uc0b0\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4. \uc2e0\uacbd\ub9dd \ud559\uc2b5 \ud074\ub798\uc2a4 \u00b6 Class LossFunction \u00b6 LossFunction \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 Class LossFunction : NeuralNetwork \uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uc5bb\uc5b4\uc9c4 \ucd5c\uc885 \ucd9c\ub825 Tensor \uc640 NeuralNetwork \ub85c\ubd80\ud130 \uc804\ub2ec \ubc1b\uc740 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ub808\uc774\ube14 \uac12\uc744 \ube44\uad50\ud558\uc5ec \uc190\uc2e4 \ud568\uc218 \uac12\uc744 \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\uc640\ub294 \uad6c\ubd84\ub41c \ub3c5\ub9bd\uc801\uc778 \ud074\ub798\uc2a4\uc774\uba70, \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uacc4\uc0b0\ud558\uc5ec NeuralNetwork \uc758 \uc5ed\uc804\ud30c\uc758 \uc2dc\uc791 \ubd80\ubd84\uc744 \ub2f4\ub2f9 \ud569\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc190\uc2e4 \ud568\uc218\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4. Class Optimizer \u00b6 NeuralNetwork \ud074\ub798\uc2a4 \ub0b4 \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc758 \uae30\ubcf8 \uad6c\uc870 Optimizer \ud074\ub798\uc2a4 : \ucd5c\uc801\ud654 \uc54c\uace0\ub9ac\uc998\uc744 \ud65c\uc6a9\ud574 Weight \ud30c\ub77c\ubbf8\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \ubaa8\ub378\uc758 \uc5ed\uc804\ud30c \uc2dc, \uc190\uc2e4 \ud568\uc218\uc5d0\uc11c \uacc4\uc0b0\ub41c \uac12\uc5d0 \ub300\ud574\uc11c \uac01 \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc758 \uae30\uc6b8\uae30 \ubca1\ud130\uac00 Tensor \ud615\ud0dc\ub85c \uacc4\uc0b0\ub41c\ub2e4. Optimizer \ud074\ub798\uc2a4\ub294 \uc774 \uae30\uc6b8\uae30 \ubca1\ud130\uc5d0 \ub300\ud55c Tensor \ub4e4\uc758 \ud3ec\uc778\ud130\ub97c Container \ub85c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 Optimizer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4. \uc2e0\uacbd\ub9dd \uad6c\uc131 \u00b6 Class NeuralNetwork \u00b6 NeuralNetwork \ud074\ub798\uc2a4 \uadf8\ub798\ud504 \uc608\uc2dc NeuralNetwork \ud074\ub798\uc2a4 : \uc55e\uc5d0\uc11c \uc124\uba85\ud588\ub358 \uc694\uc18c\ub4e4\uc744 \uc870\ud569\ud558\uc5ec, \ud559\uc2b5 \uac00\ub2a5\ud55c \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc744 \uad6c\uc131\ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 \ud558\ub098\uc758 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\ub294 Operator(Module) \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\uc5d0 \ub300\ud55c Container \ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. Operator(Module) \ud074\ub798\uc2a4\ub4e4\uc774 \uad6c\uc131\ud558\ub294 \uadf8\ub798\ud504\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd \ubaa8\ub378\uc5d0 \ub300\uc751\ub429\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9(Breadth-first Search) \ubc29\uc2dd\uc73c\ub85c \uac01 Operator \ud074\ub798\uc2a4\ub4e4\uc5d0 \uc811\uadfc\ud569\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 LossFunction \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \uc190\uc2e4 \ud568\uc218\uc758 \uac12\uc744 \uacc4\uc0b0\ud558\uace0, Optimizer \ud074\ub798\uc2a4\uc758 \ucd5c\uc801\ud654 \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud574 \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc744 \ucd5c\uc801\ud654\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 Weight \ud30c\ub77c\ubbf8\ud130\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc758 Container \ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba70, \uc5ed\uc804\ud30c \ubc0f \ucd5c\uc801\ud654 \uc2dc \ud65c\uc6a9\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud55c \ud559\uc2b5 \uc9c4\ud589 \ubc29\uc2dd\uc758 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ud6c4\uc220\ud558\uc600\ub2e4.","title":"2. WICWIU \uc2e0\uacbd\ub9dd \uad6c\uc131"},{"location":"dev/wicwiu/nn/#_1","text":"Tensor, Shape, LongArray \ub370\uc774\ud130 \ud615\uc2dd \uc694\uc57d","title":"\ub370\uc774\ud130 \uad6c\uc870"},{"location":"dev/wicwiu/nn/#class-tensor","text":"Class Tensor : WICWIU \uc5d0\uc11c \uc778\uacf5 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc758 \ud559\uc2b5\uc5d0 \uc774\uc6a9\ub418\ub294 \ub370\uc774\ud130\uc758 \uae30\ubcf8 \ud615\uc2dd \uc785\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 \ucd5c\ub300 5\uc758 \uacc4\uc218(Rank)\ub97c \uac16\ub294 \ud150\uc11c\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ud150\uc11c\uc758 \uac01 \ucd95\uc740 \uc778\uacf5 \uc2e0\uacbd\ub9dd \ud559\uc2b5\uc5d0\uc11c Time, Batch, Row, Column \ucd95\uc5d0 \ud574\ub2f9 \ud569\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 \ud150\uc11c\uc758 \ucc28\uc6d0\uc5d0 \uad00\ud55c \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape \ud074\ub798\uc2a4\uc640 \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 LongArray \ud074\ub798\uc2a4 \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uc2b5\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 Shape \ud074\ub798\uc2a4\uc758 \ucc28\uc6d0 \uc815\ubcf4 \ub370\uc774\ud130\ub97c \ud65c\uc6a9\ud574 \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc\ud569\ub2c8\ub2e4. Info Tensor \ub294 \ubb3c\ub9ac\ud559\uc758 \uac1c\ub150\uc744 \ucc28\uc6a9, \ub2e4\ucc28\uc6d0\uc758 \uc815\ubcf4\ub97c \uac16\ub294 \ub370\uc774\ud130\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4.","title":"Class Tensor"},{"location":"dev/wicwiu/nn/#class-shape","text":"Class Shape : Tensor \ub370\uc774\ud130\uc758 \ucc28\uc6d0\uc5d0 \uad00\ud55c \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Shape \ud074\ub798\uc2a4\ub294 \ud150\uc11c\uc758 \uacc4\uc218(Rank)\ub97c \ub2f4\uace0 \uc788\ub294 \ubcc0\uc218\uc640 \uacc4\uc218 \uac01 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ubcc0\uc218 \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uacc4\uc218 \ubcc0\uc218\uc758 \ucd5c\ub313\uac12\uc740 5 \uc774\uace0, \uac01 \ucd95\uc740 \uc778\uacf5 \uc2e0\uacbd\ub9dd \ud559\uc2b5\uc5d0\uc11c Time, Batch, Channel, Row, Column \ucd95\uc73c\ub85c \ud65c\uc6a9\ub429\ub2c8\ub2e4. \uac01 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\uc5d0 \ud574\ub2f9\ud558\ub294 \ubcc0\uc218\ub294 \ud3ec\uc778\ud130\ub85c \uc120\uc5b8 \ub418\uc5b4 \uc788\uc73c\uba70, \ucd95\uc758 \uac1c\uc218\ub9cc\ud07c \ubc30\uc5f4\ub85c\uc11c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ub418\uc5b4 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.","title":"Class Shape"},{"location":"dev/wicwiu/nn/#class-longarray","text":"LongArray \ud074\ub798\uc2a4\uc758 \uc704\uacc4\uc801 \ub370\uc774\ud130 \uad6c\uc870 Class LongArray : High-dimensional Array \uc758 \uc57d\uc5b4\ub85c, \uc2e4\uc81c \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. LongArray \ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub4e4\uc740 \ub3d9\uc801\uc73c\ub85c \ud55c \ubc88\uc5d0 \ud560\ub2f9\ud588\uc744 \ub54c \uba54\ubaa8\ub9ac\uac00 \ubd80\uc871\ud574 \ud560\ub2f9\uc774 \ubd88\uac00\ud558\ub294 \uacbd\uc6b0\ub97c \ub9c9\uae30 \uc704\ud574 \uc704\uacc4\uc801 \uad6c\uc870\ub97c \uac00\uc9c0\uace0 \uc774\uc911 \ud3ec\uc778\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \uc120\uc5b8 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ub17c\ub9ac\uc801\uc73c\ub85c\ub294 \ud558\ub098\uc758 \uc5f0\uc18d\uc801\uc778 \ubc30\uc5f4\uc774\ub098 \ubb3c\ub9ac\uc801\uc73c\ub85c\ub294 \ube14\ub85d\uc73c\ub85c \ub098\ub204\uc5b4\uc838 \uba54\ubaa8\ub9ac\uc5d0 \ud560\ub2f9\ub429\ub2c8\ub2e4. \uac01 \ube14\ub85d\uc740 Time \ucd95\uc744 \uae30\uc900\uc73c\ub85c \uadf8 \uc678 \ub098\uba38\uc9c0 4\uac1c\uc758 \ucc28\uc6d0(Batch, Channel, Row, Column)\uc744 \uac16\ub294 \ub370\uc774\ud130\ub85c \ubd84\ub9ac\ub429\ub2c8\ub2e4.","title":"Class LongArray"},{"location":"dev/wicwiu/nn/#_2","text":"","title":"\uc778\uacf5\uc2e0\uacbd\ub9dd \uad6c\uc131 \ud074\ub798\uc2a4"},{"location":"dev/wicwiu/nn/#class-operator","text":"Operator \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 Operator \ud074\ub798\uc2a4 \uac04 \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 Class Operator : \uc778\uacf5\uc2e0\uacbd\ub9dd \uc548\uc5d0\uc11c \uc800\uc218\uc900\uc758 \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc758 \ub178\ub4dc\ub97c \uad6c\uc131\ud558\ub294 \uac00\uc7a5 \uc791\uc740 \ub2e8\uc704 \uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\ub294 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc131\uc744 \uc704\ud574 \uac01\uac01 \uc5f0\uc0b0\uc758 \uc785\ub825 \ubc29\ud5a5\uacfc \ucd9c\ub825 \ubc29\ud5a5\uc5d0 \ub300\ud574\uc11c Operator \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uc800\uc7a5\ud558\ub294 Container \ub97c \uba64\ubc84 \ubcc0\uc218 \ub85c \uac16\uc2b5\ub2c8\ub2e4. Note Container \ub294 WICWIU \uc5d0\uc11c \uc815\uc758\ud55c \ud050\uc640 \ube44\uc2b7\ud55c \uc790\ub8cc \uad6c\uc870\uc785\ub2c8\ub2e4. \ub610\ud55c \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc758 \uc21c\uc804\ud30c\uc640 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\uae30 \uc704\ud574 \uc5f0\uc0b0\uc758 \uacb0\uacfc \uac12\uacfc \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud55c Tensor \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uc800\uc7a5\ud558\ub294 Container \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uc2b5\ub2c8\ub2e4. \uc21c\uc804\ud30c\uc640 \uc5ed\uc804\ud30c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 Weight \ud30c\ub77c\ubbf8\ud130\ub4e4\uc740 \ud6c4\uc5d0 \uae30\uc220\ud560 NeuralNetwork \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130\ub4e4\uc758 Container \ub85c \uac00\uc9c0\uace0 \uc788\uc73c\uba70, Operator \ud074\ub798\uc2a4\uc5d0\uac8c \uc804\ub2ec\ud569\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc5f0\uc0b0\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.","title":"Class Operator"},{"location":"dev/wicwiu/nn/#class-module","text":"Module \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 \uc608\uc2dc Class Module : \ub2e8\uc77c Operator \ud074\ub798\uc2a4\ub85c\ub294 \uc218\ud589\ud560 \uc218 \uc5c6\ub294 \uace0\uc218\uc900\uc758 \ubcf5\ud569 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 Operator \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d \ubc1b\uc73c\uba70, \ubcf5\uc218\uc758 Operator \ub4e4\uc744 \uc870\ud569\ud558\uc5ec \uc11c\ube0c \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0 \uc5f0\uc0b0\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9(Breadth-First Search) \ubc29\uc2dd\uc744 \uc774\uc6a9\ud574 \uc11c\ube0c \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0 \uc5f0\uc0b0\ud569\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ub2e4\ub978 Module \ud074\ub798\uc2a4\ub97c \ud3ec\ud568\ud558\ub294 \uc7ac\uadc0\uc801 \uad6c\uc870\ub97c \ud615\uc131\ud560 \uc218 \uc788\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ud558\ub098\uc758 \ub2e8\uc77c Operator \ud074\ub798\uc2a4\uc640 \uac19\uc774 \uae30\ub2a5 \ubc0f \ub3d9\uc791 \ud55c\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc5f0\uc0b0\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4.","title":"Class Module"},{"location":"dev/wicwiu/nn/#_3","text":"","title":"\uc2e0\uacbd\ub9dd \ud559\uc2b5 \ud074\ub798\uc2a4"},{"location":"dev/wicwiu/nn/#class-lossfunction","text":"LossFunction \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 Class LossFunction : NeuralNetwork \uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uc5bb\uc5b4\uc9c4 \ucd5c\uc885 \ucd9c\ub825 Tensor \uc640 NeuralNetwork \ub85c\ubd80\ud130 \uc804\ub2ec \ubc1b\uc740 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ub808\uc774\ube14 \uac12\uc744 \ube44\uad50\ud558\uc5ec \uc190\uc2e4 \ud568\uc218 \uac12\uc744 \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\uc640\ub294 \uad6c\ubd84\ub41c \ub3c5\ub9bd\uc801\uc778 \ud074\ub798\uc2a4\uc774\uba70, \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uacc4\uc0b0\ud558\uc5ec NeuralNetwork \uc758 \uc5ed\uc804\ud30c\uc758 \uc2dc\uc791 \ubd80\ubd84\uc744 \ub2f4\ub2f9 \ud569\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc190\uc2e4 \ud568\uc218\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4.","title":"Class LossFunction"},{"location":"dev/wicwiu/nn/#class-optimizer","text":"NeuralNetwork \ud074\ub798\uc2a4 \ub0b4 \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc758 \uae30\ubcf8 \uad6c\uc870 Optimizer \ud074\ub798\uc2a4 : \ucd5c\uc801\ud654 \uc54c\uace0\ub9ac\uc998\uc744 \ud65c\uc6a9\ud574 Weight \ud30c\ub77c\ubbf8\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \ubaa8\ub378\uc758 \uc5ed\uc804\ud30c \uc2dc, \uc190\uc2e4 \ud568\uc218\uc5d0\uc11c \uacc4\uc0b0\ub41c \uac12\uc5d0 \ub300\ud574\uc11c \uac01 \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc758 \uae30\uc6b8\uae30 \ubca1\ud130\uac00 Tensor \ud615\ud0dc\ub85c \uacc4\uc0b0\ub41c\ub2e4. Optimizer \ud074\ub798\uc2a4\ub294 \uc774 \uae30\uc6b8\uae30 \ubca1\ud130\uc5d0 \ub300\ud55c Tensor \ub4e4\uc758 \ud3ec\uc778\ud130\ub97c Container \ub85c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 Optimizer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4.","title":"Class Optimizer"},{"location":"dev/wicwiu/nn/#_4","text":"","title":"\uc2e0\uacbd\ub9dd \uad6c\uc131"},{"location":"dev/wicwiu/nn/#class-neuralnetwork","text":"NeuralNetwork \ud074\ub798\uc2a4 \uadf8\ub798\ud504 \uc608\uc2dc NeuralNetwork \ud074\ub798\uc2a4 : \uc55e\uc5d0\uc11c \uc124\uba85\ud588\ub358 \uc694\uc18c\ub4e4\uc744 \uc870\ud569\ud558\uc5ec, \ud559\uc2b5 \uac00\ub2a5\ud55c \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc744 \uad6c\uc131\ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 \ud558\ub098\uc758 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\ub294 Operator(Module) \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\uc5d0 \ub300\ud55c Container \ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. Operator(Module) \ud074\ub798\uc2a4\ub4e4\uc774 \uad6c\uc131\ud558\ub294 \uadf8\ub798\ud504\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd \ubaa8\ub378\uc5d0 \ub300\uc751\ub429\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9(Breadth-first Search) \ubc29\uc2dd\uc73c\ub85c \uac01 Operator \ud074\ub798\uc2a4\ub4e4\uc5d0 \uc811\uadfc\ud569\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 LossFunction \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \uc190\uc2e4 \ud568\uc218\uc758 \uac12\uc744 \uacc4\uc0b0\ud558\uace0, Optimizer \ud074\ub798\uc2a4\uc758 \ucd5c\uc801\ud654 \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud574 \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc744 \ucd5c\uc801\ud654\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 Weight \ud30c\ub77c\ubbf8\ud130\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc758 Container \ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba70, \uc5ed\uc804\ud30c \ubc0f \ucd5c\uc801\ud654 \uc2dc \ud65c\uc6a9\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud55c \ud559\uc2b5 \uc9c4\ud589 \ubc29\uc2dd\uc758 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ud6c4\uc220\ud558\uc600\ub2e4.","title":"Class NeuralNetwork"},{"location":"doit/fewshot/step1-1/","text":"Info \uc774\uacf3\uc740 fewshot-learning \uc744 \uad6c\ud604\ud558\uae30 \uc704\ud55c WICWIU \uac1c\ubc1c\ud300\uc758 WICWIU \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc744 \uae30\ub85d\ud574\ub450\ub294 \uacf3\uc785\ub2c8\ub2e4. WICWIU \uc758 \ud559\uc2b5 \uacfc\uc815\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uc774\ubbf8 \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor Step 2. \uc21c\uc804\ud30c Step 3. \uc5ed\uc804\ud30c Step 4. Weight \ud30c\ub77c\ubbf8\ud130 \uac31\uc2e0 \uc5ec\uae30\ub294 fewshot \ud300\uc774 \" Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor \" \uc744 \uad6c\ud604\ud558\uae30 \uc704\ud55c \uacfc\uc815\uc744 \uae30\ub85d\ud574\ub450\ub294 \uacf3\uc785\ub2c8\ub2e4. Coding: CasiaWebFace Image to vector \u00b6 getDirList \ud568\uc218 \u00b6 \uba3c\uc800 CasiaWebFace \uc774\ubbf8\uc9c0\ub97c \uc790\ub3d9\uc73c\ub85c \uc77d\uc5b4\uc624\uae30 \uc704\ud558\uc5ec \ub514\ub809\ud1a0\ub9ac \ub9ac\uc2a4\ud2b8\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4 \ubd24\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <string> #include <iostream> #include <fstream> #include <iterator> #include <vector> #include <dirent.h> #include <sys/types.h> DIR * getDirList ( const char * dirName ) { DIR * dir ; if (( dir = opendir ( dirName )) == NULL ) throw std :: invalid_argument ( \"could not open directory\" ); return dir ; } 11~14 : getDirList \ud568\uc218\uc5d0 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\ub97c \uc785\ub825\ud558\uba74 \ub514\ub809\ud1a0\ub9ac \ub0b4\ubd80 \ud30c\uc77c \uc815\ubcf4\ub97c \uac16\uace0 \uc788\ub294 DIR \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 CasiaWebFace \uc774\ubbf8\uc9c0\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 /tmp/casia_train \ub514\ub809\ud1a0\ub9ac\uc758 \ub0b4\ubd80 \ud30c\uc77c\uc744 \ubc18\ud658\ubc1b\ub294 \ucf54\ub4dc\ub97c \uc9e4 \uc218 \uc788\ub2e4. test_getDirList \ud568\uc218 \u00b6 Info test_getDirList \ud568\uc218\uc758 test_ \ub294 camel case \uac00 \uc544\ub2cc snake case \ub85c \ub418\uc5b4\uc788\ub294\ub370, \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc784\uc744 \uac15\uc870\ud558\uae30 \uc704\ud558\uc5ec \uadf8\ub807\uac8c \ud55c \uac83\uc774\ub2e4. \ub098\uba38\uc9c0 \ucf54\ub4dc\ub294 \ubaa8\ub450 camel case \ub85c \ucf54\ub529\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 void test_getDirList ( bool error = false ); int main ( int argc , char const * argv []) { test_getDirList (); return EXIT_SUCCESS ; } void test_getDirList ( bool error ) { DIR * dir ; try { dir = ( error ) ? \\ getDirList ( \"aweoifjaowief\" ) : \\ dir = getDirList ( \"/tmp/casia_train\" ); struct dirent * ent ; while (( ent = readdir ( dir )) != NULL ) { std :: cout << ent -> d_name << std :: endl ; } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } } 1 : test_getDirList \ub294 error \uc778\uc790\ub97c \ubc1b\ub294\ub370 false \uac00 \uae30\ubcf8\uac12\uc73c\ub85c \uc124\uc815\ub418\uc5b4 \uc788\ub2e4. 14~21 : error = false \uc778 \uacbd\uc6b0 /tmp/casia_train \ub514\ub809\ud1a0\ub9ac \ub0b4\ubd80 \ud30c\uc77c\ub4e4\uc744 \ucd9c\ub825\ud55c\ub2e4. 14~21 : error \ub97c true \ub85c \uc124\uc815\ud55c\ub2e4\uba74 \uc758\ub3c4\uc801\uc73c\ub85c \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ucf54\ub4dc\uac00 \ub41c\ub2e4. \uc989, \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ud30c\uc77c \uacbd\ub85c\ub97c getDirList \ud568\uc218\uc5d0 \uc785\ub825\ud558\uc5ec \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\uc11c \uc5d0\ub7ec \ucc98\ub9ac \ucf54\ub4dc( try~catch ) \uac00 \uc798 \uc791\ub3d9\ud558\ub294\uc9c0 \uac80\uc99d\ud55c\ub2e4. test_getFirstCasiaImage \ud568\uc218 \u00b6 \uc774\ud6c4 getDirList \ud568\uc218\ub97c \ud65c\uc6a9\ud558\uc5ec /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\ubcf4\ub294 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4 \ubd24\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 void test_getFirstCasiaTrainImage (); int main ( int argc , char const * argv []) { test_getFirstCasiaTrainImage (); return EXIT_SUCCESS ; } void test_getFirstCasiaTrainImage () { DIR * dir ; std :: string casiaTrainDirPath = \"/tmp/casia_train\" ; std :: string casiaTrainFirstDirPath ; std :: string casiaTrainFirstImagePath ; // // Get first directory of casia_train // try { dir = getDirList ( casiaTrainDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstDirPath = casiaTrainDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Get first image of first directory // try { dir = getDirList ( casiaTrainFirstDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstImagePath = casiaTrainFirstDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Convert image to vector<unsigned char> // std :: ifstream casiaTrainFirstImage ( casiaTrainFirstImagePath , std :: ios :: binary ); std :: vector < unsigned char > casiaTrainFirstImageBuffer ( std :: istreambuf_iterator < char > ( casiaTrainFirstImage ), {}); // // Show result and converted image // std :: cout << \"First image of first caisa_train sub directory:\" << std :: endl ; std :: cout << '\\t' << casiaTrainFirstImagePath << std :: endl ; std :: cout << \"casiaTrainFirstImageBuffer size: \" << std :: endl ; std :: cout << '\\t' << casiaTrainFirstImageBuffer . size () << std :: endl ; std :: cout << \"First 10 bytes:\" << std :: endl ; std :: cout << \" \\t \" ; int ct = 0 ; for ( const auto byte : casiaTrainFirstImageBuffer ) { if ( ct < 10 ) std :: cout << static_cast < int > ( byte ) << ' ' ; ct ++ ; } std :: cout << std :: endl ; } 19~39 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\ub97c casiaTrainFirstDirPath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 42~61 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0 \uacbd\ub85c\ub97c casiaTrainFirstImagePath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 66~67 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \ubc14\uc774\ub108\ub9ac\ub85c \uc77d\uace0 unsigned char \uc790\ub8cc\ud615\uc744 \uac16\ub294 vector \ub85c \ubcc0\ud658\ud55c\ub2e4. 82~87 : \uc774\ubbf8\uc9c0\uc758 \uccab 10 \ubc14\uc774\ud2b8\ub97c \uc77d\uace0 int \ub85c \ud615\ubcc0\ud658\ud558\uc5ec \ucd9c\ub825\ud574\ubcf8\ub2e4. \uadf8\ub0e5 \uc798 \uc77d\ud614\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc774\ub2e4. Info WICWIU \ub294 C++ \ud504\ub85c\uc81d\ud2b8\uc774\uae30 \ub54c\ubb38\uc5d0 C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c C++ \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\ub824\uace0 \ub178\ub825\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c \ub2e4\uc74c \ucf54\ub4dc\ub294 C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc785\ub2c8\ub2e4. for ( const auto byte : casiaTrainFirstImageBuffer ) { std :: cout << ( int )( byte ) << ' ' ; } \ub2e4\uc74c \ucf54\ub4dc\ub294 C++ \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc785\ub2c8\ub2e4. for ( const auto byte : casiaTrainFirstImageBuffer ) { std :: cout << static_cast < int > ( byte ) << ' ' ; } C++ \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\uba74 \ud504\ub85c\uc81d\ud2b8 \uc548\uc815\uc131\uc5d0 \ubb38\uc81c\uac00 \uc0dd\uae38 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc8fc\uc758\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ub9c1\ud06c\ub97c \ucc38\uc870\ud558\uba74 C++ \ucf54\ub529 \uc2a4\ud0c0\uc77c \ub4f1\uc5d0 \ub300\ud55c \uc88b\uc740 \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. https://github.com/AnthonyCalandra/modern-cpp-features https://github.com/isocpp/CppCoreGuidelines https://github.com/lefticus/cppbestpractices Analysis: Dataset to Tensor \u00b6 fewshot \ud300\uc740 LFW \ud300\uc774 \uac1c\ubc1c\ud574\ub454 \ucf54\ub4dc\ub97c \ucc38\uace0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 LFW \ucf54\ub4dc\ub97c \ubd84\uc11d\ud574\ubcf4\uc558\ub2e4. WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc\uc758 WICWIU \ub85c \ud559\uc2b5\ud558\uae30 \uc758 \uccab\ubc88\uc9f8 \uacfc\uc815\uc774 \" Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor \" \uc774\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 \ud559\uc2b5\uc2dc\ucf1c\uc57c\ud560 \ub370\uc774\ud130\uc14b\uc778 Casia Web Face \ub97c Tensor \ub85c \ubcc0\ud658\ud574\uc57c \ud588\ub2e4. \uadf8\ub798\uc11c LFW \ud300\uc758 \ucf54\ub4dc\uc5d0\uc11c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc \ud750\ub984\uc744 \uc911\uc810\uc73c\ub85c \ubd84\uc11d\uc744 \uc2dc\ub3c4\ud574\ubcf4\uc558\ub2e4. Note tutorials/LFW/ \uacbd\ub85c\ub97c LFW/ \ub85c \ucd95\uc57d\ud558\uc5ec \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 LFW \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud558\uace0 \ud14c\uc2a4\ud2b8\ud558\ub294 main \ud568\uc218\ub97c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\uc5ec \uc778\uacf5\uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud558\ub294 \uac83\uc744 \uc911\uc2ec\uc73c\ub85c \ubd84\uc11d \ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/main.cpp : main \ud568\uc218 \u00b6 \ubd84\uc11d \ubaa9\ud45c LFW \ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 \uac00\uc838\uc628 \ud6c4 \ud559\uc2b5\ud558\uace0 \ud14c\uc2a4\ud2b8\ud558\ub294 main \ud568\uc218\uc5d0\uc11c \uc5b4\ub5bb\uac8c \ub370\uc774\ud130\uc14b\uc744 \uac00\uc838\uc624\uace0 Tensor \ub85c \ubcc0\ud658\ud558\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 #define NUMBER_OF_CLASS 5749 // for lfw_funneled ... int main ( int argc , char const * argv []) { ... // ======================= Select net =================== NeuralNetwork < float > * net = new my_FaceNet < float > ( x , label , NUMBER_OF_CLASS ); ... vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); DataLoader < float > * train_dataloader = new LFWSampler < float > ( NUMBER_OF_CLASS , train_dataset , BATCH , TRUE , 1 , FALSE ); 9 : Compose \uac1d\uccb4\ub97c Resize(224) \uc640 Centercrop(220) \ud30c\ub77c\ubbf8\ud130\ub85c \uc0dd\uc131\ud55c\ub2e4. 10-11 : LFWDataset \uc744 \uc0dd\uc131\ud558\uace0 LFWSampler \ub97c \ub9cc\ub4e0\ub2e4. 1 2 3 4 5 6 // ======================= Train ======================= net -> SetModeTrain (); for ( int j = 0 ; j < loop_for_train ; j ++ ) { std :: vector < Tensor < float > *> * temp = train_dataloader -> GetDataFromGlobalBuffer (); ... net -> FeedInputTensor ( 2 , ( * temp )[ 0 ], ( * temp )[ 1 ]); 4 : \ud559\uc2b5\uc744 \uc2dc\uc791\ud560 \ub54c LFWSampler::GetDataFromGlobalBuffer \ub97c \ud1b5\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 Tensor<float> \ud3ec\uc778\ud130\ud615 \ubca1\ud130 \ud3ec\uc778\ud130\uc5d0 \uc800\uc7a5\ud55c\ub2e4. 6 : Tensor \ub85c \ubcc0\ud658\ub41c \ub370\uc774\ud130\uc14b\uc744 \uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud574\uc900\ub2e4. 1 2 3 4 5 6 // ======================= Test ====================== ... for ( int i = 0 ; i < curBatch ; i ++ ){ dataset . CopyData ( batchIdx * BATCH + i , vTestSample [ i ]); } net -> InputToFeature ( INPUT_DIM , vTestSample . size (), & vTestSample [ 0 ], FEATURE_DIM , & vTestFeature [ 0 ], BATCH ); 4 : \ud14c\uc2a4\ud2b8\ub97c \ud560 \ub54c\uc5d0\ub294 LFWDataset::CopyData \ub97c \ud1b5\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 float \ud3ec\uc778\ud130\ud615 \ubca1\ud130\uc5d0 \uc800\uc7a5\ud55c\ub2e4. 6 : \uc5ec\uae30\uc5d0\uc11c \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130\uc14b\uc744 \uc785\ub825\ud574\uc8fc\ub294 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 main \ud568\uc218\uc5d0\uc11c\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud55c \ud6c4 \ud559\uc2b5 \uc2dc\uc5d0\ub294 LFWSampler::GetDataFromGlobalBuffer \uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 \ub9c8\ub828\ud558\uace0 \ud14c\uc2a4\ud2b8 \uc2dc\uc5d0\ub294 LFWDataset::CopyData \ub85c \ub370\uc774\ud130\uc14b\uc744 \ub9c8\ub828\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uadf8\ub7ec\ubbc0\ub85c LFWSampler::GetDataFromGlobalBuffer \uc640 LFWDataset::CopyData \ub97c \ubd84\uc11d\ud558\uba74 \ub370\uc774\ud130\uc14b\uc744 \uc5b4\ub5bb\uac8c Tensor \ub85c \ubc14\uafb8\uc5b4 \uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud560 \uc218 \uc788\ub294\uc9c0 \ucc38\uace0\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 LFWSampler \uac00 LFWDataset \uc5d0 \uc758\uc874\ud558\uae30 \ub54c\ubb38\uc5d0 LFWDataset \uc744 \ubd84\uc11d\ud558\uace0 LFWSampler \uc744 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LFWDataset \uc740 LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc73c\ub85c \uc0dd\uc131\ub418\uba70 vision::Compose *transform \uac00 \uc778\uc790\ub85c \uc804\ub2ec\ub418\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \ubd80\ud130 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 Compose \ub294 \uc0dd\uc131\uc790\uc5d0\uc11c {new vision::Resize(224), new vision::CenterCrop(220)} \uc744 \uc804\ub2ec\ubc1b\uae30 \ub54c\ubb38\uc5d0 \uc774\uac83\ub4e4\ubd80\ud130 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 Resize \uc640 CenterCrop \ud074\ub798\uc2a4\ub294 Transform \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\ub294\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uba3c\uc800 Transform \ud074\ub798\uc2a4\ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Transform \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 namespace vision { class Transform { private : public : Transform () { } virtual ~ Transform () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { } }; ... } 1-2 : Transform \ud074\ub798\uc2a4\ub294 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc120\uc5b8\ub41c \ud074\ub798\uc2a4\uc774\ub2e4. 5-7 : \uc0dd\uc131\uc790\uc640 \uba54\uc18c\ub4dc\ub4e4\uc774 \uad6c\ud604\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. \uc774\ub85c\uc368 \ud074\ub798\uc2a4 \uad6c\uc870 \uc720\uc9c0\ub97c \uc704\ud55c \ucd94\uc0c1 \ud074\ub798\uc2a4\uc784\uc744 \uc54c \uc218 \uc788\ub2e4. Danger \uadf8\ub807\ub2e4\uba74 \uc774 \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc744 \ub9c9\uae30 \uc704\ud558\uc5ec \ub098\uc911\uc5d0 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub85c \uc120\uc5b8\ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 Transform \uc740 DoTransform \uba54\uc18c\ub4dc \uad6c\uc870\ub9cc \uac16\uace0 \uc788\ub294 \ucd94\uc0c1\ud074\ub798\uc2a4\uc774\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Resize \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::Resize(224) ) \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 namespace vision { ... class Resize : public Transform { private : int newHeight ; int newWidth ; public : Resize ( int heigth , int width ) : newHeight ( heigth ), newWidth ( width ) { } Resize ( int size ) : newHeight ( size ), newWidth ( size ) { } virtual ~ Resize () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : Resize \ub294 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 12 : 224 \ub97c \uc804\ub2ec\ubc1b\uc544 newHeight \uc640 newWidth \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 Resize \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::Resize(224) ) \uc740 224 \ub97c \uc804\ub2ec\ubc1b\uc544 newHeight \uc640 newWidth \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c CenterCrop \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::CenterCrop(220) ) \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 namespace vision { ... class CenterCrop : public Transform { private : int m_heigth ; int m_width ; public : CenterCrop ( int heigth , int width ) : m_heigth ( heigth ), m_width ( width ) { } CenterCrop ( int size ) : m_heigth ( size ), m_width ( size ) { } virtual ~ CenterCrop () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : CenterCrop \uc740 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 11 : 220 \ub97c \uc804\ub2ec\ubc1b\uc544 m_height \uc640 m_width \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger Naming Convention \uc774 \ud1b5\uc77c\uc774 \uc548\ub418\uc5b4\uc788\uae30 \ub54c\ubb38\uc5d0 \ub098\uc911\uc5d0 \ud1b5\uc77c\ud574\uc57c\ud560 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 CenterCrop \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::CenterCrop(220) ) \uc740 220 \ub97c \uc804\ub2ec\ubc1b\uc544 m_height \uc640 m_width \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Compose \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 namespace vision { ... class Compose : public Transform { private : std :: vector < Transform *> m_listOfTransform ; int m_size ; public : Compose ( std :: initializer_list < Transform *> lvalue ) : m_listOfTransform ( lvalue ) { m_size = m_listOfTransform . size (); } virtual ~ Compose () { ... } virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : Compose \uc740 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 9-11 : {new vision::Resize(224), new vision::CenterCrop(220)} \ub97c \uc804\ub2ec\ubc1b\uc544 std::vector<Transform *> m_listOfTransform \uc5d0 \uc800\uc7a5\ud558\uace0 std::vector<Transform *> m_listOfTransform \uc758 \uc0ac\uc774\uc988\ub97c int m_size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 Compose \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \uc740 {new vision::Resize(224), new vision::CenterCrop(220)} \uc744 \uc804\ub2ec\ubc1b\uc544 std::vector<Transform *> m_listOfTransform \uc5d0 \uc800\uc7a5\ud558\uace0, std::vector<Transform *> m_listOfTransform \uc758 \uc0ac\uc774\uc988\ub97c int m_size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc744 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LFWDataset \uc740 Dataset \uc758 \ud558\uc704\ud074\ub798\uc2a4\uc774\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 Dataset \ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Dataset \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 template < typename DTYPE > class Dataset { // [] operator override private : /* data */ char m_dataPath [ 256 ]; std :: vector < char *> imageName ; std :: vector < int > label ; std :: vector < int > m_vPosIndex ; std :: vector < int > m_vNegIndex ; public : Dataset (); virtual ~ Dataset (); virtual void Alloc (); virtual void Dealloc (); virtual std :: vector < Tensor < DTYPE > *>* GetData ( int idx ); virtual std :: vector < Tensor < DTYPE > *>* GetDataOfPositiveLabel ( int anchorIdx , int * pPosIdx = NULL ); virtual std :: vector < Tensor < DTYPE > *>* GetDataOfNegativeLabel ( int anchorIdx , int * pNegIdx = NULL ); void SetLabel ( const int * pLabel , int noLabel ); void SetLabel ( const unsigned char * pLabel , int noLabel ); virtual int GetLabel ( int idx ) { ... } virtual int GetLength () { return label . size (); } int GetNumOfDatasetMember (); virtual void CopyData ( int idx , DTYPE * pDest ) { // copy i-th iamge into pDest. (designed for k-NN) ... } virtual void SetPosNegIndices ( std :: vector < int > * pvPosIndex , std :: vector < int > * pvNegIndex ){ // registers indices fo positive and negative samples for each sample ... } std :: vector < int > & GetPositiveIndices () { return m_vPosIndex ; } std :: vector < int > & GetNegativeIndices () { return m_vNegIndex ; } virtual int GetPositiveIndex ( int idx ){ // for triplet loss ... } virtual int GetNegativeIndex ( int idx ){ // for triplet loss ... } }; ... template < typename DTYPE > Dataset < DTYPE >:: Dataset () { } 1 : Dataset \uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc815\uc758\ub41c \ud074\ub798\uc2a4\uc774\ub2e4. Danger API \uc5d0\ub3c4 Dataset \ud074\ub798\uc2a4\uc758 \uc124\uba85\uc774 \ub098\uc640\uc788\uc9c0 \uc54a\uae30\uc5d0 \uc77c\uc77c\uc774 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubd84\uc11d\ud568\uc73c\ub85c\uc368 \ud074\ub798\uc2a4\ub97c \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \ub098\uc911\uc5d0 API \uc5d0 \uc124\uba85\uc744 \ucd94\uac00\ud558\uba74 \uc88b\uc744 \uac83 \uac19\ub2e4. 30-40 : Danger \uadf8\ub7f0\ub370 \uc774 \uba54\uc18c\ub4dc\ub4e4\uc774 Dataset \ucd94\uc0c1 \ud074\ub798\uc2a4\uc5d0 \uc788\uc5b4\uc57c\ud558\ub294\uc9c0 \ubaa8\ub974\uaca0\ub2e4. \ub098\uc911\uc5d0 \ud074\ub798\uc2a4 \uc0c1\uc18d\uad00\uacc4\ub97c \ubd84\uc11d\ud574\uc11c \uc815\ub9ac\ub97c \ud55c\ubc88 \ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. 43-44 : Dataset \uc0dd\uc131\uc790\ub294 \uad6c\ud604\ub418\uc5b4\uc788\uc9c0 \uc54a\ub2e4. Danger \uc774\ub294 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc758 \uac1d\uccb4 \uad6c\uc870\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud55c \ucd94\uc0c1 \uba54\uc18c\ub4dc\uc774\uae30 \ub54c\ubb38\uc5d0 \uc21c\uc218 \ucd94\uc0c1 \uba54\uc18c\ub4dc\ub85c \uc120\uc5b8\ud574\uc11c Dataset \uc758 \uc0dd\uc131\uc744 \ubc29\uc9c0\ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 Dataset \uac1d\uccb4\ub294 \uad6c\ud604\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc740 \ucd94\uc0c1 \ud074\ub798\uc2a4\uc774\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c LFWDataset \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 template < typename DTYPE > class LFWDataset : public Dataset < DTYPE > { private : ... void CheckClassList (); void CreateImageListOfEachClass (); ... Tensor < DTYPE >* Image2Tensor ( ImageWrapper & imgWrp , int doValueScaling ); public : LFWDataset ( std :: string rootPath , std :: string dataPath , int useClassNum , vision :: Compose * transform ) { m_rootPath = rootPath ; m_dataPath = dataPath ; m_useClasNum = useClassNum ; m_numOfImg = 0 ; trigger = 0 ; m_transform = transform ; assert ( m_transform != NULL ); Alloc (); CheckClassList (); CreateImageListOfEachClass (); LogMessageF ( \"lfw_funneled_label.txt\" , TRUE , \"%d samples \\n \" , this -> GetLength ()); CountSamplePerClass (); } ... virtual void Alloc (); ... }; 1-2 : Dataset<DTYPE> \uc744 \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc120\uc5b8\ub418\uc5b4 \uc788\ub2e4. 11~16 Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc131\ub2a5\uc774 \ub354 \uc88b\uc544\uc9c0\ub2c8\uae4c \ub098\uc911\uc5d0 \ubc14\uafd4\uc57c \ud560 \ub4ef\ud558\ub2e4. 16 : vision::Compose * m_transform \uc5d0 vision::Compose *transform = new vision::Compose({new vision::Resize(224), new vision::CenterCrop(220)}); \uc744 \uc800\uc7a5\ud55c\ub2e4. 19 : Alloc \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud788 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. template < typename DTYPE > void LFWDataset < DTYPE >:: Alloc () { sem_init ( & sem , 0 , 1 );} Alloc \uc740 \ub2e8\uc21c\ud788 \uc138\ub9c8\ud3ec\ub97c \ucd08\uae30\ud654\ud574\uc900\ub2e4. 20 : CheckClassList \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. template < typename DTYPE > void LFWDataset < DTYPE >:: CheckClassList () { // mnt/ssd/Data/ImageNet/synset_words.txt std :: string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\" ; const char * cstr = filePath . c_str (); FILE * pFile = NULL ; pFile = fopen ( cstr , \"r\" ); ... char realValue [ 100 ]; for ( int i = 0 ; i < m_useClasNum ; i ++ ) { if ( fscanf ( pFile , \"%s\" , realValue )) { m_className . push_back (( std :: string ) realValue ); while ( fgetc ( pFile ) != '\\n' ) ; ... } \ub2e8\uc21c\ud788 std::string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\"; \ub97c \uc77d\uc5b4\uc11c \ud55c\uc904\uc529 std::vector<std::string> m_className \ubca1\ud130\uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\ub2e4. Danger C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ub41c \uac83\uc774 \ub9ce\uc544\uc11c \ub098\uc911\uc5d0 C++ \uc2a4\ud0c0\uc77c\ub85c \uace0\uccd0\uc57c\ud560 \uac83 \uac19\ub2e4. 37 : CreateImageListOfEachClass() \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 template < typename DTYPE > void LFWDataset < DTYPE >:: CreateImageListOfEachClass () { std :: vector < int > vTmpLabel ; vTmpLabel . reserve ( 2048 ); for ( int classNum = 0 ; classNum < m_useClasNum ; classNum ++ ) { std :: string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className [ classNum ] + \"/list.txt\" ; // check with printf const char * cstr = filePath . c_str (); FILE * pFile = NULL ; pFile = fopen ( cstr , \"r\" ); char realValue [ 100 ]; int numOfImageOfClass = 0 ; ... if ( fscanf ( pFile , \"%s\" , realValue )) { // first realValue is already readed above numOfImageOfClass = atoi ( realValue ); for ( int imageNum = 0 ; imageNum < numOfImageOfClass ; imageNum ++ ) { if ( fscanf ( pFile , \"%s\" , realValue )) { m_aImagePath . push_back (( std :: string )( m_className [ classNum ] + '/' + realValue )); vTmpLabel . push_back ( classNum ); ... fclose ( pFile ); } m_numOfImg = m_aImagePath . size (); this -> SetLabel ( & vTmpLabel [ 0 ], m_numOfImg ); assert ( m_numOfImg > 0 ); } 3 : Note https://en.cppreference.com/w/cpp/container/vector/reserve \uc5d0 std::vector<T,Allocator>::reserve \ub0b4\uc6a9\uc774 \uc788\ub294\ub370 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e4\uc5b4\uac00\ub294 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud544\uc694\ud55c \ub9cc\ud07c \ud558\ub3c4\ub85d \ud574\uc11c \uc18d\ub3c4\ub3c4 \ub192\uc774\uace0, \uba54\ubaa8\ub9ac \ud6a8\uc728\ub3c4 \ucc59\uae30\ub294 \uc88b\uc740 \ucf54\ub4dc\uc778 \uac83 \uac19\ub2e4. 6~9 : std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className[classNum] + \"/list.txt\"; \ub97c \uc77d\uc5b4\uc11c pFile \ub85c \ud30c\uc77c\uc744 \uc5f0\ub2e4. 13-16 : pFile \uc758 \ud55c\uc904\uc744 realValue \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc774\uac83\uc744 atoi \ud568\uc218\ub85c int \ub85c \ubcc0\ud658\ud558\uc5ec numOfImageOfClass \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 16~19 : numOfImageOfClass \ub9cc\ud07c for \ubb38\uc744 \ub3cc\uba74\uc11c pFile \ub2e4\uc74c \ub77c\uc778\uc744 realValue \uc5d0 \uc77d\uace0 (std::string)(m_className[classNum] + '/' + realValue) \uc744 std::vecotr<std::string> m_aImagePath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger \ud558\uc9c0\ub9cc C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uacfc C \uc2a4\ud0c0\uc77c \uc5d0\ub7ec \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 C++ \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uacfc try-catch \ubb38\uc73c\ub85c \ubc14\uafb8\uc5b4\uc57c \ud560 \uac83 \uac19\ub2e4. 19 : \uadf8\ub9ac\uace0 std::vector<int> vTmpLabel; \uc5d0 classNum \uc744 \uc800\uc7a5\ud55c\ub2e4. classNum \uc740 0 \ubd80\ud130 m_useClasNum \uae4c\uc9c0\uc758 int \uc774\ub2e4. 23-24 : \ub9c8\uc9c0\ub9c9\uc73c\ub85c m_aImagePath \ubca1\ud130 \uc0ac\uc774\uc988\ub97c \uac16\uace0 \uc640\uc11c m_numOfImg \uc5d0 \uc800\uc7a5\ud558\uace0 SetLabel \ud568\uc218\uc5d0 vTmpLabel \uc758 \uc8fc\uc18c\uac12\uacfc \ud568\uaed8 \uc804\ub2ec\ud574\uc900\ub2e4. \uc774\ub85c\uc368 CreateImageListOfEachClass \ub294 \uc774\ubbf8\uc9c0 \uacbd\ub85c\uc640 \ud074\ub798\uc2a4 \ub77c\ubca8\uc744 \ubca1\ud130\uc5d0 \uc798 \uc800\uc7a5\ud574\uc8fc\ub294 \ud568\uc218\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 LFWDataset \uc740 std::string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\"; \ub97c \uc77d\uc5b4\uc11c \ud074\ub798\uc2a4 \ub9ac\uc2a4\ud2b8\ub97c std::vector<std::string> m_className \uc5d0 \uc800\uc7a5\ud558\uace0, std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className[classNum] + \"/list.txt\"; \ub97c \uc77d\uc5b4\uc11c \uc774\ubbf8\uc9c0 \uacbd\ub85c\ub97c std::vecotr<std::string> m_aImagePath \uc5d0 \uc800\uc7a5\ud558\uace0, this->SetLabel(&vTmpLabel[0], m_numOfImg); \uc744 \ud638\ucd9c\ud558\uba74\uc11c \uc0dd\uc131\ub41c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c LFWDataset::CopyData \uba54\uc18c\ub4dc\ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc804\uc5d0 Dataset::SetLabel \uba54\uc18c\ub4dc\uac00 \uc815\ud655\ud788 \ubb34\uc5c7\uc744 \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c this->SetLabel(&vTmpLabel[0], m_numOfImg); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 template < typename DTYPE > void Dataset < DTYPE >:: SetLabel ( const unsigned char * pLabel , int noLabel ) { try { label . resize ( noLabel ); ... for ( int i = 0 ; i < noLabel ; i ++ ) label [ i ] = ( int ) pLabel [ i ]; } 1 : std::vector<int> \uc758 \uccab\ubc88\uc9f8 \uc6d0\uc18c\uc758 \uc8fc\uc18c\uac12\uc744 const unsigned char * \ub85c \ubc1b\ub294\ub2e4. Danger \ub17c\uc758\uac00 \ud544\uc694\ud55c \ucf54\ub4dc\uc774\ub2e4. \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc774 \uc77c\uc5b4\ub098\uae30 \ub54c\ubb38\uc774\ub2e4. 4 : std::vector<int> label; \uc758 \ud06c\uae30\ub97c noLabel \ub85c \uc870\uc815\ud55c\ub2e4. 6-7 : std::vector<int> label; \uc5d0 pLabel[i] \ub97c \uc800\uc7a5\ud55c\ub2e4. \ub530\ub77c\uc11c 0 \ubd80\ud130 m_useClasNum \uae4c\uc9c0\uc758 int \uac00 \uc800\uc7a5\ub41c\ub2e4. \ubd84\uc11d \uacb0\ub860 this->SetLabel(&vTmpLabel[0], m_numOfImg); \ub294 Dataset \uc758 std::vector<int> label; \uc5d0 vTmpLabel \uc758 \ub0b4\uc6a9\uc744 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c dataset.CopyData(batchIdx * BATCH + i, vTestSample[i]); \ub85c \uc5b4\ub5bb\uac8c \ub370\uc774\ud130\uac00 Tensor \ub85c \ubcc0\ud658\ub418\uc5b4 \uc2e0\uacbd\ub9dd\uc73c\ub85c \uc785\ub825\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 template < typename DTYPE > void LFWDataset < DTYPE >:: CopyData ( int idx , DTYPE * pDest ) { Tensor < DTYPE > * image = NULL ; ImageWrapper imgWrp ; // image load this -> AllocImageBuffer ( idx , imgWrp ); m_transform -> DoTransform ( imgWrp ); image = this -> Image2Tensor ( imgWrp , TRUE ); memcpy ( pDest , & ( * image )[ 0 ], INPUT_DIM * sizeof ( DTYPE )); delete image ; } 7 : AllocImageBuffer \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 template < typename DTYPE > void LFWDataset < DTYPE >:: AllocImageBuffer ( int idx , ImageWrapper & imgWrp ) { int width , height ; FILE * jpegFile = NULL ; unsigned char * jpegBuf = NULL ; int pixelFormat = TJPF_RGB ; tjhandle tjInstance = NULL ; long size ; int inSubsamp , inColorspace ; unsigned long jpegSize ; // create file address std :: string filePath = m_rootPath + '/' + m_dataPath + '/' + m_aImagePath [ idx ]; // check with printf const char * cstr = filePath . c_str (); // Load image (no throw and catch) /* Read the JPEG file into memory. */ jpegFile = fopen ( cstr , \"rb\" ); fseek ( jpegFile , 0 , SEEK_END ); size = ftell ( jpegFile ); fseek ( jpegFile , 0 , SEEK_SET ); jpegSize = ( unsigned long ) size ; jpegBuf = ( unsigned char * ) tjAlloc ( jpegSize ); if ( fread ( jpegBuf , jpegSize , 1 , jpegFile ) < 1 ) exit ( - 1 ); fclose ( jpegFile ); jpegFile = NULL ; tjInstance = tjInitDecompress (); tjDecompressHeader3 ( tjInstance , jpegBuf , jpegSize , & width , & height , & inSubsamp , & inColorspace ); imgWrp . imgBuf = ( unsigned char * ) tjAlloc ( width * height * tjPixelSize [ pixelFormat ]); tjDecompress2 ( tjInstance , jpegBuf , jpegSize , imgWrp . imgBuf , width , 0 , height , pixelFormat , 0 ); imgWrp . imgShape = new Shape ( tjPixelSize [ pixelFormat ], height , width ); tjFree ( jpegBuf ); jpegBuf = NULL ; tjDestroy ( tjInstance ); tjInstance = NULL ; } 12-21 : std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_aImagePath[idx]; // check with printf \ub97c jpegFile \ub85c \uc5f4\uace0 \ud30c\uc77c \uc0ac\uc774\uc988\ub97c size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger libjpeg-turbo \uc640\uc758 \ud638\ud658\uc131\uc744 \uc720\uc9c0\ud558\uba74\uc11c C \uc2a4\ud0c0\uc77c\uc744 C++ \uc2a4\ud0c0\uc77c\ub85c \ubc14\uafb8\ub294 \ubc29\ubc95\uc5d0 \ub300\ud55c \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. 23-34 : libjpeg-turbo \ub97c \uc0ac\uc6a9\ud558\uc5ec .jpeg \ud30c\uc77c\uc758 \uc555\ucd95\uc744 \ud480\uace0 imgWrp.imgBuf \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 36 : \uadf8\ub9ac\uace0 imgWrp.imgShape \uc5d0 \\(\\text{tjPixelSize[pixelFormat]} \\times \\text{height } \\times \\text{width}\\) \ud615\uc0c1\uc744 Shape \ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc800\uc7a5\ud55c\ub2e4. Danger \ud558\uc9c0\ub9cc \uc774 \ud568\uc218\ub294 \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 \uc555\ucd95\uc744 \ud478\ub294 \uacfc\uc815\uc5d0\uc11c \uc5d0\ub7ec\ucc98\ub9ac\ub97c \ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc704\ud5d8\ud55c \ucf54\ub4dc\uc774\ub2e4. \uadf8\ub9ac\uace0 \ud568\uc218 \uc774\ub984 AllocImageBuffer \ub9cc \ubcf4\uc558\uc744 \ub54c\ub294 \uba54\ubaa8\ub9ac \uacf5\uac04\ub9cc \ud560\ub2f9\ud560 \uac83 \uac19\uc740\ub370 \uc2e4\uc81c\ub85c .jpeg \ud30c\uc77c\uc758 \uc555\ucd95\uc744 \ud480\uace0 Shape \ud615\uc0c1\uae4c\uc9c0 \ub9cc\ub4e4\uc5b4\uc900\ub2e4. \uc5b4\uca0c\ub4e0 \uacb0\uacfc\uc801\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 \uc555\ucd95\uc744 \ud480\uc5b4\uc11c imgWrp.imgBuf \uc5d0 \uc800\uc7a5\ud558\uace0 Shape \ud074\ub798\uc2a4\ub85c \ud615\uc0c1\uc744 \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 8 : \uc555\ucd95\uc774 \ud574\uc81c\ub41c .jpeg \uc774\ubbf8\uc9c0\uc640 \uadf8 \ud615\uc0c1\uc774 \uc800\uc7a5\ub41c imgWrp \uc744 vision:Compose::DoTransform \uc5d0 \uc804\ub2ec\ud55c\ub2e4. Note \uc774\uac83\uc740 LFW/main.cpp \uc758 main \ud568\uc218\uc5d0\uc11c vision::Compose *transform = new vision::Compose({new vision::Resize(224), new vision::CenterCrop(220)}); \ub85c \uc0dd\uc131\ub41c Compose \uac1d\uccb4\uc774\uc5c8\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. 9 : imgWrp \uc744 LFWDataset<DTYPE>::Image2Tensor(ImageWrapper& imgWrp, int doValueScaling) \uc5d0 \uc804\ub2ec\ud558\uace0 Tensor<DTYPE> * image \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc774 \ucf54\ub4dc\uac00 \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc\uc778 \uac83 \uac19\ub2e4. 10 : DTYPE * pDest \uc5d0 (*image)[0] \uc758 \uc8fc\uc18c\uac12\uc744 \uae30\uc810\uc73c\ub85c INPUT_DIM * sizeof(DTYPE) \ubc14\uc774\ud2b8\ub97c \ubcf5\uc0ac\ud55c\ub2e4. Danger \uc774 \ucf54\ub4dc\uc758 \uc548\uc815\uc131\uc5d0 \ub300\ud55c \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. \uc65c\ub0d0\ud558\uba74 memcpy \ub294 \ub0b4\ubd80\uc801\uc73c\ub85c \ud3ec\uc778\ud130 \ud0c0\uc785\uc744 \uac80\uc99d\ud558\uc9c0 \uc54a\uace0 \ub2e8\uc21c\ud788 \uc8fc\uc5b4\uc9c4 \ubc14\uc774\ud2b8 \ub9cc\ud07c\uc744 \uc8fc\uc5b4\uc9c4 \uc8fc\uc18c\uac12\uc73c\ub85c \ubcf5\uc0ac\ud560 \ubfd0\uc774\uae30 \ub54c\ubb38\uc774\ub2e4.( https://stackoverflow.com/a/19439770/11218888 ) \ubd84\uc11d \uacb0\ub860 LFWDataset::CopyData \uba54\uc18c\ub4dc\ub294 \uadf8 \uc774\ub984\uacfc \ub2e4\ub974\uac8c AllocImageBuffer \ub97c \ud1b5\ud558\uc5ec \uc774\ubbf8\uc9c0 \uc555\ucd95\uc744 \ud574\uc81c\ud558\uc5ec imgWrp \uc5d0 \uc800\uc7a5\ud558\uace0 \uc774\ubbf8\uc9c0 \ud615\uc0c1\uc744 new Shape(tjPixelSize[pixelFormat], height, width); \ub85c \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud558\uace0, DoTransform \uc744 \ud1b5\ud574 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0, Image2Tensor \ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud574\uc900\ub2e4. Danger \ud544\uc694\ud55c \ucc98\ub9ac\ub4e4\uc744 \uc0dd\uc131\uc790 \ub610\ub294 StartProcess \uc5d0\uc11c \ud574\uc8fc\uace0 CopyData \uc5d0\uc11c\ub294 \ub370\uc774\ud130 \ubcf5\uc0ac \uae30\ub2a5\ub9cc \ud574\uc57c \ud560 \uac83 \uac19\ub2e4. \uc65c\ub0d0\ud558\uba74 CopyData \uba54\uc18c\ub4dc\uac00 \ud638\ucd9c\ub420 \ub54c\ub9c8\ub2e4 \uc774\ubbf8\uc9c0 \uc555\ucd95 \ud574\uc81c\uc640 \ub370\uc774\ud130 \ucc98\ub9ac, \uadf8\ub9ac\uace0 Tensor \ubcc0\ud658\uc774 \uc774\ub8e8\uc5b4\uc9c0\ub294\ub370 \ub9cc\uc57d \ud55c\ubc88 \uc774\ub8e8\uc5b4\uc84c\ub2e4\uba74 \uc774\ud6c4\uc5d0 \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\uc774 \ub05d\uc5c6\uc774 \ubc18\ubcf5\ub418\uae30 \ub54c\ubb38\uc774\ub2e4. \ub610\ud55c \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c\uc758 \ud45c\uc900\uc73c\ub85c \ub110\ub9ac \uc54c\ub824\uc9c4 \uc720\ub2c9\uc2a4 \ucca0\ud559 \uc5d0 \ub530\ub974\uba74 \ud558\ub098\uc758 \ud568\uc218\ub294 \ud558\ub098\uc758 \uae30\ub2a5\ub9cc \ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud574\uc8fc\ub294 LFWDataset<DTYPE>::Image2Tensor \ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 \uadf8\uc5d0 \uc55e\uc11c \uc774\ubbf8\uc9c0\uc758 \ud615\uc0c1\uc744 Shape \ub85c \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc5b4\ub5a4 \uac83\uc778\uc9c0, \uadf8\ub9ac\uace0 \ub370\uc774\ud130\uc14b\uc744 vision:Compose::DoTransform \uc5d0 \uc804\ub2ec\ud558\uc5ec \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\ub294\uc9c0 \uc774\ud574\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 \uc774 \uba54\uc18c\ub4dc\ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \uc774\ud574\ud558\uae30 \uba3c\uc800 API \uc5d0 Shape \uc5d0 \ub300\ud55c \uc124\uba85\uc774 \uc788\uc73c\ubbc0\ub85c \uc774\ubc88\uc5d0\ub294 \ucf54\ub4dc \ubd84\uc11d\uc5d0 \uc55e\uc11c API \uc758 \uc124\uba85\uc744 \uc0b4\ud3b4\ubcf8\ub2e4. API \uc5d0 \ub530\ub974\uba74 Shape \ub294 Tensor \uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc800\uc7a5\ud558\uace0 \uc788\ub294 \uac1d\uccb4\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \uc774 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc800\uc7a5\ud55c\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. API \uc5d0 \ub530\ub974\uba74 public Shape(int pSize0,int pSize1,int pSize2) \ub294 3\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790\uc774\ub2e4. \ub610 pSize0 \ub294 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30, pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30, pSize2 \uc138 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Shape { private : int m_Rank ; ///< Shape \ud074\ub798\uc2a4\ub97c \uad6c\uc131\ud558\ub294 Rank \uba64\ubc84\ubcc0\uc218, \ud150\uc11c\ub97c \uad6c\uc131\ud558\ub294 \ucd95\uc758 \uac1c\uc218 int * m_aDim ; ///< Shape \ud074\ub798\uc2a4\ub97c \uad6c\uc131\ud558\ub294 Dimension \uba64\ubc84\ubcc0\uc218, \uac01 \ucd95\uc758 \ucc28\uc6d0 Device m_Device ; ///< \uc7a5\uce58 \uc0ac\uc6a9 \uad6c\ubd84\uc790, CPU \ub610\ub294 GPU, Device \ucc38\uace0 int m_idOfDevice ; ///< GPU \uc0ac\uc6a9 \uc2dc, \uc0ac\uc6a9\ud558\ub824\ub294 GPU\uc758 \ubc88\ud638. CPU\uc758 \uacbd\uc6b0 -1 #ifdef __CUDNN__ cudnnTensorDescriptor_t m_desc ; ///< cudnn\uc758 Tensor Descriptor, GPU \uc5f0\uc0b0\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 Tensor\uc758 shape \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ud3ec\uc778\ud130 \ubcc0\uc218 #endif // if __CUDNN__ int Alloc ( int pRank , ...); int Alloc ( Shape * pShape ); ... public : Shape ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 ); Shape ( int pSize0 , int pSize1 , int pSize2 , int pSize3 ); Shape ( int pSize0 , int pSize1 , int pSize2 ); Shape ( int pSize0 , int pSize1 ); Shape ( int pSize0 ); Shape ( Shape * pShape ); // Copy Constructor virtual ~ Shape (); int GetRank (); int GetDim ( int pRanknum ); int & operator []( int pRanknum ); // operator[] overload ... }; 16 : \uc9c0\uae08 \ubd84\uc11d \ubaa9\ud45c\uac00 imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \ub97c \uc774\ud574\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uc774 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 Shape :: Shape ( int pSize0 , int pSize1 , int pSize2 ) { m_Rank = 0 ; m_aDim = NULL ; m_idOfDevice = - 1 ; #ifdef __CUDNN__ m_desc = NULL ; #endif // if __CUDNN__ Alloc ( 3 , pSize0 , pSize1 , pSize2 ); } 2-4 : Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc88b\uc744 \uac83 \uac19\ub2e4. 8 : Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 int Shape :: Alloc ( int pRank , ...) { try { if ( pRank > 0 ) m_Rank = pRank ; else throw pRank ; } catch ( int e ) { printf ( \"Receive invalid rank value %d in %s (%s %d) \\n \" , e , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } try { m_aDim = new int [ m_Rank ]; } catch (...) { printf ( \"Failed to allcate memory in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } va_list ap ; va_start ( ap , pRank ); // need to check compare between pRank value and number of another parameter for ( int i = 0 ; i < pRank ; i ++ ) { // need to check whether int or not m_aDim [ i ] = va_arg ( ap , int ); } va_end ( ap ); m_Device = CPU ; return TRUE ; } 2-15 : Danger try-catch \ubb38\uc744 \ud1b5\uc77c\ud558\uba74 \ucf54\ub4dc\ub97c \ucd95\uc57d\uc2dc\ud0ac \uc218 \uc788\ub2e4. \ub610 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ud45c\uc900\ucd9c\ub825\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uace0 \uc788\ub2e4. \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub294 fprintf(stderr,...) \ub610\ub294 std::cerr << ... \uc640 \uac19\uc774 \uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uc57c \ud55c\ub2e4. m_Rank = 3 \uc73c\ub85c int * m_aDim = new int[3] \uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. 17-25 : \uac00\ubcc0\uc778\uc790\ub97c \uac00\uc838\uc640\uc11c int * m_aDim \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uac00\ubcc0\uc778\uc790\ub294 tjPixelSize[pixelFormat], height, width \uc774\ubbc0\ub85c \uc774 \uac12\ub4e4\uc774 m_aDim[i] \uc5d0 \uac01\uac01 \uc800\uc7a5\ub41c\ub2e4. Danger \uac00\ubcc0\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 C \uc5d0\uc11c #include <stdarg.h> \uac00 \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc C++ \uc5d0\uc11c\ub294 \ud638\ud658\uc131\uc744 \uc704\ud558\uc5ec #include <cstdarg> \uc774 \uc120\uc5b8\ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4. \uc774 \uc120\uc5b8\uc740 src/Common.h \uc5d0 \uc120\uc5b8\ub418\uc5b4 \uc788\ub294\ub370 \uc774\uacf3\uc5d0\ub294 \ub300\ub7c9\uc758 C \uc5b8\uc5b4\uc758 \ud5e4\ub354 \uc120\uc5b8\ubb38 #include <....h> \uac00 \uc120\uc5b8\ub418\uc5b4 \uc788\uc5c8\ub2e4. \ubaa8\ub450 \ub2e4 C++ \uc2a4\ud0c0\uc77c \ud5e4\ub354 \uc120\uc5b8\uc73c\ub85c \ubc14\uafc0 \ud544\uc694\uac00 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 Shape \ub294 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c int * m_aDim \uc5d0 \uc800\uc7a5\ud558\uace0, \ucd95\uc758 \uac1c\uc218\ub97c m_Rank \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \ub294 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4 \\[\\text{tjPixelSize[pixelFormat]} \\times \\text{height } \\times \\text{width}\\] \ub97c Shape \uac1d\uccb4\ub85c \uc0dd\uc131\ud558\uc5ec imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 class Compose : public Transform { private : std :: vector < Transform *> m_listOfTransform ; int m_size ; ... virtual void DoTransform ( ImageWrapper & imgWrp ) { for ( int i = 0 ; i < m_size ; i ++ ) { m_listOfTransform [ i ] -> DoTransform ( imgWrp ); } } }; 5 : std::vector<Transform *> m_listOfTransform; \uc758 \uc6d0\uc18c\ub4e4\uc758 DoTransform \uba54\uc18c\ub4dc\ub97c imgWrp \uc744 \uc785\ub825\ud558\uc5ec \ud638\ucd9c\ud55c\ub2e4. m_listOfTransform \ub294 {new vision::Resize(224), new vision::CenterCrop(220)} \ub85c \ucd08\uae30\ud654\ub418\uc5c8\uc73c\ubbc0\ub85c vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uc774 \ud638\ucd9c\ub420 \uac83\uc774\ub2e4. \ubd84\uc11d \uacb0\ub860 vision::Compose::DoTransform \uba54\uc18c\ub4dc\ub294 m_listOfTransform \uc758 DoTransform \uba54\uc18c\ub4dc\uc5d0 imgWrp \uc744 \uc785\ub825\ud558\uba70 \ud638\ucd9c\ud574\uc900\ub2e4. m_listOfTransform \ub294 {new vision::Resize(224), new vision::CenterCrop(220)} \ub85c \ucd08\uae30\ud654\ub418\uc5c8\uc73c\ubbc0\ub85c vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uc774 \ud638\ucd9c\ub41c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uac00 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"Step 1 (1). Data &rarr; Tensor"},{"location":"doit/fewshot/step1-1/#coding-casiawebface-image-to-vector","text":"","title":"Coding: CasiaWebFace Image to vector"},{"location":"doit/fewshot/step1-1/#getdirlist","text":"\uba3c\uc800 CasiaWebFace \uc774\ubbf8\uc9c0\ub97c \uc790\ub3d9\uc73c\ub85c \uc77d\uc5b4\uc624\uae30 \uc704\ud558\uc5ec \ub514\ub809\ud1a0\ub9ac \ub9ac\uc2a4\ud2b8\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4 \ubd24\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <string> #include <iostream> #include <fstream> #include <iterator> #include <vector> #include <dirent.h> #include <sys/types.h> DIR * getDirList ( const char * dirName ) { DIR * dir ; if (( dir = opendir ( dirName )) == NULL ) throw std :: invalid_argument ( \"could not open directory\" ); return dir ; } 11~14 : getDirList \ud568\uc218\uc5d0 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\ub97c \uc785\ub825\ud558\uba74 \ub514\ub809\ud1a0\ub9ac \ub0b4\ubd80 \ud30c\uc77c \uc815\ubcf4\ub97c \uac16\uace0 \uc788\ub294 DIR \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 CasiaWebFace \uc774\ubbf8\uc9c0\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 /tmp/casia_train \ub514\ub809\ud1a0\ub9ac\uc758 \ub0b4\ubd80 \ud30c\uc77c\uc744 \ubc18\ud658\ubc1b\ub294 \ucf54\ub4dc\ub97c \uc9e4 \uc218 \uc788\ub2e4.","title":"getDirList \ud568\uc218"},{"location":"doit/fewshot/step1-1/#test_getdirlist","text":"Info test_getDirList \ud568\uc218\uc758 test_ \ub294 camel case \uac00 \uc544\ub2cc snake case \ub85c \ub418\uc5b4\uc788\ub294\ub370, \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc784\uc744 \uac15\uc870\ud558\uae30 \uc704\ud558\uc5ec \uadf8\ub807\uac8c \ud55c \uac83\uc774\ub2e4. \ub098\uba38\uc9c0 \ucf54\ub4dc\ub294 \ubaa8\ub450 camel case \ub85c \ucf54\ub529\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 void test_getDirList ( bool error = false ); int main ( int argc , char const * argv []) { test_getDirList (); return EXIT_SUCCESS ; } void test_getDirList ( bool error ) { DIR * dir ; try { dir = ( error ) ? \\ getDirList ( \"aweoifjaowief\" ) : \\ dir = getDirList ( \"/tmp/casia_train\" ); struct dirent * ent ; while (( ent = readdir ( dir )) != NULL ) { std :: cout << ent -> d_name << std :: endl ; } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } } 1 : test_getDirList \ub294 error \uc778\uc790\ub97c \ubc1b\ub294\ub370 false \uac00 \uae30\ubcf8\uac12\uc73c\ub85c \uc124\uc815\ub418\uc5b4 \uc788\ub2e4. 14~21 : error = false \uc778 \uacbd\uc6b0 /tmp/casia_train \ub514\ub809\ud1a0\ub9ac \ub0b4\ubd80 \ud30c\uc77c\ub4e4\uc744 \ucd9c\ub825\ud55c\ub2e4. 14~21 : error \ub97c true \ub85c \uc124\uc815\ud55c\ub2e4\uba74 \uc758\ub3c4\uc801\uc73c\ub85c \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ucf54\ub4dc\uac00 \ub41c\ub2e4. \uc989, \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ud30c\uc77c \uacbd\ub85c\ub97c getDirList \ud568\uc218\uc5d0 \uc785\ub825\ud558\uc5ec \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\uc11c \uc5d0\ub7ec \ucc98\ub9ac \ucf54\ub4dc( try~catch ) \uac00 \uc798 \uc791\ub3d9\ud558\ub294\uc9c0 \uac80\uc99d\ud55c\ub2e4.","title":"test_getDirList \ud568\uc218"},{"location":"doit/fewshot/step1-1/#test_getfirstcasiaimage","text":"\uc774\ud6c4 getDirList \ud568\uc218\ub97c \ud65c\uc6a9\ud558\uc5ec /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\ubcf4\ub294 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4 \ubd24\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 void test_getFirstCasiaTrainImage (); int main ( int argc , char const * argv []) { test_getFirstCasiaTrainImage (); return EXIT_SUCCESS ; } void test_getFirstCasiaTrainImage () { DIR * dir ; std :: string casiaTrainDirPath = \"/tmp/casia_train\" ; std :: string casiaTrainFirstDirPath ; std :: string casiaTrainFirstImagePath ; // // Get first directory of casia_train // try { dir = getDirList ( casiaTrainDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstDirPath = casiaTrainDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Get first image of first directory // try { dir = getDirList ( casiaTrainFirstDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstImagePath = casiaTrainFirstDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Convert image to vector<unsigned char> // std :: ifstream casiaTrainFirstImage ( casiaTrainFirstImagePath , std :: ios :: binary ); std :: vector < unsigned char > casiaTrainFirstImageBuffer ( std :: istreambuf_iterator < char > ( casiaTrainFirstImage ), {}); // // Show result and converted image // std :: cout << \"First image of first caisa_train sub directory:\" << std :: endl ; std :: cout << '\\t' << casiaTrainFirstImagePath << std :: endl ; std :: cout << \"casiaTrainFirstImageBuffer size: \" << std :: endl ; std :: cout << '\\t' << casiaTrainFirstImageBuffer . size () << std :: endl ; std :: cout << \"First 10 bytes:\" << std :: endl ; std :: cout << \" \\t \" ; int ct = 0 ; for ( const auto byte : casiaTrainFirstImageBuffer ) { if ( ct < 10 ) std :: cout << static_cast < int > ( byte ) << ' ' ; ct ++ ; } std :: cout << std :: endl ; } 19~39 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\ub97c casiaTrainFirstDirPath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 42~61 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0 \uacbd\ub85c\ub97c casiaTrainFirstImagePath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 66~67 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \ubc14\uc774\ub108\ub9ac\ub85c \uc77d\uace0 unsigned char \uc790\ub8cc\ud615\uc744 \uac16\ub294 vector \ub85c \ubcc0\ud658\ud55c\ub2e4. 82~87 : \uc774\ubbf8\uc9c0\uc758 \uccab 10 \ubc14\uc774\ud2b8\ub97c \uc77d\uace0 int \ub85c \ud615\ubcc0\ud658\ud558\uc5ec \ucd9c\ub825\ud574\ubcf8\ub2e4. \uadf8\ub0e5 \uc798 \uc77d\ud614\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc774\ub2e4. Info WICWIU \ub294 C++ \ud504\ub85c\uc81d\ud2b8\uc774\uae30 \ub54c\ubb38\uc5d0 C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c C++ \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\ub824\uace0 \ub178\ub825\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c \ub2e4\uc74c \ucf54\ub4dc\ub294 C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc785\ub2c8\ub2e4. for ( const auto byte : casiaTrainFirstImageBuffer ) { std :: cout << ( int )( byte ) << ' ' ; } \ub2e4\uc74c \ucf54\ub4dc\ub294 C++ \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc785\ub2c8\ub2e4. for ( const auto byte : casiaTrainFirstImageBuffer ) { std :: cout << static_cast < int > ( byte ) << ' ' ; } C++ \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\uba74 \ud504\ub85c\uc81d\ud2b8 \uc548\uc815\uc131\uc5d0 \ubb38\uc81c\uac00 \uc0dd\uae38 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc8fc\uc758\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ub9c1\ud06c\ub97c \ucc38\uc870\ud558\uba74 C++ \ucf54\ub529 \uc2a4\ud0c0\uc77c \ub4f1\uc5d0 \ub300\ud55c \uc88b\uc740 \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. https://github.com/AnthonyCalandra/modern-cpp-features https://github.com/isocpp/CppCoreGuidelines https://github.com/lefticus/cppbestpractices","title":"test_getFirstCasiaImage \ud568\uc218"},{"location":"doit/fewshot/step1-1/#analysis-dataset-to-tensor","text":"fewshot \ud300\uc740 LFW \ud300\uc774 \uac1c\ubc1c\ud574\ub454 \ucf54\ub4dc\ub97c \ucc38\uace0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 LFW \ucf54\ub4dc\ub97c \ubd84\uc11d\ud574\ubcf4\uc558\ub2e4. WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc\uc758 WICWIU \ub85c \ud559\uc2b5\ud558\uae30 \uc758 \uccab\ubc88\uc9f8 \uacfc\uc815\uc774 \" Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor \" \uc774\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 \ud559\uc2b5\uc2dc\ucf1c\uc57c\ud560 \ub370\uc774\ud130\uc14b\uc778 Casia Web Face \ub97c Tensor \ub85c \ubcc0\ud658\ud574\uc57c \ud588\ub2e4. \uadf8\ub798\uc11c LFW \ud300\uc758 \ucf54\ub4dc\uc5d0\uc11c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc \ud750\ub984\uc744 \uc911\uc810\uc73c\ub85c \ubd84\uc11d\uc744 \uc2dc\ub3c4\ud574\ubcf4\uc558\ub2e4. Note tutorials/LFW/ \uacbd\ub85c\ub97c LFW/ \ub85c \ucd95\uc57d\ud558\uc5ec \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 LFW \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud558\uace0 \ud14c\uc2a4\ud2b8\ud558\ub294 main \ud568\uc218\ub97c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\uc5ec \uc778\uacf5\uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud558\ub294 \uac83\uc744 \uc911\uc2ec\uc73c\ub85c \ubd84\uc11d \ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218","title":"Analysis: Dataset to Tensor"},{"location":"doit/fewshot/step1-1/#lfwmaincpp-main","text":"\ubd84\uc11d \ubaa9\ud45c LFW \ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 \uac00\uc838\uc628 \ud6c4 \ud559\uc2b5\ud558\uace0 \ud14c\uc2a4\ud2b8\ud558\ub294 main \ud568\uc218\uc5d0\uc11c \uc5b4\ub5bb\uac8c \ub370\uc774\ud130\uc14b\uc744 \uac00\uc838\uc624\uace0 Tensor \ub85c \ubcc0\ud658\ud558\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 #define NUMBER_OF_CLASS 5749 // for lfw_funneled ... int main ( int argc , char const * argv []) { ... // ======================= Select net =================== NeuralNetwork < float > * net = new my_FaceNet < float > ( x , label , NUMBER_OF_CLASS ); ... vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); DataLoader < float > * train_dataloader = new LFWSampler < float > ( NUMBER_OF_CLASS , train_dataset , BATCH , TRUE , 1 , FALSE ); 9 : Compose \uac1d\uccb4\ub97c Resize(224) \uc640 Centercrop(220) \ud30c\ub77c\ubbf8\ud130\ub85c \uc0dd\uc131\ud55c\ub2e4. 10-11 : LFWDataset \uc744 \uc0dd\uc131\ud558\uace0 LFWSampler \ub97c \ub9cc\ub4e0\ub2e4. 1 2 3 4 5 6 // ======================= Train ======================= net -> SetModeTrain (); for ( int j = 0 ; j < loop_for_train ; j ++ ) { std :: vector < Tensor < float > *> * temp = train_dataloader -> GetDataFromGlobalBuffer (); ... net -> FeedInputTensor ( 2 , ( * temp )[ 0 ], ( * temp )[ 1 ]); 4 : \ud559\uc2b5\uc744 \uc2dc\uc791\ud560 \ub54c LFWSampler::GetDataFromGlobalBuffer \ub97c \ud1b5\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 Tensor<float> \ud3ec\uc778\ud130\ud615 \ubca1\ud130 \ud3ec\uc778\ud130\uc5d0 \uc800\uc7a5\ud55c\ub2e4. 6 : Tensor \ub85c \ubcc0\ud658\ub41c \ub370\uc774\ud130\uc14b\uc744 \uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud574\uc900\ub2e4. 1 2 3 4 5 6 // ======================= Test ====================== ... for ( int i = 0 ; i < curBatch ; i ++ ){ dataset . CopyData ( batchIdx * BATCH + i , vTestSample [ i ]); } net -> InputToFeature ( INPUT_DIM , vTestSample . size (), & vTestSample [ 0 ], FEATURE_DIM , & vTestFeature [ 0 ], BATCH ); 4 : \ud14c\uc2a4\ud2b8\ub97c \ud560 \ub54c\uc5d0\ub294 LFWDataset::CopyData \ub97c \ud1b5\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 float \ud3ec\uc778\ud130\ud615 \ubca1\ud130\uc5d0 \uc800\uc7a5\ud55c\ub2e4. 6 : \uc5ec\uae30\uc5d0\uc11c \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130\uc14b\uc744 \uc785\ub825\ud574\uc8fc\ub294 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 main \ud568\uc218\uc5d0\uc11c\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud55c \ud6c4 \ud559\uc2b5 \uc2dc\uc5d0\ub294 LFWSampler::GetDataFromGlobalBuffer \uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 \ub9c8\ub828\ud558\uace0 \ud14c\uc2a4\ud2b8 \uc2dc\uc5d0\ub294 LFWDataset::CopyData \ub85c \ub370\uc774\ud130\uc14b\uc744 \ub9c8\ub828\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uadf8\ub7ec\ubbc0\ub85c LFWSampler::GetDataFromGlobalBuffer \uc640 LFWDataset::CopyData \ub97c \ubd84\uc11d\ud558\uba74 \ub370\uc774\ud130\uc14b\uc744 \uc5b4\ub5bb\uac8c Tensor \ub85c \ubc14\uafb8\uc5b4 \uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud560 \uc218 \uc788\ub294\uc9c0 \ucc38\uace0\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 LFWSampler \uac00 LFWDataset \uc5d0 \uc758\uc874\ud558\uae30 \ub54c\ubb38\uc5d0 LFWDataset \uc744 \ubd84\uc11d\ud558\uace0 LFWSampler \uc744 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LFWDataset \uc740 LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc73c\ub85c \uc0dd\uc131\ub418\uba70 vision::Compose *transform \uac00 \uc778\uc790\ub85c \uc804\ub2ec\ub418\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \ubd80\ud130 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 Compose \ub294 \uc0dd\uc131\uc790\uc5d0\uc11c {new vision::Resize(224), new vision::CenterCrop(220)} \uc744 \uc804\ub2ec\ubc1b\uae30 \ub54c\ubb38\uc5d0 \uc774\uac83\ub4e4\ubd80\ud130 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 Resize \uc640 CenterCrop \ud074\ub798\uc2a4\ub294 Transform \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\ub294\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uba3c\uc800 Transform \ud074\ub798\uc2a4\ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/main.cpp: main \ud568\uc218"},{"location":"doit/fewshot/step1-1/#lfwimageprocesshpp-transform","text":"\ubd84\uc11d \ubaa9\ud45c Transform \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 namespace vision { class Transform { private : public : Transform () { } virtual ~ Transform () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { } }; ... } 1-2 : Transform \ud074\ub798\uc2a4\ub294 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc120\uc5b8\ub41c \ud074\ub798\uc2a4\uc774\ub2e4. 5-7 : \uc0dd\uc131\uc790\uc640 \uba54\uc18c\ub4dc\ub4e4\uc774 \uad6c\ud604\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. \uc774\ub85c\uc368 \ud074\ub798\uc2a4 \uad6c\uc870 \uc720\uc9c0\ub97c \uc704\ud55c \ucd94\uc0c1 \ud074\ub798\uc2a4\uc784\uc744 \uc54c \uc218 \uc788\ub2e4. Danger \uadf8\ub807\ub2e4\uba74 \uc774 \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc744 \ub9c9\uae30 \uc704\ud558\uc5ec \ub098\uc911\uc5d0 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub85c \uc120\uc5b8\ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 Transform \uc740 DoTransform \uba54\uc18c\ub4dc \uad6c\uc870\ub9cc \uac16\uace0 \uc788\ub294 \ucd94\uc0c1\ud074\ub798\uc2a4\uc774\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: Transform \uc0dd\uc131\uc790"},{"location":"doit/fewshot/step1-1/#lfwimageprocesshpp-resize","text":"\ubd84\uc11d \ubaa9\ud45c Resize \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::Resize(224) ) \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 namespace vision { ... class Resize : public Transform { private : int newHeight ; int newWidth ; public : Resize ( int heigth , int width ) : newHeight ( heigth ), newWidth ( width ) { } Resize ( int size ) : newHeight ( size ), newWidth ( size ) { } virtual ~ Resize () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : Resize \ub294 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 12 : 224 \ub97c \uc804\ub2ec\ubc1b\uc544 newHeight \uc640 newWidth \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 Resize \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::Resize(224) ) \uc740 224 \ub97c \uc804\ub2ec\ubc1b\uc544 newHeight \uc640 newWidth \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: Resize \uc0dd\uc131\uc790"},{"location":"doit/fewshot/step1-1/#lfwimageprocesshpp-centercrop","text":"\ubd84\uc11d \ubaa9\ud45c CenterCrop \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::CenterCrop(220) ) \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 namespace vision { ... class CenterCrop : public Transform { private : int m_heigth ; int m_width ; public : CenterCrop ( int heigth , int width ) : m_heigth ( heigth ), m_width ( width ) { } CenterCrop ( int size ) : m_heigth ( size ), m_width ( size ) { } virtual ~ CenterCrop () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : CenterCrop \uc740 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 11 : 220 \ub97c \uc804\ub2ec\ubc1b\uc544 m_height \uc640 m_width \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger Naming Convention \uc774 \ud1b5\uc77c\uc774 \uc548\ub418\uc5b4\uc788\uae30 \ub54c\ubb38\uc5d0 \ub098\uc911\uc5d0 \ud1b5\uc77c\ud574\uc57c\ud560 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 CenterCrop \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::CenterCrop(220) ) \uc740 220 \ub97c \uc804\ub2ec\ubc1b\uc544 m_height \uc640 m_width \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: CenterCrop \uc0dd\uc131\uc790"},{"location":"doit/fewshot/step1-1/#lfwimageprocesshpp-compose","text":"\ubd84\uc11d \ubaa9\ud45c Compose \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 namespace vision { ... class Compose : public Transform { private : std :: vector < Transform *> m_listOfTransform ; int m_size ; public : Compose ( std :: initializer_list < Transform *> lvalue ) : m_listOfTransform ( lvalue ) { m_size = m_listOfTransform . size (); } virtual ~ Compose () { ... } virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : Compose \uc740 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 9-11 : {new vision::Resize(224), new vision::CenterCrop(220)} \ub97c \uc804\ub2ec\ubc1b\uc544 std::vector<Transform *> m_listOfTransform \uc5d0 \uc800\uc7a5\ud558\uace0 std::vector<Transform *> m_listOfTransform \uc758 \uc0ac\uc774\uc988\ub97c int m_size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 Compose \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \uc740 {new vision::Resize(224), new vision::CenterCrop(220)} \uc744 \uc804\ub2ec\ubc1b\uc544 std::vector<Transform *> m_listOfTransform \uc5d0 \uc800\uc7a5\ud558\uace0, std::vector<Transform *> m_listOfTransform \uc758 \uc0ac\uc774\uc988\ub97c int m_size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc744 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LFWDataset \uc740 Dataset \uc758 \ud558\uc704\ud074\ub798\uc2a4\uc774\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 Dataset \ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: Compose \uc0dd\uc131\uc790"},{"location":"doit/fewshot/step1-1/#srcdatasethpp-dataset","text":"\ubd84\uc11d \ubaa9\ud45c Dataset \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 template < typename DTYPE > class Dataset { // [] operator override private : /* data */ char m_dataPath [ 256 ]; std :: vector < char *> imageName ; std :: vector < int > label ; std :: vector < int > m_vPosIndex ; std :: vector < int > m_vNegIndex ; public : Dataset (); virtual ~ Dataset (); virtual void Alloc (); virtual void Dealloc (); virtual std :: vector < Tensor < DTYPE > *>* GetData ( int idx ); virtual std :: vector < Tensor < DTYPE > *>* GetDataOfPositiveLabel ( int anchorIdx , int * pPosIdx = NULL ); virtual std :: vector < Tensor < DTYPE > *>* GetDataOfNegativeLabel ( int anchorIdx , int * pNegIdx = NULL ); void SetLabel ( const int * pLabel , int noLabel ); void SetLabel ( const unsigned char * pLabel , int noLabel ); virtual int GetLabel ( int idx ) { ... } virtual int GetLength () { return label . size (); } int GetNumOfDatasetMember (); virtual void CopyData ( int idx , DTYPE * pDest ) { // copy i-th iamge into pDest. (designed for k-NN) ... } virtual void SetPosNegIndices ( std :: vector < int > * pvPosIndex , std :: vector < int > * pvNegIndex ){ // registers indices fo positive and negative samples for each sample ... } std :: vector < int > & GetPositiveIndices () { return m_vPosIndex ; } std :: vector < int > & GetNegativeIndices () { return m_vNegIndex ; } virtual int GetPositiveIndex ( int idx ){ // for triplet loss ... } virtual int GetNegativeIndex ( int idx ){ // for triplet loss ... } }; ... template < typename DTYPE > Dataset < DTYPE >:: Dataset () { } 1 : Dataset \uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc815\uc758\ub41c \ud074\ub798\uc2a4\uc774\ub2e4. Danger API \uc5d0\ub3c4 Dataset \ud074\ub798\uc2a4\uc758 \uc124\uba85\uc774 \ub098\uc640\uc788\uc9c0 \uc54a\uae30\uc5d0 \uc77c\uc77c\uc774 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubd84\uc11d\ud568\uc73c\ub85c\uc368 \ud074\ub798\uc2a4\ub97c \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \ub098\uc911\uc5d0 API \uc5d0 \uc124\uba85\uc744 \ucd94\uac00\ud558\uba74 \uc88b\uc744 \uac83 \uac19\ub2e4. 30-40 : Danger \uadf8\ub7f0\ub370 \uc774 \uba54\uc18c\ub4dc\ub4e4\uc774 Dataset \ucd94\uc0c1 \ud074\ub798\uc2a4\uc5d0 \uc788\uc5b4\uc57c\ud558\ub294\uc9c0 \ubaa8\ub974\uaca0\ub2e4. \ub098\uc911\uc5d0 \ud074\ub798\uc2a4 \uc0c1\uc18d\uad00\uacc4\ub97c \ubd84\uc11d\ud574\uc11c \uc815\ub9ac\ub97c \ud55c\ubc88 \ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. 43-44 : Dataset \uc0dd\uc131\uc790\ub294 \uad6c\ud604\ub418\uc5b4\uc788\uc9c0 \uc54a\ub2e4. Danger \uc774\ub294 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc758 \uac1d\uccb4 \uad6c\uc870\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud55c \ucd94\uc0c1 \uba54\uc18c\ub4dc\uc774\uae30 \ub54c\ubb38\uc5d0 \uc21c\uc218 \ucd94\uc0c1 \uba54\uc18c\ub4dc\ub85c \uc120\uc5b8\ud574\uc11c Dataset \uc758 \uc0dd\uc131\uc744 \ubc29\uc9c0\ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 Dataset \uac1d\uccb4\ub294 \uad6c\ud604\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc740 \ucd94\uc0c1 \ud074\ub798\uc2a4\uc774\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Dataset.hpp: Dataset \uc0dd\uc131\uc790"},{"location":"doit/fewshot/step1-1/#lfwlfwdatasethpp-lfwdataset","text":"\ubd84\uc11d \ubaa9\ud45c LFWDataset \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 template < typename DTYPE > class LFWDataset : public Dataset < DTYPE > { private : ... void CheckClassList (); void CreateImageListOfEachClass (); ... Tensor < DTYPE >* Image2Tensor ( ImageWrapper & imgWrp , int doValueScaling ); public : LFWDataset ( std :: string rootPath , std :: string dataPath , int useClassNum , vision :: Compose * transform ) { m_rootPath = rootPath ; m_dataPath = dataPath ; m_useClasNum = useClassNum ; m_numOfImg = 0 ; trigger = 0 ; m_transform = transform ; assert ( m_transform != NULL ); Alloc (); CheckClassList (); CreateImageListOfEachClass (); LogMessageF ( \"lfw_funneled_label.txt\" , TRUE , \"%d samples \\n \" , this -> GetLength ()); CountSamplePerClass (); } ... virtual void Alloc (); ... }; 1-2 : Dataset<DTYPE> \uc744 \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc120\uc5b8\ub418\uc5b4 \uc788\ub2e4. 11~16 Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc131\ub2a5\uc774 \ub354 \uc88b\uc544\uc9c0\ub2c8\uae4c \ub098\uc911\uc5d0 \ubc14\uafd4\uc57c \ud560 \ub4ef\ud558\ub2e4. 16 : vision::Compose * m_transform \uc5d0 vision::Compose *transform = new vision::Compose({new vision::Resize(224), new vision::CenterCrop(220)}); \uc744 \uc800\uc7a5\ud55c\ub2e4. 19 : Alloc \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud788 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. template < typename DTYPE > void LFWDataset < DTYPE >:: Alloc () { sem_init ( & sem , 0 , 1 );} Alloc \uc740 \ub2e8\uc21c\ud788 \uc138\ub9c8\ud3ec\ub97c \ucd08\uae30\ud654\ud574\uc900\ub2e4. 20 : CheckClassList \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. template < typename DTYPE > void LFWDataset < DTYPE >:: CheckClassList () { // mnt/ssd/Data/ImageNet/synset_words.txt std :: string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\" ; const char * cstr = filePath . c_str (); FILE * pFile = NULL ; pFile = fopen ( cstr , \"r\" ); ... char realValue [ 100 ]; for ( int i = 0 ; i < m_useClasNum ; i ++ ) { if ( fscanf ( pFile , \"%s\" , realValue )) { m_className . push_back (( std :: string ) realValue ); while ( fgetc ( pFile ) != '\\n' ) ; ... } \ub2e8\uc21c\ud788 std::string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\"; \ub97c \uc77d\uc5b4\uc11c \ud55c\uc904\uc529 std::vector<std::string> m_className \ubca1\ud130\uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\ub2e4. Danger C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ub41c \uac83\uc774 \ub9ce\uc544\uc11c \ub098\uc911\uc5d0 C++ \uc2a4\ud0c0\uc77c\ub85c \uace0\uccd0\uc57c\ud560 \uac83 \uac19\ub2e4. 37 : CreateImageListOfEachClass() \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 template < typename DTYPE > void LFWDataset < DTYPE >:: CreateImageListOfEachClass () { std :: vector < int > vTmpLabel ; vTmpLabel . reserve ( 2048 ); for ( int classNum = 0 ; classNum < m_useClasNum ; classNum ++ ) { std :: string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className [ classNum ] + \"/list.txt\" ; // check with printf const char * cstr = filePath . c_str (); FILE * pFile = NULL ; pFile = fopen ( cstr , \"r\" ); char realValue [ 100 ]; int numOfImageOfClass = 0 ; ... if ( fscanf ( pFile , \"%s\" , realValue )) { // first realValue is already readed above numOfImageOfClass = atoi ( realValue ); for ( int imageNum = 0 ; imageNum < numOfImageOfClass ; imageNum ++ ) { if ( fscanf ( pFile , \"%s\" , realValue )) { m_aImagePath . push_back (( std :: string )( m_className [ classNum ] + '/' + realValue )); vTmpLabel . push_back ( classNum ); ... fclose ( pFile ); } m_numOfImg = m_aImagePath . size (); this -> SetLabel ( & vTmpLabel [ 0 ], m_numOfImg ); assert ( m_numOfImg > 0 ); } 3 : Note https://en.cppreference.com/w/cpp/container/vector/reserve \uc5d0 std::vector<T,Allocator>::reserve \ub0b4\uc6a9\uc774 \uc788\ub294\ub370 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e4\uc5b4\uac00\ub294 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud544\uc694\ud55c \ub9cc\ud07c \ud558\ub3c4\ub85d \ud574\uc11c \uc18d\ub3c4\ub3c4 \ub192\uc774\uace0, \uba54\ubaa8\ub9ac \ud6a8\uc728\ub3c4 \ucc59\uae30\ub294 \uc88b\uc740 \ucf54\ub4dc\uc778 \uac83 \uac19\ub2e4. 6~9 : std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className[classNum] + \"/list.txt\"; \ub97c \uc77d\uc5b4\uc11c pFile \ub85c \ud30c\uc77c\uc744 \uc5f0\ub2e4. 13-16 : pFile \uc758 \ud55c\uc904\uc744 realValue \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc774\uac83\uc744 atoi \ud568\uc218\ub85c int \ub85c \ubcc0\ud658\ud558\uc5ec numOfImageOfClass \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 16~19 : numOfImageOfClass \ub9cc\ud07c for \ubb38\uc744 \ub3cc\uba74\uc11c pFile \ub2e4\uc74c \ub77c\uc778\uc744 realValue \uc5d0 \uc77d\uace0 (std::string)(m_className[classNum] + '/' + realValue) \uc744 std::vecotr<std::string> m_aImagePath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger \ud558\uc9c0\ub9cc C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uacfc C \uc2a4\ud0c0\uc77c \uc5d0\ub7ec \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 C++ \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uacfc try-catch \ubb38\uc73c\ub85c \ubc14\uafb8\uc5b4\uc57c \ud560 \uac83 \uac19\ub2e4. 19 : \uadf8\ub9ac\uace0 std::vector<int> vTmpLabel; \uc5d0 classNum \uc744 \uc800\uc7a5\ud55c\ub2e4. classNum \uc740 0 \ubd80\ud130 m_useClasNum \uae4c\uc9c0\uc758 int \uc774\ub2e4. 23-24 : \ub9c8\uc9c0\ub9c9\uc73c\ub85c m_aImagePath \ubca1\ud130 \uc0ac\uc774\uc988\ub97c \uac16\uace0 \uc640\uc11c m_numOfImg \uc5d0 \uc800\uc7a5\ud558\uace0 SetLabel \ud568\uc218\uc5d0 vTmpLabel \uc758 \uc8fc\uc18c\uac12\uacfc \ud568\uaed8 \uc804\ub2ec\ud574\uc900\ub2e4. \uc774\ub85c\uc368 CreateImageListOfEachClass \ub294 \uc774\ubbf8\uc9c0 \uacbd\ub85c\uc640 \ud074\ub798\uc2a4 \ub77c\ubca8\uc744 \ubca1\ud130\uc5d0 \uc798 \uc800\uc7a5\ud574\uc8fc\ub294 \ud568\uc218\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 LFWDataset \uc740 std::string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\"; \ub97c \uc77d\uc5b4\uc11c \ud074\ub798\uc2a4 \ub9ac\uc2a4\ud2b8\ub97c std::vector<std::string> m_className \uc5d0 \uc800\uc7a5\ud558\uace0, std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className[classNum] + \"/list.txt\"; \ub97c \uc77d\uc5b4\uc11c \uc774\ubbf8\uc9c0 \uacbd\ub85c\ub97c std::vecotr<std::string> m_aImagePath \uc5d0 \uc800\uc7a5\ud558\uace0, this->SetLabel(&vTmpLabel[0], m_numOfImg); \uc744 \ud638\ucd9c\ud558\uba74\uc11c \uc0dd\uc131\ub41c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c LFWDataset::CopyData \uba54\uc18c\ub4dc\ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc804\uc5d0 Dataset::SetLabel \uba54\uc18c\ub4dc\uac00 \uc815\ud655\ud788 \ubb34\uc5c7\uc744 \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/LFWDataset.hpp: LFWDataset \uc0dd\uc131\uc790"},{"location":"doit/fewshot/step1-1/#srcdatasethpp-datasetsetlabel","text":"\ubd84\uc11d \ubaa9\ud45c this->SetLabel(&vTmpLabel[0], m_numOfImg); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 template < typename DTYPE > void Dataset < DTYPE >:: SetLabel ( const unsigned char * pLabel , int noLabel ) { try { label . resize ( noLabel ); ... for ( int i = 0 ; i < noLabel ; i ++ ) label [ i ] = ( int ) pLabel [ i ]; } 1 : std::vector<int> \uc758 \uccab\ubc88\uc9f8 \uc6d0\uc18c\uc758 \uc8fc\uc18c\uac12\uc744 const unsigned char * \ub85c \ubc1b\ub294\ub2e4. Danger \ub17c\uc758\uac00 \ud544\uc694\ud55c \ucf54\ub4dc\uc774\ub2e4. \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc774 \uc77c\uc5b4\ub098\uae30 \ub54c\ubb38\uc774\ub2e4. 4 : std::vector<int> label; \uc758 \ud06c\uae30\ub97c noLabel \ub85c \uc870\uc815\ud55c\ub2e4. 6-7 : std::vector<int> label; \uc5d0 pLabel[i] \ub97c \uc800\uc7a5\ud55c\ub2e4. \ub530\ub77c\uc11c 0 \ubd80\ud130 m_useClasNum \uae4c\uc9c0\uc758 int \uac00 \uc800\uc7a5\ub41c\ub2e4. \ubd84\uc11d \uacb0\ub860 this->SetLabel(&vTmpLabel[0], m_numOfImg); \ub294 Dataset \uc758 std::vector<int> label; \uc5d0 vTmpLabel \uc758 \ub0b4\uc6a9\uc744 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Dataset.hpp: Dataset::SetLabel \uba54\uc18c\ub4dc"},{"location":"doit/fewshot/step1-1/#lfwlfwdatasethpp-lfwdatasetcopydata","text":"\ubd84\uc11d \ubaa9\ud45c dataset.CopyData(batchIdx * BATCH + i, vTestSample[i]); \ub85c \uc5b4\ub5bb\uac8c \ub370\uc774\ud130\uac00 Tensor \ub85c \ubcc0\ud658\ub418\uc5b4 \uc2e0\uacbd\ub9dd\uc73c\ub85c \uc785\ub825\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 template < typename DTYPE > void LFWDataset < DTYPE >:: CopyData ( int idx , DTYPE * pDest ) { Tensor < DTYPE > * image = NULL ; ImageWrapper imgWrp ; // image load this -> AllocImageBuffer ( idx , imgWrp ); m_transform -> DoTransform ( imgWrp ); image = this -> Image2Tensor ( imgWrp , TRUE ); memcpy ( pDest , & ( * image )[ 0 ], INPUT_DIM * sizeof ( DTYPE )); delete image ; } 7 : AllocImageBuffer \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 template < typename DTYPE > void LFWDataset < DTYPE >:: AllocImageBuffer ( int idx , ImageWrapper & imgWrp ) { int width , height ; FILE * jpegFile = NULL ; unsigned char * jpegBuf = NULL ; int pixelFormat = TJPF_RGB ; tjhandle tjInstance = NULL ; long size ; int inSubsamp , inColorspace ; unsigned long jpegSize ; // create file address std :: string filePath = m_rootPath + '/' + m_dataPath + '/' + m_aImagePath [ idx ]; // check with printf const char * cstr = filePath . c_str (); // Load image (no throw and catch) /* Read the JPEG file into memory. */ jpegFile = fopen ( cstr , \"rb\" ); fseek ( jpegFile , 0 , SEEK_END ); size = ftell ( jpegFile ); fseek ( jpegFile , 0 , SEEK_SET ); jpegSize = ( unsigned long ) size ; jpegBuf = ( unsigned char * ) tjAlloc ( jpegSize ); if ( fread ( jpegBuf , jpegSize , 1 , jpegFile ) < 1 ) exit ( - 1 ); fclose ( jpegFile ); jpegFile = NULL ; tjInstance = tjInitDecompress (); tjDecompressHeader3 ( tjInstance , jpegBuf , jpegSize , & width , & height , & inSubsamp , & inColorspace ); imgWrp . imgBuf = ( unsigned char * ) tjAlloc ( width * height * tjPixelSize [ pixelFormat ]); tjDecompress2 ( tjInstance , jpegBuf , jpegSize , imgWrp . imgBuf , width , 0 , height , pixelFormat , 0 ); imgWrp . imgShape = new Shape ( tjPixelSize [ pixelFormat ], height , width ); tjFree ( jpegBuf ); jpegBuf = NULL ; tjDestroy ( tjInstance ); tjInstance = NULL ; } 12-21 : std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_aImagePath[idx]; // check with printf \ub97c jpegFile \ub85c \uc5f4\uace0 \ud30c\uc77c \uc0ac\uc774\uc988\ub97c size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger libjpeg-turbo \uc640\uc758 \ud638\ud658\uc131\uc744 \uc720\uc9c0\ud558\uba74\uc11c C \uc2a4\ud0c0\uc77c\uc744 C++ \uc2a4\ud0c0\uc77c\ub85c \ubc14\uafb8\ub294 \ubc29\ubc95\uc5d0 \ub300\ud55c \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. 23-34 : libjpeg-turbo \ub97c \uc0ac\uc6a9\ud558\uc5ec .jpeg \ud30c\uc77c\uc758 \uc555\ucd95\uc744 \ud480\uace0 imgWrp.imgBuf \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 36 : \uadf8\ub9ac\uace0 imgWrp.imgShape \uc5d0 \\(\\text{tjPixelSize[pixelFormat]} \\times \\text{height } \\times \\text{width}\\) \ud615\uc0c1\uc744 Shape \ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc800\uc7a5\ud55c\ub2e4. Danger \ud558\uc9c0\ub9cc \uc774 \ud568\uc218\ub294 \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 \uc555\ucd95\uc744 \ud478\ub294 \uacfc\uc815\uc5d0\uc11c \uc5d0\ub7ec\ucc98\ub9ac\ub97c \ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc704\ud5d8\ud55c \ucf54\ub4dc\uc774\ub2e4. \uadf8\ub9ac\uace0 \ud568\uc218 \uc774\ub984 AllocImageBuffer \ub9cc \ubcf4\uc558\uc744 \ub54c\ub294 \uba54\ubaa8\ub9ac \uacf5\uac04\ub9cc \ud560\ub2f9\ud560 \uac83 \uac19\uc740\ub370 \uc2e4\uc81c\ub85c .jpeg \ud30c\uc77c\uc758 \uc555\ucd95\uc744 \ud480\uace0 Shape \ud615\uc0c1\uae4c\uc9c0 \ub9cc\ub4e4\uc5b4\uc900\ub2e4. \uc5b4\uca0c\ub4e0 \uacb0\uacfc\uc801\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 \uc555\ucd95\uc744 \ud480\uc5b4\uc11c imgWrp.imgBuf \uc5d0 \uc800\uc7a5\ud558\uace0 Shape \ud074\ub798\uc2a4\ub85c \ud615\uc0c1\uc744 \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 8 : \uc555\ucd95\uc774 \ud574\uc81c\ub41c .jpeg \uc774\ubbf8\uc9c0\uc640 \uadf8 \ud615\uc0c1\uc774 \uc800\uc7a5\ub41c imgWrp \uc744 vision:Compose::DoTransform \uc5d0 \uc804\ub2ec\ud55c\ub2e4. Note \uc774\uac83\uc740 LFW/main.cpp \uc758 main \ud568\uc218\uc5d0\uc11c vision::Compose *transform = new vision::Compose({new vision::Resize(224), new vision::CenterCrop(220)}); \ub85c \uc0dd\uc131\ub41c Compose \uac1d\uccb4\uc774\uc5c8\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. 9 : imgWrp \uc744 LFWDataset<DTYPE>::Image2Tensor(ImageWrapper& imgWrp, int doValueScaling) \uc5d0 \uc804\ub2ec\ud558\uace0 Tensor<DTYPE> * image \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc774 \ucf54\ub4dc\uac00 \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc\uc778 \uac83 \uac19\ub2e4. 10 : DTYPE * pDest \uc5d0 (*image)[0] \uc758 \uc8fc\uc18c\uac12\uc744 \uae30\uc810\uc73c\ub85c INPUT_DIM * sizeof(DTYPE) \ubc14\uc774\ud2b8\ub97c \ubcf5\uc0ac\ud55c\ub2e4. Danger \uc774 \ucf54\ub4dc\uc758 \uc548\uc815\uc131\uc5d0 \ub300\ud55c \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. \uc65c\ub0d0\ud558\uba74 memcpy \ub294 \ub0b4\ubd80\uc801\uc73c\ub85c \ud3ec\uc778\ud130 \ud0c0\uc785\uc744 \uac80\uc99d\ud558\uc9c0 \uc54a\uace0 \ub2e8\uc21c\ud788 \uc8fc\uc5b4\uc9c4 \ubc14\uc774\ud2b8 \ub9cc\ud07c\uc744 \uc8fc\uc5b4\uc9c4 \uc8fc\uc18c\uac12\uc73c\ub85c \ubcf5\uc0ac\ud560 \ubfd0\uc774\uae30 \ub54c\ubb38\uc774\ub2e4.( https://stackoverflow.com/a/19439770/11218888 ) \ubd84\uc11d \uacb0\ub860 LFWDataset::CopyData \uba54\uc18c\ub4dc\ub294 \uadf8 \uc774\ub984\uacfc \ub2e4\ub974\uac8c AllocImageBuffer \ub97c \ud1b5\ud558\uc5ec \uc774\ubbf8\uc9c0 \uc555\ucd95\uc744 \ud574\uc81c\ud558\uc5ec imgWrp \uc5d0 \uc800\uc7a5\ud558\uace0 \uc774\ubbf8\uc9c0 \ud615\uc0c1\uc744 new Shape(tjPixelSize[pixelFormat], height, width); \ub85c \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud558\uace0, DoTransform \uc744 \ud1b5\ud574 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0, Image2Tensor \ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud574\uc900\ub2e4. Danger \ud544\uc694\ud55c \ucc98\ub9ac\ub4e4\uc744 \uc0dd\uc131\uc790 \ub610\ub294 StartProcess \uc5d0\uc11c \ud574\uc8fc\uace0 CopyData \uc5d0\uc11c\ub294 \ub370\uc774\ud130 \ubcf5\uc0ac \uae30\ub2a5\ub9cc \ud574\uc57c \ud560 \uac83 \uac19\ub2e4. \uc65c\ub0d0\ud558\uba74 CopyData \uba54\uc18c\ub4dc\uac00 \ud638\ucd9c\ub420 \ub54c\ub9c8\ub2e4 \uc774\ubbf8\uc9c0 \uc555\ucd95 \ud574\uc81c\uc640 \ub370\uc774\ud130 \ucc98\ub9ac, \uadf8\ub9ac\uace0 Tensor \ubcc0\ud658\uc774 \uc774\ub8e8\uc5b4\uc9c0\ub294\ub370 \ub9cc\uc57d \ud55c\ubc88 \uc774\ub8e8\uc5b4\uc84c\ub2e4\uba74 \uc774\ud6c4\uc5d0 \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\uc774 \ub05d\uc5c6\uc774 \ubc18\ubcf5\ub418\uae30 \ub54c\ubb38\uc774\ub2e4. \ub610\ud55c \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c\uc758 \ud45c\uc900\uc73c\ub85c \ub110\ub9ac \uc54c\ub824\uc9c4 \uc720\ub2c9\uc2a4 \ucca0\ud559 \uc5d0 \ub530\ub974\uba74 \ud558\ub098\uc758 \ud568\uc218\ub294 \ud558\ub098\uc758 \uae30\ub2a5\ub9cc \ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud574\uc8fc\ub294 LFWDataset<DTYPE>::Image2Tensor \ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 \uadf8\uc5d0 \uc55e\uc11c \uc774\ubbf8\uc9c0\uc758 \ud615\uc0c1\uc744 Shape \ub85c \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc5b4\ub5a4 \uac83\uc778\uc9c0, \uadf8\ub9ac\uace0 \ub370\uc774\ud130\uc14b\uc744 vision:Compose::DoTransform \uc5d0 \uc804\ub2ec\ud558\uc5ec \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\ub294\uc9c0 \uc774\ud574\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 \uc774 \uba54\uc18c\ub4dc\ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/LFWDataset.hpp: LFWDataset::CopyData \uba54\uc18c\ub4dc"},{"location":"doit/fewshot/step1-1/#srcshapehpp-shape","text":"\ubd84\uc11d \ubaa9\ud45c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \uc774\ud574\ud558\uae30 \uba3c\uc800 API \uc5d0 Shape \uc5d0 \ub300\ud55c \uc124\uba85\uc774 \uc788\uc73c\ubbc0\ub85c \uc774\ubc88\uc5d0\ub294 \ucf54\ub4dc \ubd84\uc11d\uc5d0 \uc55e\uc11c API \uc758 \uc124\uba85\uc744 \uc0b4\ud3b4\ubcf8\ub2e4. API \uc5d0 \ub530\ub974\uba74 Shape \ub294 Tensor \uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc800\uc7a5\ud558\uace0 \uc788\ub294 \uac1d\uccb4\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \uc774 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc800\uc7a5\ud55c\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. API \uc5d0 \ub530\ub974\uba74 public Shape(int pSize0,int pSize1,int pSize2) \ub294 3\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790\uc774\ub2e4. \ub610 pSize0 \ub294 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30, pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30, pSize2 \uc138 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Shape { private : int m_Rank ; ///< Shape \ud074\ub798\uc2a4\ub97c \uad6c\uc131\ud558\ub294 Rank \uba64\ubc84\ubcc0\uc218, \ud150\uc11c\ub97c \uad6c\uc131\ud558\ub294 \ucd95\uc758 \uac1c\uc218 int * m_aDim ; ///< Shape \ud074\ub798\uc2a4\ub97c \uad6c\uc131\ud558\ub294 Dimension \uba64\ubc84\ubcc0\uc218, \uac01 \ucd95\uc758 \ucc28\uc6d0 Device m_Device ; ///< \uc7a5\uce58 \uc0ac\uc6a9 \uad6c\ubd84\uc790, CPU \ub610\ub294 GPU, Device \ucc38\uace0 int m_idOfDevice ; ///< GPU \uc0ac\uc6a9 \uc2dc, \uc0ac\uc6a9\ud558\ub824\ub294 GPU\uc758 \ubc88\ud638. CPU\uc758 \uacbd\uc6b0 -1 #ifdef __CUDNN__ cudnnTensorDescriptor_t m_desc ; ///< cudnn\uc758 Tensor Descriptor, GPU \uc5f0\uc0b0\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 Tensor\uc758 shape \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ud3ec\uc778\ud130 \ubcc0\uc218 #endif // if __CUDNN__ int Alloc ( int pRank , ...); int Alloc ( Shape * pShape ); ... public : Shape ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 ); Shape ( int pSize0 , int pSize1 , int pSize2 , int pSize3 ); Shape ( int pSize0 , int pSize1 , int pSize2 ); Shape ( int pSize0 , int pSize1 ); Shape ( int pSize0 ); Shape ( Shape * pShape ); // Copy Constructor virtual ~ Shape (); int GetRank (); int GetDim ( int pRanknum ); int & operator []( int pRanknum ); // operator[] overload ... }; 16 : \uc9c0\uae08 \ubd84\uc11d \ubaa9\ud45c\uac00 imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \ub97c \uc774\ud574\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uc774 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 Shape :: Shape ( int pSize0 , int pSize1 , int pSize2 ) { m_Rank = 0 ; m_aDim = NULL ; m_idOfDevice = - 1 ; #ifdef __CUDNN__ m_desc = NULL ; #endif // if __CUDNN__ Alloc ( 3 , pSize0 , pSize1 , pSize2 ); } 2-4 : Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc88b\uc744 \uac83 \uac19\ub2e4. 8 : Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 int Shape :: Alloc ( int pRank , ...) { try { if ( pRank > 0 ) m_Rank = pRank ; else throw pRank ; } catch ( int e ) { printf ( \"Receive invalid rank value %d in %s (%s %d) \\n \" , e , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } try { m_aDim = new int [ m_Rank ]; } catch (...) { printf ( \"Failed to allcate memory in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } va_list ap ; va_start ( ap , pRank ); // need to check compare between pRank value and number of another parameter for ( int i = 0 ; i < pRank ; i ++ ) { // need to check whether int or not m_aDim [ i ] = va_arg ( ap , int ); } va_end ( ap ); m_Device = CPU ; return TRUE ; } 2-15 : Danger try-catch \ubb38\uc744 \ud1b5\uc77c\ud558\uba74 \ucf54\ub4dc\ub97c \ucd95\uc57d\uc2dc\ud0ac \uc218 \uc788\ub2e4. \ub610 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ud45c\uc900\ucd9c\ub825\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uace0 \uc788\ub2e4. \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub294 fprintf(stderr,...) \ub610\ub294 std::cerr << ... \uc640 \uac19\uc774 \uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uc57c \ud55c\ub2e4. m_Rank = 3 \uc73c\ub85c int * m_aDim = new int[3] \uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. 17-25 : \uac00\ubcc0\uc778\uc790\ub97c \uac00\uc838\uc640\uc11c int * m_aDim \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uac00\ubcc0\uc778\uc790\ub294 tjPixelSize[pixelFormat], height, width \uc774\ubbc0\ub85c \uc774 \uac12\ub4e4\uc774 m_aDim[i] \uc5d0 \uac01\uac01 \uc800\uc7a5\ub41c\ub2e4. Danger \uac00\ubcc0\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 C \uc5d0\uc11c #include <stdarg.h> \uac00 \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc C++ \uc5d0\uc11c\ub294 \ud638\ud658\uc131\uc744 \uc704\ud558\uc5ec #include <cstdarg> \uc774 \uc120\uc5b8\ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4. \uc774 \uc120\uc5b8\uc740 src/Common.h \uc5d0 \uc120\uc5b8\ub418\uc5b4 \uc788\ub294\ub370 \uc774\uacf3\uc5d0\ub294 \ub300\ub7c9\uc758 C \uc5b8\uc5b4\uc758 \ud5e4\ub354 \uc120\uc5b8\ubb38 #include <....h> \uac00 \uc120\uc5b8\ub418\uc5b4 \uc788\uc5c8\ub2e4. \ubaa8\ub450 \ub2e4 C++ \uc2a4\ud0c0\uc77c \ud5e4\ub354 \uc120\uc5b8\uc73c\ub85c \ubc14\uafc0 \ud544\uc694\uac00 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 Shape \ub294 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c int * m_aDim \uc5d0 \uc800\uc7a5\ud558\uace0, \ucd95\uc758 \uac1c\uc218\ub97c m_Rank \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \ub294 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4 \\[\\text{tjPixelSize[pixelFormat]} \\times \\text{height } \\times \\text{width}\\] \ub97c Shape \uac1d\uccb4\ub85c \uc0dd\uc131\ud558\uc5ec imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Shape.hpp: Shape \uc0dd\uc131\uc790"},{"location":"doit/fewshot/step1-1/#lfwimageprocesshpp-visioncomposedotransform","text":"\ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 class Compose : public Transform { private : std :: vector < Transform *> m_listOfTransform ; int m_size ; ... virtual void DoTransform ( ImageWrapper & imgWrp ) { for ( int i = 0 ; i < m_size ; i ++ ) { m_listOfTransform [ i ] -> DoTransform ( imgWrp ); } } }; 5 : std::vector<Transform *> m_listOfTransform; \uc758 \uc6d0\uc18c\ub4e4\uc758 DoTransform \uba54\uc18c\ub4dc\ub97c imgWrp \uc744 \uc785\ub825\ud558\uc5ec \ud638\ucd9c\ud55c\ub2e4. m_listOfTransform \ub294 {new vision::Resize(224), new vision::CenterCrop(220)} \ub85c \ucd08\uae30\ud654\ub418\uc5c8\uc73c\ubbc0\ub85c vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uc774 \ud638\ucd9c\ub420 \uac83\uc774\ub2e4. \ubd84\uc11d \uacb0\ub860 vision::Compose::DoTransform \uba54\uc18c\ub4dc\ub294 m_listOfTransform \uc758 DoTransform \uba54\uc18c\ub4dc\uc5d0 imgWrp \uc744 \uc785\ub825\ud558\uba70 \ud638\ucd9c\ud574\uc900\ub2e4. m_listOfTransform \ub294 {new vision::Resize(224), new vision::CenterCrop(220)} \ub85c \ucd08\uae30\ud654\ub418\uc5c8\uc73c\ubbc0\ub85c vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uc774 \ud638\ucd9c\ub41c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uac00 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: vision::Compose::DoTransform \uba54\uc18c\ub4dc"},{"location":"doit/fewshot/step1-2/","text":"Analysis: Dataset to Tensor \u00b6 Note tutorials/LFW/ \uacbd\ub85c\ub97c LFW/ \ub85c \ucd95\uc57d\ud558\uc5ec \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uac00 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Resize : public Transform { ... public : ... virtual void DoTransform ( ImageWrapper & imgWrp ) { unsigned char * oldImgBuf = imgWrp . imgBuf ; Shape * oldImgShape = imgWrp . imgShape ; int oldWidth = oldImgShape -> GetDim ( 2 ); int oldHeight = oldImgShape -> GetDim ( 1 ); int channel = oldImgShape -> GetDim ( 0 ); unsigned char * newImgBuf = new unsigned char [ newWidth * newHeight * channel ]; Shape * NewImgShape = new Shape ( channel , newHeight , newWidth ); for ( int newy = 0 ; newy < newHeight ; newy ++ ) { int oldy = newy * oldHeight / newHeight ; for ( int newx = 0 ; newx < newWidth ; newx ++ ) { int oldx = newx * oldWidth / newWidth ; for ( int c = 0 ; c < channel ; c ++ ) { newImgBuf [ newy * newWidth * channel + newx * channel + c ] = oldImgBuf [ oldy * oldWidth * channel + oldx * channel + c ]; } } } delete [] oldImgBuf ; oldImgBuf = NULL ; delete oldImgShape ; oldImgShape = NULL ; imgWrp . imgBuf = newImgBuf ; imgWrp . imgShape = NewImgShape ; } }; 13-14 : newWidth \uc640 newHeight \ub85c \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e4\uace0 \uc0c8\ub85c\uc6b4 Shape \ub97c \ub9cc\ub4e0\ub2e4. \uac1d\uccb4\uac00 new vision::Resize(224) \ub85c \uc0dd\uc131\ub418\uc5c8\uc5c8\uae30\uc5d0 newWidth \uc640 newHeight \uc5d0\ub294 224 \uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4. 17-28 : \uc774\uc804 \uc774\ubbf8\uc9c0 \ubc84\ud37c\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc90c\uacfc \ub3d9\uc2dc\uc5d0 \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e0\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\uc11d\ub3c4 \uc5c6\uace0 API \ub3c4 \uc5c6\uc744 \ubfd0\ub354\ub7ec \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uadf8 \ucc98\ub9ac\ub97c \uc815\ud655\ud788 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc9c0\uae08\uc740 \ubd88\ud544\uc694\ud558\ub2e4. \ub530\ub77c\uc11c \uc790\uc138\ud788 \ubd84\uc11d\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. 35-36 : \uc0c8\ub85c\uc6b4 \ucc28\uc6d0\uacfc \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c imgWrp \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 m_transform->DoTransform(imgWrp); \uc740 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \ub2e4\uc2dc \ub370\uc774\ud130\uc14b\uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub97c \ubcc0\ud658\ud558\ub294 \uc9c1\uc811\uc801\uc778 \ucf54\ub4dc\ub294 \uc544\ub2c8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class CenterCrop : public Transform { ... public : ... virtual void DoTransform ( ImageWrapper & imgWrp ) { unsigned char * imgBuf = imgWrp . imgBuf ; Shape * imgShape = imgWrp . imgShape ; int width = imgShape -> GetDim ( 2 ); // assert(height >= m_heigth); int channel = imgShape -> GetDim ( 0 ); unsigned char * newImgBuf = new unsigned char [ m_width * m_heigth * channel ]; Shape * NewImgShape = new Shape ( channel , m_heigth , m_width ); int start_h = ( height - m_heigth ) / 2 ; int start_w = ( width - m_width ) / 2 ; for ( int h = 0 ; h < m_heigth ; h ++ ) { int oldh = start_h + h ; for ( int w = 0 ; w < m_width ; w ++ ) { int oldw = start_w + w ; for ( int ch = 0 ; ch < channel ; ch ++ ) { newImgBuf [ h * m_width * channel + w * channel + ch ] = imgBuf [ oldh * width * channel + oldw * channel + ch ]; } } } delete [] imgBuf ; imgBuf = NULL ; delete imgShape ; imgShape = NULL ; imgWrp . imgBuf = newImgBuf ; imgWrp . imgShape = NewImgShape ; } }; 13-37 : \uc774\uc804 \uc774\ubbf8\uc9c0 \ubc84\ud37c\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc90c\uacfc \ub3d9\uc2dc\uc5d0 \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e0\ub2e4. \uadf8\ub9ac\uace0 \uc0c8\ub85c\uc6b4 \ucc28\uc6d0\uacfc \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c imgWrp \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\uc11d\ub3c4 \uc5c6\uace0 API \ub3c4 \uc5c6\uc744 \ubfd0\ub354\ub7ec \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uadf8 \ucc98\ub9ac\ub97c \uc815\ud655\ud788 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc9c0\uae08\uc740 \ubd88\ud544\uc694\ud558\ub2e4. \ub530\ub77c\uc11c \uc790\uc138\ud788 \ubd84\uc11d\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. \ubd84\uc11d \uacb0\ub860 m_transform->DoTransform(imgWrp); \uc740 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \ub2e4\uc2dc \ub370\uc774\ud130\uc14b\uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub97c \ubcc0\ud658\ud558\ub294 \uc9c1\uc811\uc801\uc778 \ucf54\ub4dc\ub294 \uc544\ub2c8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c Tensor<DTYPE> * image = this->Image2Tensor(imgWrp, TRUE); \ub85c \ub370\uc774\ud130\uc14b\uc744 \uc5b4\ub5bb\uac8c Tensor \ub85c \ubcc0\ud658\ud558\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename DTYPE > Tensor < DTYPE > * LFWDataset < DTYPE >:: Image2Tensor ( ImageWrapper & imgWrp , int doValueScaling ) { unsigned char * imgBuf = imgWrp . imgBuf ; Shape * imgShape = imgWrp . imgShape ; int width = imgShape -> GetDim ( 2 ); int height = imgShape -> GetDim ( 1 ); int channel = imgShape -> GetDim ( 0 ); Tensor < DTYPE > * result = Tensor < DTYPE >:: Zeros ( 1 , 1 , channel , height , width ); if ( doValueScaling ) { for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; } } } } else { for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ]; } } } } return result ; } 1-11 : imgWrp \ucc38\uc870\uc790\uc640 doValueScaling \uc744 \uc778\uc790\ub85c \ubc1b\ub294\ub2e4. Danger doValuerScaling \uc740 true \uc640 false \ub97c \uad6c\ubd84\ud558\ub294 \uc6a9\ub3c4\ub85c \uc4f0\uc774\uae30 \ub54c\ubb38\uc5d0 4 \ubc14\uc774\ud2b8\ub098 \ub418\ub294 int \ud0c0\uc785\uc774 \uc544\ub2cc 1 \ubc14\uc774\ud2b8 bool \ud0c0\uc785\uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\uc544 \ubcf4\uc778\ub2e4. 5-7 : \ucc28\uc6d0 \uc815\ubcf4\ub97c \uac00\uc838\uc628\ub2e4. 9 : Tensor::Zeros \uc5d0 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc804\ub2ec\ud558\uc5ec Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. Danger \uadf8\ub7f0\ub370 LFW \ub370\uc774\ud130\uc14b\uc740 .jpeg \ud30c\uc77c\ub85c\uc368 \uc2e4\uc81c\ub85c\ub294 3 \ucc28\uc6d0 \ud150\uc800( \\(\\text{RGB} \\times \\text{width} \\times \\text{height}\\) ) \ub85c \ub418\uc5b4 \uc788\ub2e4. \uadf8\ub7f0\ub370\ub3c4 \uc65c \uad73\uc774 \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\uc774 \ucd94\uac00\ub418\ub294 5 \ucc28\uc6d0 \ud150\uc800\ub97c \uc0ac\uc6a9\ud588\ub294\uc9c0 \ubaa8\ub974\uaca0\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc911\uc5d0 \uc0b4\ud3b4\ubcf4\uaca0\uc9c0\ub9cc Tensor::Zeros \ub294 \ub0b4\ubd80\uc801\uc73c\ub85c Shape \uac1d\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub3d9\uc77c\ud55c \ub370\uc774\ud130\uc14b\uc744 \ud45c\ud604\ud558\ub294 Shape \uac1d\uccb4\uac00 \\(2\\) \ubc88\uc774\ub098 \ubd88\ud544\uc694\ud558\uac8c \uc0dd\uc131\ub41c \uac83\uc774\ub2e4. 12-15 : doValuerScaling \uc774 TRUE \uc774\ubbc0\ub85c \uc774 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub41c\ub2e4. imgBuf \uc758 ro * width * channel + co * channel + ch \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec 255.0 \ub85c \ub098\ub208\ub2e4. \ub2e8\uc9c0 \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4. Note \uc774\uac83\uc740 libjpeg-turbo \uac00 \uc555\ucd95 \ud574\uc81c\ud55c \ub370\uc774\ud130\uc14b\uc774\ubbc0\ub85c \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc778 \uc774\ubbf8\uc9c0\uc758 \uc2e4\uc81c \ub370\uc774\ud130\ub97c \ucc38\uc870\ud560 \ub54c \uc65c ro * width * channel + co * channel + ch \ub85c \ucc38\uc870\ud558\ub294\uc9c0\ub294 libjpeg-turbo \ub97c \ucc38\uc870\ud574\uc57c \ud560 \uac83 \uac19\ub2e4. \uc774\ub294 \ub9cc\uc57d \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c(\uac00\ub839 CImg ) \ub370\uc774\ud130\uc14b\uc744 \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uace0 \uadf8\uac83\uc744 \ub2e4\uc2dc Tensor \ub85c \ubcc0\ud658\ud55c\ub2e4\uba74 \ub610 \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\uc758 \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. Danger (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ud558\uc9c0\ub9cc \uc774\ub807\uac8c \ud558\uba74 \ub370\uc774\ud130 \ucc38\uc870 \uacfc\uc815\uc774 \ubc88\uac70\ub86d\uace0 \ubd88\ud544\uc694\ud55c \uacfc\uc815\uc774 \ub418\uc9c0 \uc54a\ub098 \uc2f6\ub2e4. \uc65c\ub0d0\ud558\uba74 Index5D \uba54\uc18c\ub4dc\ub97c Tensor \ud074\ub798\uc2a4 \ub0b4\ubd80\uc5d0\uc11c \ucc98\ub9ac\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub807\uac8c \ud55c\ub2e4\uba74 \uc0ac\uc6a9\uc790\uc758 \ud3b8\uc758\ub97c \ub192\uc77c \uc218 \uc788\ub2e4. Danger imgBuf \ub294 unsigned char \ud615 \ubc30\uc5f4\uc778\ub370 \uc774\uac83\uc758 \uc6d0\uc18c\ub97c \uba85\uc2dc\uc801 \ud615\ubcc0\ud658 \uc5c6\uc774 double \ud615\uc73c\ub85c \ub098\ub204\uace0 \uc788\uc73c\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \uc554\uc2dc\uc801 \ud615\ubcc0\ud658 \uc744 \uc77c\uc73c\ud0a8\ub2e4. \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ud504\ub85c\uc81d\ud2b8\uc758 \uc548\uc815\uc131\uacfc \uc2e0\ub8b0\uc131\uc744 \ud30c\uad34\ud558\ub294 \uc8fc\ub41c \uc6d0\uc778 \uc911 \ud558\ub098\uc774\ubbc0\ub85c \uace0\uce60 \ud544\uc694\uac00 \uc788\uc5b4 \ubcf4\uc778\ub2e4. \uc800\uc7a5 \ub300\uc0c1\uc778 LongArray \uc758 DTYPE ** m_aaHostLongArray \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615 DTYPE \uc740 Tensor \uac00 \uacb0\uc815\ud558\uace0, Tensor \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615\uc740 LFWDataset \uc774 \uacb0\uc815\ud558\uace0, LFWDataset \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615\uc740 LFW/main.cpp \uc758 main \ud568\uc218\uc758 \ud638\ucd9c\ud615\ud0dc\uc5d0\uc11c \uacb0\uc815\ub41c\ub2e4. \uadf8\ub7f0\ub370 \uc2ec\uc9c0\uc5b4 \uadf8 LFWDataset \ud638\ucd9c\ud615\ud0dc\uac00 LFWDataset<float> *train_dataset = new LFWDataset<float>(\"./data\", \"lfw_funneled\", NUMBER_OF_CLASS, transform); \uc774\uc5c8\ub358 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uadf8\ub7ec\ubbc0\ub85c double \uc5d0\uc11c float \uc5d0\uc11c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc774 \uc77c\uc5b4\ub098\uba74\uc11c \ub370\uc774\ud130 \uc190\uc2e4\uae4c\uc9c0 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc880 \ub354 \ud070 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ub370\uc774\ud130 \uc190\uc2e4\uc774 \uc5c6\uc73c\ubbc0\ub85c \uc560\uad50\ub85c \ubd10\uc904\ub9cc \ud558\uc9c0\ub9cc \ub354 \uc791\uc740 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ub370\uc774\ud130 \uc190\uc2e4\uc774 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\uc73c\ubbc0\ub85c \ud504\ub85c\uc81d\ud2b8\uc758 \uc548\uc815\uc131\uc744 \uc2ec\uac01\ud558\uac8c \ud574\uce5c\ub2e4. \uc5b4\uca0c\ub4e0 .jpeg \uc758 \ud53d\uc140\uac12 \ud558\ub098\ud558\ub098\ub97c 255.0 \ub85c \ub098\ub214\uc73c\ub85c\uc368 \ub370\uc774\ud130\ub97c \uc2a4\ucf00\uc77c\ub9c1\ud55c \ud6c4 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uc5d0 \ud558\ub098\ud558\ub098\uc529 \uc800\uc7a5\ud55c\ub2e4. Danger \uc65c \uc774\ub7f0 \ucf54\ub4dc\ub294 GPU Acceleration \uc774 \ub418\uc9c0 \uc54a\uc558\uc744\uae4c? \ubd84\uc11d \uacb0\ub860 Tensor<DTYPE> * image = this->Image2Tensor(imgWrp, TRUE); \uc740 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub97c \ub9cc\ub4e4\uace0 \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc758 \uc6d0\uc18c \ud558\ub098 \ud558\ub098\ub97c \uac00\uc838\uc640\uc11c (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc804\uc5d0 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub85c\uc368 Tensor::Zeros \uba54\uc18c\ub4dc\ub85c Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uc600\uc73c\ubbc0\ub85c \uc774\uac83\ubd80\ud130 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub85c\uc368 Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 enum IsUseTime { UseTime , NoUseTime }; ... template < typename DTYPE > class Tensor { private : Shape * m_aShape ; ///< Tensor\ub97c \uad6c\uc131\ud558\ub294 Shape \ud074\ub798\uc2a4, \ud150\uc11c\uc758 \ucc28\uc6d0\uc744 \uc815\uc758 LongArray < DTYPE > * m_aLongArray ; ///< Tensor\ub97c \uad6c\uc131\ud558\ub294 LongArray \ud074\ub798\uc2a4, \ud150\uc11c\uc758 \uc6d0\uc18c\ub4e4\uc758 \uac12\uc744 \uc800\uc7a5 ... IsUseTime m_IsUseTime ; ///< time \ucd95 \uc0ac\uc6a9 \uc720\ubb34, IsUseTime \ucc38\uace0 int Alloc ( Shape * pShape , IsUseTime pAnswer ); ... public : Tensor ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer = UseTime ); // For 5D-Tensor ... Tensor ( Shape * pShape , IsUseTime pAnswer = UseTime ); ... static Tensor < DTYPE >* Zeros ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer = UseTime ); static Tensor < DTYPE >* Zeros ( Shape * pShape , IsUseTime pAnswer = UseTime ); ... }; 19 : Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub294 \uc774 \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. \uac1d\uccb4\uac00 \uc0dd\uc131\ub418\uae30 \uc804\uc5d0 \ud638\ucd9c\ub418\uc5b4\uc57c \ud558\ubbc0\ub85c static \uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. \ub610\ud55c IsUseTime pAnswer = UseTime \uc758 \ub514\ud3f4\ud2b8 \ud30c\ub77c\ubbf8\ud130\ub97c \uc0ac\uc6a9\ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 10 template < typename DTYPE > Tensor < DTYPE > * Tensor < DTYPE >:: Zeros ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer ) { return Tensor < DTYPE >:: Zeros ( new Shape ( pSize0 , pSize1 , pSize2 , pSize3 , pSize4 ), pAnswer ); } 8-9 : \ud30c\ub77c\ubbf8\ud130 (1, 1, channel, height, width) \ub97c \ubc1b\uc544\uc11c \uc624\ubc84\ub85c\ub529\ub41c Tensor::Zeros \ub97c \ud638\ucd9c\ud55c\ub2e4. 1 2 3 template < typename DTYPE > Tensor < DTYPE > * Tensor < DTYPE >:: Zeros ( Shape * pShape , IsUseTime pAnswer ) { return new Tensor < DTYPE > ( pShape , pAnswer ); } 2 : \ud30c\ub77c\ubbf8\ud130 new Shape(pSize0, pSize1, pSize2, pSize3, pSize4), pAnswer \ub97c \ubc1b\uc544\uc11c \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud55c\ub2e4. Danger \uc774\ub7f4\uac70\uba74 Tensor<DTYPE>::Zeros(int pSize0, int pSize1, int pSize2, int pSize3, int pSize4, IsUseTime pAnswer) \uc5d0\uc11c \ubc14\ub85c \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc774 \ub354 \ube60\ub97c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 template < typename DTYPE > Tensor < DTYPE >:: Tensor ( Shape * pShape , IsUseTime pAnswer ) { m_aShape = NULL ; m_aLongArray = NULL ; m_Device = CPU ; m_idOfDevice = - 1 ; Alloc ( pShape , pAnswer ); } 2-5 : \uba64\ubc84 \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc4f0\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\uc744 \uac83 \uac19\ub2e4. 6 : \ud30c\ub77c\ubbf8\ud130\ub97c \uadf8\ub300\ub85c Tensor::Alloc \uba54\uc18c\ub4dc\ub85c \uc804\ub2ec\ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename DTYPE > int Tensor < DTYPE >:: Alloc ( Shape * pShape , IsUseTime pAnswer ) { if ( pShape == NULL ) { printf ( \"Receive NULL pointer of Shape class in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } else { m_aShape = pShape ; m_IsUseTime = pAnswer ; int rank = pShape -> GetRank (); int pTime = 1 ; int pCapacityPerTime = 1 ; if ( m_IsUseTime == UseTime ) { pTime = ( * pShape )[ 0 ]; for ( int i = 1 ; i < rank ; i ++ ) { pCapacityPerTime *= ( * pShape )[ i ]; } } else if ( m_IsUseTime == NoUseTime ) { for ( int i = 0 ; i < rank ; i ++ ) { pCapacityPerTime *= ( * pShape )[ i ]; } } else return FALSE ; m_aLongArray = new LongArray < DTYPE > ( pTime , pCapacityPerTime ); } m_Device = CPU ; return TRUE ; } 2-5 : Danger \uc5d0\ub7ec\ub97c \ucc98\ub9ac\ud574\uc8fc\ub294\ub370 C++ \ud504\ub85c\uc81d\ud2b8\uc774\ubbc0\ub85c try-catch \ubb38\uc744 \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uacfc \uac00\ub3c5\uc131\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. \ub610\ud55c printf \ub294 \ud45c\uc900\ucd9c\ub825\uc778\ub370 \uc5d0\ub7ec \ucc98\ub9ac \uba54\uc2dc\uc9c0\uc774\ubbc0\ub85c \ud45c\uc900\uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\uba74 \uc5d0\ub7ec \ub85c\uadf8\ub97c \ubd84\ub958\ud560 \uc218 \uc788\ub2e4. \uac00\ub839 fprintf(stderr, ...) \uc774\ub098 std::cerr << ... \ub85c \ud45c\uc900\uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\ub294 \uac83\uc774\ub2e4. 6-7 : Danger \uba64\ubc84\ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\ub294\ub370 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. 14-24 : Danger \uc5d0\ub7ec\ub97c \ucc98\ub9ac\ud574\uc8fc\ub294\ub370 C++ \ud504\ub85c\uc81d\ud2b8\uc774\ubbc0\ub85c try-catch \ubb38\uc744 \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uacfc \uac00\ub3c5\uc131\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. 15-19 : pAnswer = UseTime \uc774\ubbc0\ub85c \uc774 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub41c\ub2e4. 15 : Shape::operator[] \uc5d0 0 \uc744 \uc804\ub2ec\ud558\uc5ec pTime \uc744 \ucd08\uae30\ud654\ud55c\ub2e4. Shape::operator[] \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 int & Shape :: operator []( int pRanknum ) { try { if ( pRanknum >= 0 ) return m_aDim [ pRanknum ]; else throw ; } catch (...) { printf ( \"Receive invalid pRanknum value in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); exit ( 0 ); // return FALSE; } } 3 : \ub2e8\uc21c\ud788 int * m_aDim \ub97c pRanknum \uc778\ub371\uc2a4\ub85c \ucc38\uc870\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. 6-8 : Danger \uc5d0\ub7ec \ucc98\ub9ac\ub97c try-catch \ub85c \ud588\uc9c0\ub9cc \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ud45c\uc900\ucd9c\ub825\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc5d0\ub7ec\uba54\uc2dc\uc9c0 \uc218\uc9d1\uc774 \uc5b4\ub824\uc6cc \ud504\ub85c\uc81d\ud2b8 \uc2e0\ub8b0\uc131\uacfc \ud3b8\uc758\uc131\uc774 \ub5a8\uc5b4\uc9c4\ub2e4. \ub610\ud55c \uc5d0\ub7ec\ucf54\ub4dc\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c exit(0) \uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \uac15\uc81c\ub85c \uc885\ub8cc\ud574\ubc84\ub9ac\ubbc0\ub85c \uc0ac\uc6a9\uc790\uac00 \uc5d0\ub7ec\ub97c \ud578\ub4e4\ub9c1\ud560 \uc218 \uc788\ub294 \uae30\ud68c\uac00 \ubc15\ud0c8\ub2f9\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \ub370\uc774\ud130\uc14b\uc758 0 \ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30\ub97c pTime \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774\ub2e4. 18 : Shape \uc5d0 operator[] \ub85c i \uc778\ub371\uc2a4\ub97c \uac00\uc838\uc640\uc11c pCapacityPerTime \uc5d0 \ub204\uc801\uc73c\ub85c \uacf1\ud574\uc900\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \ub370\uc774\ud130\uc14b\uc758 1 \ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0 pCapacityPerTime \uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\ub2e4. 26 : pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc73c\ub85c LongArray \ub97c \ub9cc\ub4e4\uace0 m_aLongArray \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 29 : Danger \uba54\uc18c\ub4dc\uac00 \uc131\uacf5\uc801\uc73c\ub85c \ub05d\ub0ac\uc744 \ub54c TRUE \ub97c \ubc18\ud658\ud558\ub294\ub370 4 \ubc14\uc774\ud2b8 int \ud615\uc774 \uc544\ub2c8\ub77c 1 \ubc14\uc774\ud2b8 bool \ud615 true \ub97c \uc0ac\uc6a9\ud558\uba74 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc744 \ub192\uc77c \uc218 \uc788\uc5b4 \ubcf4\uc778\ub2e4. \ubd84\uc11d \uacb0\ub860 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub294 \ud30c\ub77c\ubbf8\ud130\ub97c \ubc1b\uc544\uc11c \uc790\ub3d9\uc73c\ub85c Shape \ub97c \uc0dd\uc131\ud574\uc900 \ub2e4\uc74c \ud544\uc694\ud55c \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\uc2dc\ud0a4\uace0 LongArray \ub97c \ub9cc\ub4e4\uc5b4\uc11c LongArray<DTYPE> * m_aLongArray \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7f0\ub370 Tensor::Zeros \uac00 \ud150\uc800\uac12\ub4e4\uc744 \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc\ub77c\uace0 \ud588\ub294\ub370 \uc5b4\ub514\uc5d0\uc11c \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ub418\uc5c8\ub294\uc9c0 \ubcf4\uc774\uc9c0 \uc544\uc9c1 \uc54a\ub294\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \ubd84\uc11d\ud558\uae30 \uc704\ud558\uc5ec Tensor::operator[] \ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \uadf8\ub7f0\ub370 Index5D \uac00 Tensor::operator[] \uc5d0 \uc778\uc790\ub85c \uc804\ub2ec\ub418\uc5c8\uc73c\ubbc0\ub85c Index5D \ubd80\ud130 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 \u00b6 \ubd84\uc11d \ubaa9\ud45c Index5D(result->GetShape(), 0, 0, ch, ro, co) \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud558\uae30 \uc8fc\uc11d\uc5d0 \ub530\ub974\uba74 Index5D \ub294 5\ucc28\uc6d0\uc73c\ub85c \uc815\uc758\ub41c Tensor \uc758 LongArray \uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc\uc774\ub2e4. \uc989 Index5D \ub294 5\ucc28\uc6d0\uc73c\ub85c \uc815\uc758\ub41c Tensor \uc5d0 \ub300\ud574, pShape \uacfc \uac01 \ucd95\uc758 \uc778\ub371\uc2a4\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\uc5d0 \ub300\uc751\ub418\ub294 LongArray \uc758 \uc6d0\uc18c\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4 \ubc88\ud638\ub97c \uacc4\uc0b0\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. 1 2 3 inline unsigned int Index5D ( Shape * pShape , int ti , int ba , int ch , int ro , int co ) { return ((( ti * ( * pShape )[ 1 ] + ba ) * ( * pShape )[ 2 ] + ch ) * ( * pShape )[ 3 ] + ro ) * ( * pShape )[ 4 ] + co ; } 2 : \uc774 \ucf54\ub4dc\ub97c \uc774\ud574\ud558\uae30 \uc704\ud558\uc5ec \uac00\uc7a5 \ub2e8\uc21c\ud55c \ud615\ud0dc\uc758 Index2D \ud568\uc218\ub97c \uc0b4\ud3b4\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 inline unsigned int Index2D ( Shape * pShape , int ro , int co ) { return ro * ( * pShape )[ 1 ] + co ; } \uc774\uac83\uc740 2 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc774\ub2e4. \ub2e4\uc74c\uc740 \\((n+1) \\times 8\\) \ud615\uc0c1\uc758 \ud589\ub82c\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc774\ub2e4. \uc704 \uadf8\ub9bc\uc744 \ubcf4\uba74 2 \ucc28\uc6d0 \ubc30\uc5f4\uc774 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uac01\uac01\uc758 \uc778\ub371\uc2a4\ub294 2 \ucc28\uc6d0 \ubc30\uc5f4\uc77c \ub54c \\((0,0)\\) \ubd80\ud130 \\((n, 7)\\) \uae4c\uc9c0 \uc600\ub2e4. \ud558\uc9c0\ub9cc 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\uc73c\ubbc0\ub85c \uc778\ub371\uc2a4\ub97c \\(i \\in \\{0, 1, \\dots, n\\}, j \\in \\{0, 1, \\dots, 7\\}\\) \uc778 \\(i, j\\) \uc5d0 \ub300\ud558\uc5ec \\(i \\times 8 + j\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4. \uc774\uac83\uc744 \uc77c\ubc18\ud654\ud558\uba74 \\(n \\in \\mathbb{N}, m \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c\uc744 \\(1 \\times nm\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\(i \\in \\{0, 1, \\dots, n-1\\}, j \\in \\{0, 1, \\dots, m-1\\}\\) \uc778 \\(i, j\\) \uc5d0 \ub300\ud558\uc5ec \\(\\boxed{ i \\times m + j}\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index2D \ud568\uc218\uac00 \ub418\ub294 \uac83\uc774\ub2e4. Note \uc5f0\uc5ed\uc801\uc778 \uc99d\uba85\uc740 \uc0dd\ub7b5\ud55c\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c 3 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc800\uc7a5\ud55c \ub2e4\uc74c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud55c Index3D \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 inline unsigned int Index3D ( Shape * pShape , int ch , int ro , int co ) { return ( ch * ( * pShape )[ 1 ] + ro ) * ( * pShape )[ 2 ] + co ; } \uc774\uac83\uc740 3 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc774\ub2e4. \ub2e4\uc74c\uc740 \\((n+1) \\times 3 \\times 4\\) \ud615\uc0c1\uc758 \ud150\uc800\ub97c 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ud55c \uac83\uc774\ub2e4. \uc774 \ud150\uc800\uc758 \uc778\ub371\uc2a4\ub294 \\((0, 0, 0)\\) \ubd80\ud130 \\((n,2,3)\\) \uae4c\uc9c0\uc600\ub2e4. \ud558\uc9c0\ub9cc 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\uc73c\ubbc0\ub85c \uc778\ub371\uc2a4\ub97c \\(i \\in \\{0, 1, \\dots, n\\}, j \\in \\{0, 1, 2\\}, k \\in \\{0,1,2,3\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(i \\times 3 \\times 4 + j \\times 4 + k = (i \\times 3 + j) \\times 4 + k\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4. \uc774\uac83\uc744 \uc77c\ubc18\ud654\ud558\uba74 \\(t_1 \\in \\mathbb{N}, t_2 \\in \\mathbb{N}, t_3 \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(t_1 \\times t_2 \\times t_3\\) \ud150\uc800\ub97c \\(1 \\times t_1t_2t_3\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\(i_1 \\in \\{0, 1, \\dots, t_1-1\\}, i_2 \\in \\{0, 1, \\dots, t_2-1\\}, i_3 \\in \\{0, 1, \\dots, t_3-1\\}\\) \uc778 \\(i_1, i_2, i_3\\) \uc5d0 \ub300\ud558\uc5ec \\[\\boxed{i_1t_2t_3 + i_2t_3 + i_3 = (i_1t_2 + i_2)t_3 + i_3} \\] \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index3D \ud568\uc218\uac00 \ub41c\ub2e4. \uadf8\ub807\ub2e4\uba74 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\(t_1 \\in \\mathbb{N}, t_2 \\in \\mathbb{N}, t_3 \\in \\mathbb{N}, t_4 \\in \\mathbb{N}, t_5 \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(t_1 \\times t_2 \\times t_3 \\times t_4 \\times t_5\\) \ud150\uc800\ub97c \\(1 \\times t_1t_2t_3t_4t_5\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\[i_1 \\in \\{0, 1, \\dots, t_1-1\\}\\] \\[i_2 \\in \\{0, 1, \\dots, t_2-1\\}\\] \\[i_3 \\in \\{0, 1, \\dots, t_3-1\\}\\] \\[i_4 \\in \\{0,1,\\dots,t_4-1\\}\\] \\[i_5 \\in \\{0, 1, \\dots, t_5-1\\}\\] \uc778 \\(i_1, i_2, i_3, i_4, i_5\\) \uc5d0 \ub300\ud558\uc5ec \\[\\boxed{i_1t_5t_4t_3t_2+i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5 = (((i_1t_2+i_2)t_3+i_3)t_4+i_4)t_5 + i_5} \\] \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index5D \ud568\uc218\uac00 \ub41c\ub2e4. Bug \uadf8\ub7f0\ub370 \uc774\uc5d0 \ub530\ub974\uba74 LFWDataset::Image2Tensor \uba54\uc18c\ub4dc\uc758 \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub294 \uc880 \uc774\uc0c1\ud558\ub2e4. 1 2 3 4 5 6 7 Tensor < DTYPE > * result = Tensor < DTYPE >:: Zeros ( 1 , 1 , channel , height , width ); ... for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; ... \uc65c\ub0d0\ud558\uba74 Tensor \uc758 \ud615\uc0c1\uc744 \uc815\ud574\uc904 \ub54c \\(\\text{channel} \\times \\text{height} \\times \\text{width}\\) \ub85c \uc815\ud574\uc92c\ub294\ub370\ub3c4 Tensor \uc5d0 3 \ucc28\uc6d0 \ud150\uc800\uac00 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \uc800\uc7a5\ub41c imgBuf \uc758 \uc6d0\uc18c\ub97c \uc800\uc7a5\ud560 \ub54c\uc758 \uc778\ub371\uc2f1 \ubc29\uc2dd \\[\\boxed{i_1t_2t_3 + i_2t_3 + i_3 = (i_1t_2 + i_2)t_3 + i_3} \\] \uc5d0 \ub530\ub77c ch * height * width + ro * width + co \ub85c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c ro * width * channel + co * channel + ch \ub85c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec \ubc14\uc774\ud2b8\ub4e4\uc744 \uc800\uc7a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9cc\uc57d ro * width * channel + co * channel + ch \ub300\ub85c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4\uba74 1 \ucc28\uc6d0 \ubc30\uc5f4 imgBuf \uac00 \uc6d0\ub798\ub294 3 \ucc28\uc6d0 \ud150\uc800 \\(\\text{height} \\times \\text{width} \\times \\text{channel}\\) \uc600\ub2e4\ub294 \uc758\ubbf8\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc815\ub9d0 \uadf8\ub807\ub2e4\uba74 \ud615\uc0c1\uc744 Tensor<DTYPE>::Zeros(1, 1, height, width, channel); \ub85c \uc815\ud574\uc8fc\uc5c8\uc5b4\uc57c \ud55c\ub2e4. \ub0b4\uac00 \uc798\ubabb \ud310\ub2e8\ud55c \uac83\uc77c \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. \ubd84\uc11d \uacb0\ub860 Index5D \ub294 Shape \uc640 \ub370\uc774\ud130\uc14b \uac01 \ucd95\uc758 \uc778\ub371\uc2a4\uac00 \uc804\ub2ec\ub418\uba74 \uadf8\uac83\uc5d0 \ub300\uc751\ub418\ub294 LongArray \uc758 \uc6d0\uc18c\uc758 \uc778\ub371\uc2a4\ub97c \ubc18\ud658\ud574\uc900\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 template < typename DTYPE > class Tensor { ... DTYPE & operator []( unsigned int index ); ... }; 3 : [] \uc5f0\uc0b0\uc790\ub294 Tensor \ud074\ub798\uc2a4\uc5d0\uc11c \uc774\ub807\uac8c \uc624\ubc84\ub85c\ub529 \ub418\uc5b4 \uc788\ub2e4. \uba54\uc18c\ub4dc\uc758 \uad6c\ud604\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 template < typename DTYPE > DTYPE & Tensor < DTYPE >:: operator []( unsigned int index ) { #ifdef __CUDNN__ if ( m_Device == GPU ) { this -> SetDeviceCPU (); } #endif // __CUDNN__ return ( * m_aLongArray )[ index ]; } 2-3 : Danger \uc5b4\ucc28\ud53c if (m_Device == GPU) \ub85c GPU \uc778\uc9c0 \uac80\uc99d\ud574\uc8fc\ub294\ub370 \uc65c #ifdef __CUDNN__ \uac00 \ud544\uc694\ud55c\uc9c0 \ubaa8\ub974\uaca0\ub2e4. 7 : LongArray<DTYPE> * m_aLongArray \uc758 operator[] \uc5d0 index \ub97c \uc804\ub2ec\ud574\uc8fc\uace0 \ubc18\ud658\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud574\ubcf4\ub824 \ud588\ub294\ub370 Tensor::operator[] \uba54\uc18c\ub4dc\uac00 \uc778\ub371\uc2a4\ub97c \uadf8\uc800 LongArray::operator[] \ub85c \uc804\ub2ec\ud574\uc900\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 LongArray::operator[] \uc744 \ubd84\uc11d\ud568\uc73c\ub85c\uc368 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LongArray::operator[] \uc744 \ubd84\uc11d\ud558\ub824\uba74 \uba3c\uc800 LongArray \uac1d\uccb4\uc758 \uc0dd\uc131\uc744 \uc774\ud574\ud574\uc57c \ud55c\ub2e4. LongArray \uac1d\uccb4\ub294 Tensor::Zeros \uba54\uc18c\ub4dc \ubd84\uc11d \uacfc\uc815\uc5d0\uc11c pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \ubcc0\uc218\ub85c LongArray<DTYPE> * m_aLongArray = new LongArray<DTYPE>(pTime, pCapacityPerTime); \uc640 \uac19\uc774 \uc0dd\uc131\ub418\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c LongArray \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815\uc778 LongArray<DTYPE> * m_aLongArray = new LongArray<DTYPE>(pTime, pCapacityPerTime); \uc744 \uc774\ud574\ud558\uae30 \ud30c\ub77c\ubbf8\ud130\uc758 \uc758\ubbf8\ub294 pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 template < typename DTYPE > class LongArray { private : DTYPE ** m_aaHostLongArray ; ///< \uba54\ubaa8\ub9ac\uc5d0 \uc62c\ub77c\uac00 \uc788\ub294 \ub370\uc774\ud130\uc758 \uc8fc\uc18c \uac12. int m_CapacityOfLongArray ; ///< LongArray\uc758 \ucd1d \uc6a9\ub7c9. int m_TimeSize ; ///< Tensor\uc758 TimeSize int m_CapacityPerTime ; ///< Time\uc73c\ub85c \ub098\ub204\uc5b4\uc9c4 data\uc758 Capacity Device m_Device ; ///< \uc7a5\uce58 \uc0ac\uc6a9 \uad6c\ubd84\uc790 (CPU or GPU) int m_idOfDevice ; ///< GPU\uc0ac\uc6a9 \uc2dc, \uc0ac\uc6a9\ud558\ub824\ub294 GPU\uc758 \ubc88\ud638. #ifdef __CUDNN__ DTYPE ** m_aaDevLongArray ; ///< GPU\uba54\ubaa8\ub9ac\uc5d0 \uc62c\ub77c\uac00\uc788\ub294 \ub370\uc774\ud130\uc758 \uc8fc\uc18c \uac12. m_aaHostLongArray\uc640 \ube44\uc2b7\ud55c \uc5ed\ud560\uc744 \ud55c\ub2e4. #endif // __CUDNN int Alloc ( unsigned int pTimeSize , unsigned int pCapacityPerTime ); int Alloc ( LongArray * pLongArray ); void Delete (); ... public : LongArray ( unsigned int pCapacity ); LongArray ( unsigned int pTimeSize , unsigned int pCapacityPerTime ); LongArray ( LongArray * pLongArray ); // Copy Constructor ... DTYPE & operator []( unsigned int index ); ... }; 18 : \uc774 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. 19 : Danger \ub610\ud55c LongArray(unsigned int pCapacity); \ub85c \uc120\uc5b8\ub41c \uc0dd\uc131\uc790\ub294 \uc0ac\uc6a9\ub418\uace0 \uc788\uc9c0 \uc54a\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 template < typename DTYPE > LongArray < DTYPE >:: LongArray ( unsigned int pTimeSize , unsigned int pCapacity ) { m_TimeSize = 0 ; m_CapacityPerTime = 0 ; m_aaHostLongArray = NULL ; m_Device = CPU ; m_idOfDevice = - 1 ; #ifdef __CUDNN__ m_aaDevLongArray = NULL ; #endif // __CUDNN Alloc ( pTimeSize , pCapacity ); } 10 : \ud30c\ub77c\ubbf8\ud130\ub97c \uadf8\ub300\ub85c Alloc \uba54\uc18c\ub4dc\ub85c \ubcf4\ub0b4\uc900\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 template < typename DTYPE > int LongArray < DTYPE >:: Alloc ( unsigned int pTimeSize , unsigned int pCapacityPerTime ) { m_TimeSize = pTimeSize ; m_CapacityPerTime = pCapacityPerTime ; m_aaHostLongArray = new DTYPE * [ m_TimeSize ]; for ( int i = 0 ; i < m_TimeSize ; i ++ ) { m_aaHostLongArray [ i ] = new DTYPE [ m_CapacityPerTime ]; for ( int j = 0 ; j < m_CapacityPerTime ; j ++ ) { m_aaHostLongArray [ i ][ j ] = 0.f ; } } m_CapacityOfLongArray = m_TimeSize * m_CapacityPerTime ; m_Device = CPU ; return TRUE ; } 2-3 : \ud30c\ub77c\ubbf8\ud130( pTime : 0 \ubc88\uc9f8 \ucd95, pCapacityPerTime : 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \ub97c \uba64\ubc84\ubcc0\uc218 m_TimeSize , m_CapacityPerTime \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger \uadf8\ub7ec\ub098 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc131\ub2a5\uc774 \ub354 \uc88b\uc544\uc9c4\ub2e4. 6-7 : m_TimeSize \ub9cc\ud07c for \ubb38\uc744 \ub3cc\uba74\uc11c DTYPE ** m_aaHostLongArray \ub354\ube14\ud3ec\uc778\ud130\ub97c m_CapacityPerTime \ud06c\uae30\uc758 DTYPE \ubc30\uc5f4\uc758 \ubc30\uc5f4\ub85c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uc65c LongArray \ub97c \uc774\ub807\uac8c 2 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uc5c8\uc744\uae4c? 9-10 : m_aaHostLongArray \ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uadf8\ub7ec\ub098 \uc774\ub807\uac8c for \ubb38\uc73c\ub85c \uba54\ubaa8\ub9ac\ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uac83\uc740 \uc2dc\uac04\uc774 \uc624\ub798\uac78\ub9ac\ubbc0\ub85c memset \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ube60\ub974\ub2e4. \ud558\uc9c0\ub9cc C++ \uc5d0\uc11c\ub294 memset \ubcf4\ub2e4 std:fill \uc774 \uad8c\uc7a5\ub41c\ub2e4. \ud55c\ud3b8 LongArray \uc0dd\uc131\uc790\uac00 \ubc18\ub4dc\uc2dc Alloc() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc774 \uba54\uc18c\ub4dc\uac00 \ud56d\uc0c1 \uba54\ubaa8\ub9ac\ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\uc2dc\ud0a4\ubbc0\ub85c Tensor::Zeros \uba54\uc18c\ub4dc\uc758 \uc758\ubbf8\uac00 \ubb34\uc5c7\uc778\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. \uc65c\ub0d0\ud558\uba74 \ub2e4\ub978 Tensor \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud574\ub3c4 \ubc18\ub4dc\uc2dc 0 \uc73c\ub85c \ucd08\uae30\ud654 \ub418\uae30 \ub54c\ubb38\uc774\ub2e4. 13 : m_CapacityOfLongArray \uc5d0 LongArray \uc758 \ucd1d \ud06c\uae30\ub97c \uc800\uc7a5\ud574\uc900\ub2e4. pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774 m_TimeSize \uc640 m_CapacityPerTime \uc774 \ub418\uc5c8\uc73c\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc758 \ud615\uc0c1\uc744 \ubaa8\ub450 \uacf1\ud55c \uac12\uc744 \uc800\uc7a5\ud574\uc8fc\ub294 \uac83\uc774\ub2e4. 15 : Danger 1 \ubc14\uc774\ud2b8 bool \uc774 \uc544\ub2c8\ub77c 4 \ubc14\uc774\ud2b8 int \ud615\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \uba54\ubaa8\ub9ac\uac00 \ub0ad\ube44\ub41c\ub2e4. \ub610\ud55c \uba54\uc18c\ub4dc\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud588\uc744 \uacbd\uc6b0 return FALSE \ud574\uc8fc\ub294 \ucf54\ub4dc\uac00 \uc5c6\uc73c\ubbc0\ub85c \ube44\ub300\uce6d\uc801\uc778 \uba54\uc18c\ub4dc\ub85c \ubcfc \uc218 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 m_TimeSize \\(\\times\\) m_CapacityPerTime \ud615\uc0c1\uc758 \ubc30\uc5f4\uc744 \ub9cc\ub4e4\uc5b4\uc11c DTYPE ** m_aaHostLongArray \uc5d0 \uc800\uc7a5\ud574\uc8fc\uace0 0 \uc73c\ub85c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774 m_TimeSize \uc640 m_CapacityPerTime \uc774 \ub418\uc5c8\uc73c\ubbc0\ub85c \"\uccab\ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30 X \ub450\ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uae4c\uc9c0\uc758 \uacf1\" \uc758 \ubc30\uc5f4\uc774 \uc0dd\uc131\ub418\uace0 0 \uc73c\ub85c \ucd08\uae30\ud654\ub41c \uac83\uc774\ub2e4. \uc774 m_aaHostLongArray \uac00 LongArray \uc758 \uc2e4\uccb4\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c LongArray::operator[] \uc744 \ubd84\uc11d\ud568\uc73c\ub85c\uc368 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud558\uae30 1 2 3 4 5 template < typename DTYPE > class LongArray { ... DTYPE & operator []( unsigned int index ); ... }; 3 : [] \uc5f0\uc0b0\uc790\ub294 \uc774\ub807\uac8c \uc120\uc5b8\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 template < typename DTYPE > DTYPE & LongArray < DTYPE >:: operator []( unsigned int index ) { #ifdef __CUDNN__ if ( m_Device == GPU ) { this -> SetDeviceCPU (); } #endif // __CUDNN__ return m_aaHostLongArray [ index / m_CapacityPerTime ][ index % m_CapacityPerTime ]; } 1 : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc\uc758 for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = \\ imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; \uc5d0\uc11c Index5D(result->GetShape(), 0, 0, ch, ro, co) \uac00 index \ub85c \uc804\ub2ec\ub418\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. 7 : \uacb0\uad6d LFWDataset::Image2Tensor \ub780 Index5D(result->GetShape(), 0, 0, ch, ro, co) \uc73c\ub85c \uc804\ub2ec\ub41c index \ub85c\uc368 2 \ucc28\uc6d0 \ubc30\uc5f4 m_aaHostLongArray[index / m_CapacityPerTime][index % m_CapacityPerTime] \uc5d0 \ub370\uc774\ud130\uc14b imgBuf \uc758 \uc6d0\uc18c\ub97c \ud558\ub098\ud558\ub098 \ubcf5\uc0ac\ud558\uace0 \uc788\ub294 \uac83\uc774\ub2e4. Success \uc774\ub85c\uc368 \uc6b0\ub9ac\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc774\ud574\ud588\ub2e4. \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc774\ub780 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\uba74 \ub05d\uc774\ub2e4. Danger \uadfc\ub370 [index / m_CapacityPerTime][index % m_CapacityPerTime] \ub77c\ub294 \uc778\ub371\uc2f1 \ubc29\uc2dd\uc774 \ubb34\uc2a8 \uc758\ubbf8\ub97c \uac16\ub294\uac70\uc9c0? 5 \ucc28\uc6d0 \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\ub294 \uc778\ub371\uc2f1 \ubc29\uc2dd\uc744 \uac00\uc838\uc640\uc11c \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub97c \ud558\uae38\ub798 2 \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud574\uc904 \uc218 \uc788\ub294\uac70\uc9c0? Danger \uadf8\ub7f0\ub370 \uc2e4\uc81c\ub85c LongArray \uc758 DTYPE ** m_aaHostLongArray \ub294 m_TimeSize \\(\\times\\) m_CapacityPerTime \ud615\uc0c1\uc758 \ubc30\uc5f4\ub85c \uc800\uc7a5\ub418\uc5b4\uc788\ub2e4. m_TimeSize \ub294 0 \ubc88\uc9f8 \ucd95\uc744 \ub73b\ud558\uace0, m_CapacityPerTime \uc740 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1\uc744 \ub73b\ud588\ub2e4. Index5D \uc5d0\uc11c \uc804\ub2ec\ub41c 5 \ucc28\uc6d0 \ud150\uc800\ub294 \uc2e4\uc81c\ub85c Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub85c \uc815\uc758 \ub418\uc5c8\uc73c\ubbc0\ub85c \\(t_1 = t_2 = 1\\) \uc774\uace0, \uccab\ubc88\uc9f8\uc640 \ub450\ubc88\uc9f8 \uc778\ub371\uc2a4\uac00 \ud56d\uc0c1 \\(0\\) \uc774\ubbc0\ub85c \\(i_1=i_2=0\\) \uc774\ub2e4. \ub530\ub77c\uc11c 5 \ucc28\uc6d0 \ud150\uc800\uac00 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \uc800\uc7a5\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4\ub294 \\[i_1t_5t_4t_3t_2+i_2t_5t_4t_3+i_3t_5t_4+i_2t_5+i_5 = (((i_1t_2+i_2)t_3+i_3)t_4+i_2)t_5 + i_5\\] \\[\\iff 0 + 0 + i_3t_5t_4+i_2t_5+i_5 \\] \uac00 \ub418\uc5b4 3 \ucc28\uc6d0 \ubc30\uc5f4\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4\ub85c \ubc14\ub010\ub2e4. \uc65c \uc774\ub807\uac8c \ubc88\uac70\ub86d\uac8c \ud558\ub294\uac70\uc9c0? \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\ub4e4\uc774 \uc131\ub2a5\uc744 \uc800\ud558\uc2dc\ud0ac \uc218\ub3c4 \uc788\ub2e4. \uc5b4\uca0c\ub4e0 \uadf8 3 \ucc28\uc6d0 \ubc30\uc5f4, \uc989 3 \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud558\uae30 \uc704\ud55c index \uac00 \ub2e4\uc2dc 2 \ucc28\uc6d0 \ubc30\uc5f4 DTYPE ** m_aaHostLongArray \uc5d0 \uc800\uc7a5\ub418\uae30 \uc704\ud55c \uc778\ub371\uc2a4 \uc5f0\uc0b0 [index / m_CapacityPerTime][index % m_CapacityPerTime] \uc744 \uac70\uccd0\uac04\ub2e4. \ub300\uccb4 \uc65c 3 \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc744 5 \ucc28\uc6d0 Tensor \uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c 1 \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4 \uc5f0\uc0b0\uc744 \ud55c \ub2e4\uc74c 2 \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud558\ub294 \uac70\uc9c0???? \uc65c \uc774\ub807\uac8c \ud558\ub294\uac70\uc9c0? \ubd84\uc11d \uacb0\ub860 \uc774\ub85c\uc368 \uc6b0\ub9ac\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc774\ud574\ud588\ub2e4. \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc774\ub780 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\uba74 \ub05d\uc774\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \ubd84\uc11d \uc9c0\ub3c4\uc5d0 \ub530\ub974\uba74 \uc544\uc9c1 LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc \uc744 \ubd84\uc11d\ud558\uc9c0 \uc54a\uc558\uc9c0\ub9cc \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uacfc\uc815\uc744 \ucda9\ubd84\ud788 \uc774\ud574\ud588\uc73c\ubbc0\ub85c \uc774\ucbe4\uc5d0\uc11c \ub2e4\ub978 \ucf54\ub4dc \ubd84\uc11d\uc744 \uadf8\ub9cc\ub450\uace0, \ucf54\ub529\uc744 \uc2dc\uc791\ud574\ubcf8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ud6c4\uc5d0 \ubb3c\ub860 DataLoader \ub97c \uc815\uc758\ud574\uc57c \ud560 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \ubaa8\ub4e0 \uac74 \uc778\uacf5\uc2e0\uacbd\ub9dd \uad6c\ud604\uc744 \uc704\ud55c \uac83\uc774\uc5c8\uc73c\ubbc0\ub85c \ucf54\ub529\uc744 \uc2dc\uc791\ud560 \uae30\ubcf8\uc801\uc778 \uc900\ube44\ub77c\ub3c4 \ub05d\ub098\uba74 \uc77c\ub2e8 \ud560 \uc218 \uc788\ub294 \uc218\uc900\uae4c\uc9c0\uc758 \ucf54\ub529\uc740 \ud574\ub450\ub294 \uac83\uc774 \uc633\uc740 \ubc29\ud5a5\uc778 \uac83 \uac19\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"Step 1 (2). Data &rarr; Tensor"},{"location":"doit/fewshot/step1-2/#analysis-dataset-to-tensor","text":"Note tutorials/LFW/ \uacbd\ub85c\ub97c LFW/ \ub85c \ucd95\uc57d\ud558\uc5ec \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uac00 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"Analysis: Dataset to Tensor"},{"location":"doit/fewshot/step1-2/#lfwimageprocesshpp-visionresizedotransform","text":"\ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Resize : public Transform { ... public : ... virtual void DoTransform ( ImageWrapper & imgWrp ) { unsigned char * oldImgBuf = imgWrp . imgBuf ; Shape * oldImgShape = imgWrp . imgShape ; int oldWidth = oldImgShape -> GetDim ( 2 ); int oldHeight = oldImgShape -> GetDim ( 1 ); int channel = oldImgShape -> GetDim ( 0 ); unsigned char * newImgBuf = new unsigned char [ newWidth * newHeight * channel ]; Shape * NewImgShape = new Shape ( channel , newHeight , newWidth ); for ( int newy = 0 ; newy < newHeight ; newy ++ ) { int oldy = newy * oldHeight / newHeight ; for ( int newx = 0 ; newx < newWidth ; newx ++ ) { int oldx = newx * oldWidth / newWidth ; for ( int c = 0 ; c < channel ; c ++ ) { newImgBuf [ newy * newWidth * channel + newx * channel + c ] = oldImgBuf [ oldy * oldWidth * channel + oldx * channel + c ]; } } } delete [] oldImgBuf ; oldImgBuf = NULL ; delete oldImgShape ; oldImgShape = NULL ; imgWrp . imgBuf = newImgBuf ; imgWrp . imgShape = NewImgShape ; } }; 13-14 : newWidth \uc640 newHeight \ub85c \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e4\uace0 \uc0c8\ub85c\uc6b4 Shape \ub97c \ub9cc\ub4e0\ub2e4. \uac1d\uccb4\uac00 new vision::Resize(224) \ub85c \uc0dd\uc131\ub418\uc5c8\uc5c8\uae30\uc5d0 newWidth \uc640 newHeight \uc5d0\ub294 224 \uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4. 17-28 : \uc774\uc804 \uc774\ubbf8\uc9c0 \ubc84\ud37c\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc90c\uacfc \ub3d9\uc2dc\uc5d0 \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e0\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\uc11d\ub3c4 \uc5c6\uace0 API \ub3c4 \uc5c6\uc744 \ubfd0\ub354\ub7ec \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uadf8 \ucc98\ub9ac\ub97c \uc815\ud655\ud788 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc9c0\uae08\uc740 \ubd88\ud544\uc694\ud558\ub2e4. \ub530\ub77c\uc11c \uc790\uc138\ud788 \ubd84\uc11d\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. 35-36 : \uc0c8\ub85c\uc6b4 \ucc28\uc6d0\uacfc \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c imgWrp \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 m_transform->DoTransform(imgWrp); \uc740 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \ub2e4\uc2dc \ub370\uc774\ud130\uc14b\uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub97c \ubcc0\ud658\ud558\ub294 \uc9c1\uc811\uc801\uc778 \ucf54\ub4dc\ub294 \uc544\ub2c8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: vision::Resize::DoTransform \uba54\uc18c\ub4dc"},{"location":"doit/fewshot/step1-2/#lfwimageprocesshpp-visioncentercropdotransform","text":"\ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class CenterCrop : public Transform { ... public : ... virtual void DoTransform ( ImageWrapper & imgWrp ) { unsigned char * imgBuf = imgWrp . imgBuf ; Shape * imgShape = imgWrp . imgShape ; int width = imgShape -> GetDim ( 2 ); // assert(height >= m_heigth); int channel = imgShape -> GetDim ( 0 ); unsigned char * newImgBuf = new unsigned char [ m_width * m_heigth * channel ]; Shape * NewImgShape = new Shape ( channel , m_heigth , m_width ); int start_h = ( height - m_heigth ) / 2 ; int start_w = ( width - m_width ) / 2 ; for ( int h = 0 ; h < m_heigth ; h ++ ) { int oldh = start_h + h ; for ( int w = 0 ; w < m_width ; w ++ ) { int oldw = start_w + w ; for ( int ch = 0 ; ch < channel ; ch ++ ) { newImgBuf [ h * m_width * channel + w * channel + ch ] = imgBuf [ oldh * width * channel + oldw * channel + ch ]; } } } delete [] imgBuf ; imgBuf = NULL ; delete imgShape ; imgShape = NULL ; imgWrp . imgBuf = newImgBuf ; imgWrp . imgShape = NewImgShape ; } }; 13-37 : \uc774\uc804 \uc774\ubbf8\uc9c0 \ubc84\ud37c\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc90c\uacfc \ub3d9\uc2dc\uc5d0 \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e0\ub2e4. \uadf8\ub9ac\uace0 \uc0c8\ub85c\uc6b4 \ucc28\uc6d0\uacfc \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c imgWrp \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\uc11d\ub3c4 \uc5c6\uace0 API \ub3c4 \uc5c6\uc744 \ubfd0\ub354\ub7ec \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uadf8 \ucc98\ub9ac\ub97c \uc815\ud655\ud788 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc9c0\uae08\uc740 \ubd88\ud544\uc694\ud558\ub2e4. \ub530\ub77c\uc11c \uc790\uc138\ud788 \ubd84\uc11d\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. \ubd84\uc11d \uacb0\ub860 m_transform->DoTransform(imgWrp); \uc740 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \ub2e4\uc2dc \ub370\uc774\ud130\uc14b\uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub97c \ubcc0\ud658\ud558\ub294 \uc9c1\uc811\uc801\uc778 \ucf54\ub4dc\ub294 \uc544\ub2c8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc"},{"location":"doit/fewshot/step1-2/#lfwlfwdatasethpp-lfwdatasetimage2tensor","text":"\ubd84\uc11d \ubaa9\ud45c Tensor<DTYPE> * image = this->Image2Tensor(imgWrp, TRUE); \ub85c \ub370\uc774\ud130\uc14b\uc744 \uc5b4\ub5bb\uac8c Tensor \ub85c \ubcc0\ud658\ud558\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename DTYPE > Tensor < DTYPE > * LFWDataset < DTYPE >:: Image2Tensor ( ImageWrapper & imgWrp , int doValueScaling ) { unsigned char * imgBuf = imgWrp . imgBuf ; Shape * imgShape = imgWrp . imgShape ; int width = imgShape -> GetDim ( 2 ); int height = imgShape -> GetDim ( 1 ); int channel = imgShape -> GetDim ( 0 ); Tensor < DTYPE > * result = Tensor < DTYPE >:: Zeros ( 1 , 1 , channel , height , width ); if ( doValueScaling ) { for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; } } } } else { for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ]; } } } } return result ; } 1-11 : imgWrp \ucc38\uc870\uc790\uc640 doValueScaling \uc744 \uc778\uc790\ub85c \ubc1b\ub294\ub2e4. Danger doValuerScaling \uc740 true \uc640 false \ub97c \uad6c\ubd84\ud558\ub294 \uc6a9\ub3c4\ub85c \uc4f0\uc774\uae30 \ub54c\ubb38\uc5d0 4 \ubc14\uc774\ud2b8\ub098 \ub418\ub294 int \ud0c0\uc785\uc774 \uc544\ub2cc 1 \ubc14\uc774\ud2b8 bool \ud0c0\uc785\uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\uc544 \ubcf4\uc778\ub2e4. 5-7 : \ucc28\uc6d0 \uc815\ubcf4\ub97c \uac00\uc838\uc628\ub2e4. 9 : Tensor::Zeros \uc5d0 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc804\ub2ec\ud558\uc5ec Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. Danger \uadf8\ub7f0\ub370 LFW \ub370\uc774\ud130\uc14b\uc740 .jpeg \ud30c\uc77c\ub85c\uc368 \uc2e4\uc81c\ub85c\ub294 3 \ucc28\uc6d0 \ud150\uc800( \\(\\text{RGB} \\times \\text{width} \\times \\text{height}\\) ) \ub85c \ub418\uc5b4 \uc788\ub2e4. \uadf8\ub7f0\ub370\ub3c4 \uc65c \uad73\uc774 \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\uc774 \ucd94\uac00\ub418\ub294 5 \ucc28\uc6d0 \ud150\uc800\ub97c \uc0ac\uc6a9\ud588\ub294\uc9c0 \ubaa8\ub974\uaca0\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc911\uc5d0 \uc0b4\ud3b4\ubcf4\uaca0\uc9c0\ub9cc Tensor::Zeros \ub294 \ub0b4\ubd80\uc801\uc73c\ub85c Shape \uac1d\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub3d9\uc77c\ud55c \ub370\uc774\ud130\uc14b\uc744 \ud45c\ud604\ud558\ub294 Shape \uac1d\uccb4\uac00 \\(2\\) \ubc88\uc774\ub098 \ubd88\ud544\uc694\ud558\uac8c \uc0dd\uc131\ub41c \uac83\uc774\ub2e4. 12-15 : doValuerScaling \uc774 TRUE \uc774\ubbc0\ub85c \uc774 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub41c\ub2e4. imgBuf \uc758 ro * width * channel + co * channel + ch \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec 255.0 \ub85c \ub098\ub208\ub2e4. \ub2e8\uc9c0 \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4. Note \uc774\uac83\uc740 libjpeg-turbo \uac00 \uc555\ucd95 \ud574\uc81c\ud55c \ub370\uc774\ud130\uc14b\uc774\ubbc0\ub85c \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc778 \uc774\ubbf8\uc9c0\uc758 \uc2e4\uc81c \ub370\uc774\ud130\ub97c \ucc38\uc870\ud560 \ub54c \uc65c ro * width * channel + co * channel + ch \ub85c \ucc38\uc870\ud558\ub294\uc9c0\ub294 libjpeg-turbo \ub97c \ucc38\uc870\ud574\uc57c \ud560 \uac83 \uac19\ub2e4. \uc774\ub294 \ub9cc\uc57d \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c(\uac00\ub839 CImg ) \ub370\uc774\ud130\uc14b\uc744 \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uace0 \uadf8\uac83\uc744 \ub2e4\uc2dc Tensor \ub85c \ubcc0\ud658\ud55c\ub2e4\uba74 \ub610 \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\uc758 \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. Danger (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ud558\uc9c0\ub9cc \uc774\ub807\uac8c \ud558\uba74 \ub370\uc774\ud130 \ucc38\uc870 \uacfc\uc815\uc774 \ubc88\uac70\ub86d\uace0 \ubd88\ud544\uc694\ud55c \uacfc\uc815\uc774 \ub418\uc9c0 \uc54a\ub098 \uc2f6\ub2e4. \uc65c\ub0d0\ud558\uba74 Index5D \uba54\uc18c\ub4dc\ub97c Tensor \ud074\ub798\uc2a4 \ub0b4\ubd80\uc5d0\uc11c \ucc98\ub9ac\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub807\uac8c \ud55c\ub2e4\uba74 \uc0ac\uc6a9\uc790\uc758 \ud3b8\uc758\ub97c \ub192\uc77c \uc218 \uc788\ub2e4. Danger imgBuf \ub294 unsigned char \ud615 \ubc30\uc5f4\uc778\ub370 \uc774\uac83\uc758 \uc6d0\uc18c\ub97c \uba85\uc2dc\uc801 \ud615\ubcc0\ud658 \uc5c6\uc774 double \ud615\uc73c\ub85c \ub098\ub204\uace0 \uc788\uc73c\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \uc554\uc2dc\uc801 \ud615\ubcc0\ud658 \uc744 \uc77c\uc73c\ud0a8\ub2e4. \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ud504\ub85c\uc81d\ud2b8\uc758 \uc548\uc815\uc131\uacfc \uc2e0\ub8b0\uc131\uc744 \ud30c\uad34\ud558\ub294 \uc8fc\ub41c \uc6d0\uc778 \uc911 \ud558\ub098\uc774\ubbc0\ub85c \uace0\uce60 \ud544\uc694\uac00 \uc788\uc5b4 \ubcf4\uc778\ub2e4. \uc800\uc7a5 \ub300\uc0c1\uc778 LongArray \uc758 DTYPE ** m_aaHostLongArray \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615 DTYPE \uc740 Tensor \uac00 \uacb0\uc815\ud558\uace0, Tensor \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615\uc740 LFWDataset \uc774 \uacb0\uc815\ud558\uace0, LFWDataset \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615\uc740 LFW/main.cpp \uc758 main \ud568\uc218\uc758 \ud638\ucd9c\ud615\ud0dc\uc5d0\uc11c \uacb0\uc815\ub41c\ub2e4. \uadf8\ub7f0\ub370 \uc2ec\uc9c0\uc5b4 \uadf8 LFWDataset \ud638\ucd9c\ud615\ud0dc\uac00 LFWDataset<float> *train_dataset = new LFWDataset<float>(\"./data\", \"lfw_funneled\", NUMBER_OF_CLASS, transform); \uc774\uc5c8\ub358 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uadf8\ub7ec\ubbc0\ub85c double \uc5d0\uc11c float \uc5d0\uc11c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc774 \uc77c\uc5b4\ub098\uba74\uc11c \ub370\uc774\ud130 \uc190\uc2e4\uae4c\uc9c0 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc880 \ub354 \ud070 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ub370\uc774\ud130 \uc190\uc2e4\uc774 \uc5c6\uc73c\ubbc0\ub85c \uc560\uad50\ub85c \ubd10\uc904\ub9cc \ud558\uc9c0\ub9cc \ub354 \uc791\uc740 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ub370\uc774\ud130 \uc190\uc2e4\uc774 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\uc73c\ubbc0\ub85c \ud504\ub85c\uc81d\ud2b8\uc758 \uc548\uc815\uc131\uc744 \uc2ec\uac01\ud558\uac8c \ud574\uce5c\ub2e4. \uc5b4\uca0c\ub4e0 .jpeg \uc758 \ud53d\uc140\uac12 \ud558\ub098\ud558\ub098\ub97c 255.0 \ub85c \ub098\ub214\uc73c\ub85c\uc368 \ub370\uc774\ud130\ub97c \uc2a4\ucf00\uc77c\ub9c1\ud55c \ud6c4 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uc5d0 \ud558\ub098\ud558\ub098\uc529 \uc800\uc7a5\ud55c\ub2e4. Danger \uc65c \uc774\ub7f0 \ucf54\ub4dc\ub294 GPU Acceleration \uc774 \ub418\uc9c0 \uc54a\uc558\uc744\uae4c? \ubd84\uc11d \uacb0\ub860 Tensor<DTYPE> * image = this->Image2Tensor(imgWrp, TRUE); \uc740 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub97c \ub9cc\ub4e4\uace0 \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc758 \uc6d0\uc18c \ud558\ub098 \ud558\ub098\ub97c \uac00\uc838\uc640\uc11c (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc804\uc5d0 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub85c\uc368 Tensor::Zeros \uba54\uc18c\ub4dc\ub85c Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uc600\uc73c\ubbc0\ub85c \uc774\uac83\ubd80\ud130 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/LFWDataset.hpp: LFWDataset::Image2Tensor \uba54\uc18c\ub4dc"},{"location":"doit/fewshot/step1-2/#srctensorhpp-tensorzeros","text":"\ubd84\uc11d \ubaa9\ud45c Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub85c\uc368 Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 enum IsUseTime { UseTime , NoUseTime }; ... template < typename DTYPE > class Tensor { private : Shape * m_aShape ; ///< Tensor\ub97c \uad6c\uc131\ud558\ub294 Shape \ud074\ub798\uc2a4, \ud150\uc11c\uc758 \ucc28\uc6d0\uc744 \uc815\uc758 LongArray < DTYPE > * m_aLongArray ; ///< Tensor\ub97c \uad6c\uc131\ud558\ub294 LongArray \ud074\ub798\uc2a4, \ud150\uc11c\uc758 \uc6d0\uc18c\ub4e4\uc758 \uac12\uc744 \uc800\uc7a5 ... IsUseTime m_IsUseTime ; ///< time \ucd95 \uc0ac\uc6a9 \uc720\ubb34, IsUseTime \ucc38\uace0 int Alloc ( Shape * pShape , IsUseTime pAnswer ); ... public : Tensor ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer = UseTime ); // For 5D-Tensor ... Tensor ( Shape * pShape , IsUseTime pAnswer = UseTime ); ... static Tensor < DTYPE >* Zeros ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer = UseTime ); static Tensor < DTYPE >* Zeros ( Shape * pShape , IsUseTime pAnswer = UseTime ); ... }; 19 : Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub294 \uc774 \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. \uac1d\uccb4\uac00 \uc0dd\uc131\ub418\uae30 \uc804\uc5d0 \ud638\ucd9c\ub418\uc5b4\uc57c \ud558\ubbc0\ub85c static \uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. \ub610\ud55c IsUseTime pAnswer = UseTime \uc758 \ub514\ud3f4\ud2b8 \ud30c\ub77c\ubbf8\ud130\ub97c \uc0ac\uc6a9\ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 10 template < typename DTYPE > Tensor < DTYPE > * Tensor < DTYPE >:: Zeros ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer ) { return Tensor < DTYPE >:: Zeros ( new Shape ( pSize0 , pSize1 , pSize2 , pSize3 , pSize4 ), pAnswer ); } 8-9 : \ud30c\ub77c\ubbf8\ud130 (1, 1, channel, height, width) \ub97c \ubc1b\uc544\uc11c \uc624\ubc84\ub85c\ub529\ub41c Tensor::Zeros \ub97c \ud638\ucd9c\ud55c\ub2e4. 1 2 3 template < typename DTYPE > Tensor < DTYPE > * Tensor < DTYPE >:: Zeros ( Shape * pShape , IsUseTime pAnswer ) { return new Tensor < DTYPE > ( pShape , pAnswer ); } 2 : \ud30c\ub77c\ubbf8\ud130 new Shape(pSize0, pSize1, pSize2, pSize3, pSize4), pAnswer \ub97c \ubc1b\uc544\uc11c \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud55c\ub2e4. Danger \uc774\ub7f4\uac70\uba74 Tensor<DTYPE>::Zeros(int pSize0, int pSize1, int pSize2, int pSize3, int pSize4, IsUseTime pAnswer) \uc5d0\uc11c \ubc14\ub85c \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc774 \ub354 \ube60\ub97c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 template < typename DTYPE > Tensor < DTYPE >:: Tensor ( Shape * pShape , IsUseTime pAnswer ) { m_aShape = NULL ; m_aLongArray = NULL ; m_Device = CPU ; m_idOfDevice = - 1 ; Alloc ( pShape , pAnswer ); } 2-5 : \uba64\ubc84 \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc4f0\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\uc744 \uac83 \uac19\ub2e4. 6 : \ud30c\ub77c\ubbf8\ud130\ub97c \uadf8\ub300\ub85c Tensor::Alloc \uba54\uc18c\ub4dc\ub85c \uc804\ub2ec\ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename DTYPE > int Tensor < DTYPE >:: Alloc ( Shape * pShape , IsUseTime pAnswer ) { if ( pShape == NULL ) { printf ( \"Receive NULL pointer of Shape class in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } else { m_aShape = pShape ; m_IsUseTime = pAnswer ; int rank = pShape -> GetRank (); int pTime = 1 ; int pCapacityPerTime = 1 ; if ( m_IsUseTime == UseTime ) { pTime = ( * pShape )[ 0 ]; for ( int i = 1 ; i < rank ; i ++ ) { pCapacityPerTime *= ( * pShape )[ i ]; } } else if ( m_IsUseTime == NoUseTime ) { for ( int i = 0 ; i < rank ; i ++ ) { pCapacityPerTime *= ( * pShape )[ i ]; } } else return FALSE ; m_aLongArray = new LongArray < DTYPE > ( pTime , pCapacityPerTime ); } m_Device = CPU ; return TRUE ; } 2-5 : Danger \uc5d0\ub7ec\ub97c \ucc98\ub9ac\ud574\uc8fc\ub294\ub370 C++ \ud504\ub85c\uc81d\ud2b8\uc774\ubbc0\ub85c try-catch \ubb38\uc744 \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uacfc \uac00\ub3c5\uc131\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. \ub610\ud55c printf \ub294 \ud45c\uc900\ucd9c\ub825\uc778\ub370 \uc5d0\ub7ec \ucc98\ub9ac \uba54\uc2dc\uc9c0\uc774\ubbc0\ub85c \ud45c\uc900\uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\uba74 \uc5d0\ub7ec \ub85c\uadf8\ub97c \ubd84\ub958\ud560 \uc218 \uc788\ub2e4. \uac00\ub839 fprintf(stderr, ...) \uc774\ub098 std::cerr << ... \ub85c \ud45c\uc900\uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\ub294 \uac83\uc774\ub2e4. 6-7 : Danger \uba64\ubc84\ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\ub294\ub370 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. 14-24 : Danger \uc5d0\ub7ec\ub97c \ucc98\ub9ac\ud574\uc8fc\ub294\ub370 C++ \ud504\ub85c\uc81d\ud2b8\uc774\ubbc0\ub85c try-catch \ubb38\uc744 \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uacfc \uac00\ub3c5\uc131\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. 15-19 : pAnswer = UseTime \uc774\ubbc0\ub85c \uc774 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub41c\ub2e4. 15 : Shape::operator[] \uc5d0 0 \uc744 \uc804\ub2ec\ud558\uc5ec pTime \uc744 \ucd08\uae30\ud654\ud55c\ub2e4. Shape::operator[] \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 int & Shape :: operator []( int pRanknum ) { try { if ( pRanknum >= 0 ) return m_aDim [ pRanknum ]; else throw ; } catch (...) { printf ( \"Receive invalid pRanknum value in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); exit ( 0 ); // return FALSE; } } 3 : \ub2e8\uc21c\ud788 int * m_aDim \ub97c pRanknum \uc778\ub371\uc2a4\ub85c \ucc38\uc870\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. 6-8 : Danger \uc5d0\ub7ec \ucc98\ub9ac\ub97c try-catch \ub85c \ud588\uc9c0\ub9cc \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ud45c\uc900\ucd9c\ub825\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc5d0\ub7ec\uba54\uc2dc\uc9c0 \uc218\uc9d1\uc774 \uc5b4\ub824\uc6cc \ud504\ub85c\uc81d\ud2b8 \uc2e0\ub8b0\uc131\uacfc \ud3b8\uc758\uc131\uc774 \ub5a8\uc5b4\uc9c4\ub2e4. \ub610\ud55c \uc5d0\ub7ec\ucf54\ub4dc\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c exit(0) \uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \uac15\uc81c\ub85c \uc885\ub8cc\ud574\ubc84\ub9ac\ubbc0\ub85c \uc0ac\uc6a9\uc790\uac00 \uc5d0\ub7ec\ub97c \ud578\ub4e4\ub9c1\ud560 \uc218 \uc788\ub294 \uae30\ud68c\uac00 \ubc15\ud0c8\ub2f9\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \ub370\uc774\ud130\uc14b\uc758 0 \ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30\ub97c pTime \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774\ub2e4. 18 : Shape \uc5d0 operator[] \ub85c i \uc778\ub371\uc2a4\ub97c \uac00\uc838\uc640\uc11c pCapacityPerTime \uc5d0 \ub204\uc801\uc73c\ub85c \uacf1\ud574\uc900\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \ub370\uc774\ud130\uc14b\uc758 1 \ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0 pCapacityPerTime \uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\ub2e4. 26 : pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc73c\ub85c LongArray \ub97c \ub9cc\ub4e4\uace0 m_aLongArray \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 29 : Danger \uba54\uc18c\ub4dc\uac00 \uc131\uacf5\uc801\uc73c\ub85c \ub05d\ub0ac\uc744 \ub54c TRUE \ub97c \ubc18\ud658\ud558\ub294\ub370 4 \ubc14\uc774\ud2b8 int \ud615\uc774 \uc544\ub2c8\ub77c 1 \ubc14\uc774\ud2b8 bool \ud615 true \ub97c \uc0ac\uc6a9\ud558\uba74 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc744 \ub192\uc77c \uc218 \uc788\uc5b4 \ubcf4\uc778\ub2e4. \ubd84\uc11d \uacb0\ub860 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub294 \ud30c\ub77c\ubbf8\ud130\ub97c \ubc1b\uc544\uc11c \uc790\ub3d9\uc73c\ub85c Shape \ub97c \uc0dd\uc131\ud574\uc900 \ub2e4\uc74c \ud544\uc694\ud55c \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\uc2dc\ud0a4\uace0 LongArray \ub97c \ub9cc\ub4e4\uc5b4\uc11c LongArray<DTYPE> * m_aLongArray \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7f0\ub370 Tensor::Zeros \uac00 \ud150\uc800\uac12\ub4e4\uc744 \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc\ub77c\uace0 \ud588\ub294\ub370 \uc5b4\ub514\uc5d0\uc11c \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ub418\uc5c8\ub294\uc9c0 \ubcf4\uc774\uc9c0 \uc544\uc9c1 \uc54a\ub294\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \ubd84\uc11d\ud558\uae30 \uc704\ud558\uc5ec Tensor::operator[] \ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \uadf8\ub7f0\ub370 Index5D \uac00 Tensor::operator[] \uc5d0 \uc778\uc790\ub85c \uc804\ub2ec\ub418\uc5c8\uc73c\ubbc0\ub85c Index5D \ubd80\ud130 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Tensor.hpp: Tensor::Zeros \uba54\uc18c\ub4dc"},{"location":"doit/fewshot/step1-2/#srctensorhpp-index5d","text":"\ubd84\uc11d \ubaa9\ud45c Index5D(result->GetShape(), 0, 0, ch, ro, co) \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud558\uae30 \uc8fc\uc11d\uc5d0 \ub530\ub974\uba74 Index5D \ub294 5\ucc28\uc6d0\uc73c\ub85c \uc815\uc758\ub41c Tensor \uc758 LongArray \uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc\uc774\ub2e4. \uc989 Index5D \ub294 5\ucc28\uc6d0\uc73c\ub85c \uc815\uc758\ub41c Tensor \uc5d0 \ub300\ud574, pShape \uacfc \uac01 \ucd95\uc758 \uc778\ub371\uc2a4\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\uc5d0 \ub300\uc751\ub418\ub294 LongArray \uc758 \uc6d0\uc18c\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4 \ubc88\ud638\ub97c \uacc4\uc0b0\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. 1 2 3 inline unsigned int Index5D ( Shape * pShape , int ti , int ba , int ch , int ro , int co ) { return ((( ti * ( * pShape )[ 1 ] + ba ) * ( * pShape )[ 2 ] + ch ) * ( * pShape )[ 3 ] + ro ) * ( * pShape )[ 4 ] + co ; } 2 : \uc774 \ucf54\ub4dc\ub97c \uc774\ud574\ud558\uae30 \uc704\ud558\uc5ec \uac00\uc7a5 \ub2e8\uc21c\ud55c \ud615\ud0dc\uc758 Index2D \ud568\uc218\ub97c \uc0b4\ud3b4\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 inline unsigned int Index2D ( Shape * pShape , int ro , int co ) { return ro * ( * pShape )[ 1 ] + co ; } \uc774\uac83\uc740 2 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc774\ub2e4. \ub2e4\uc74c\uc740 \\((n+1) \\times 8\\) \ud615\uc0c1\uc758 \ud589\ub82c\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc774\ub2e4. \uc704 \uadf8\ub9bc\uc744 \ubcf4\uba74 2 \ucc28\uc6d0 \ubc30\uc5f4\uc774 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uac01\uac01\uc758 \uc778\ub371\uc2a4\ub294 2 \ucc28\uc6d0 \ubc30\uc5f4\uc77c \ub54c \\((0,0)\\) \ubd80\ud130 \\((n, 7)\\) \uae4c\uc9c0 \uc600\ub2e4. \ud558\uc9c0\ub9cc 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\uc73c\ubbc0\ub85c \uc778\ub371\uc2a4\ub97c \\(i \\in \\{0, 1, \\dots, n\\}, j \\in \\{0, 1, \\dots, 7\\}\\) \uc778 \\(i, j\\) \uc5d0 \ub300\ud558\uc5ec \\(i \\times 8 + j\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4. \uc774\uac83\uc744 \uc77c\ubc18\ud654\ud558\uba74 \\(n \\in \\mathbb{N}, m \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c\uc744 \\(1 \\times nm\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\(i \\in \\{0, 1, \\dots, n-1\\}, j \\in \\{0, 1, \\dots, m-1\\}\\) \uc778 \\(i, j\\) \uc5d0 \ub300\ud558\uc5ec \\(\\boxed{ i \\times m + j}\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index2D \ud568\uc218\uac00 \ub418\ub294 \uac83\uc774\ub2e4. Note \uc5f0\uc5ed\uc801\uc778 \uc99d\uba85\uc740 \uc0dd\ub7b5\ud55c\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c 3 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc800\uc7a5\ud55c \ub2e4\uc74c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud55c Index3D \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 inline unsigned int Index3D ( Shape * pShape , int ch , int ro , int co ) { return ( ch * ( * pShape )[ 1 ] + ro ) * ( * pShape )[ 2 ] + co ; } \uc774\uac83\uc740 3 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc774\ub2e4. \ub2e4\uc74c\uc740 \\((n+1) \\times 3 \\times 4\\) \ud615\uc0c1\uc758 \ud150\uc800\ub97c 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ud55c \uac83\uc774\ub2e4. \uc774 \ud150\uc800\uc758 \uc778\ub371\uc2a4\ub294 \\((0, 0, 0)\\) \ubd80\ud130 \\((n,2,3)\\) \uae4c\uc9c0\uc600\ub2e4. \ud558\uc9c0\ub9cc 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\uc73c\ubbc0\ub85c \uc778\ub371\uc2a4\ub97c \\(i \\in \\{0, 1, \\dots, n\\}, j \\in \\{0, 1, 2\\}, k \\in \\{0,1,2,3\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(i \\times 3 \\times 4 + j \\times 4 + k = (i \\times 3 + j) \\times 4 + k\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4. \uc774\uac83\uc744 \uc77c\ubc18\ud654\ud558\uba74 \\(t_1 \\in \\mathbb{N}, t_2 \\in \\mathbb{N}, t_3 \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(t_1 \\times t_2 \\times t_3\\) \ud150\uc800\ub97c \\(1 \\times t_1t_2t_3\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\(i_1 \\in \\{0, 1, \\dots, t_1-1\\}, i_2 \\in \\{0, 1, \\dots, t_2-1\\}, i_3 \\in \\{0, 1, \\dots, t_3-1\\}\\) \uc778 \\(i_1, i_2, i_3\\) \uc5d0 \ub300\ud558\uc5ec \\[\\boxed{i_1t_2t_3 + i_2t_3 + i_3 = (i_1t_2 + i_2)t_3 + i_3} \\] \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index3D \ud568\uc218\uac00 \ub41c\ub2e4. \uadf8\ub807\ub2e4\uba74 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\(t_1 \\in \\mathbb{N}, t_2 \\in \\mathbb{N}, t_3 \\in \\mathbb{N}, t_4 \\in \\mathbb{N}, t_5 \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(t_1 \\times t_2 \\times t_3 \\times t_4 \\times t_5\\) \ud150\uc800\ub97c \\(1 \\times t_1t_2t_3t_4t_5\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\[i_1 \\in \\{0, 1, \\dots, t_1-1\\}\\] \\[i_2 \\in \\{0, 1, \\dots, t_2-1\\}\\] \\[i_3 \\in \\{0, 1, \\dots, t_3-1\\}\\] \\[i_4 \\in \\{0,1,\\dots,t_4-1\\}\\] \\[i_5 \\in \\{0, 1, \\dots, t_5-1\\}\\] \uc778 \\(i_1, i_2, i_3, i_4, i_5\\) \uc5d0 \ub300\ud558\uc5ec \\[\\boxed{i_1t_5t_4t_3t_2+i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5 = (((i_1t_2+i_2)t_3+i_3)t_4+i_4)t_5 + i_5} \\] \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index5D \ud568\uc218\uac00 \ub41c\ub2e4. Bug \uadf8\ub7f0\ub370 \uc774\uc5d0 \ub530\ub974\uba74 LFWDataset::Image2Tensor \uba54\uc18c\ub4dc\uc758 \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub294 \uc880 \uc774\uc0c1\ud558\ub2e4. 1 2 3 4 5 6 7 Tensor < DTYPE > * result = Tensor < DTYPE >:: Zeros ( 1 , 1 , channel , height , width ); ... for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; ... \uc65c\ub0d0\ud558\uba74 Tensor \uc758 \ud615\uc0c1\uc744 \uc815\ud574\uc904 \ub54c \\(\\text{channel} \\times \\text{height} \\times \\text{width}\\) \ub85c \uc815\ud574\uc92c\ub294\ub370\ub3c4 Tensor \uc5d0 3 \ucc28\uc6d0 \ud150\uc800\uac00 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \uc800\uc7a5\ub41c imgBuf \uc758 \uc6d0\uc18c\ub97c \uc800\uc7a5\ud560 \ub54c\uc758 \uc778\ub371\uc2f1 \ubc29\uc2dd \\[\\boxed{i_1t_2t_3 + i_2t_3 + i_3 = (i_1t_2 + i_2)t_3 + i_3} \\] \uc5d0 \ub530\ub77c ch * height * width + ro * width + co \ub85c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c ro * width * channel + co * channel + ch \ub85c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec \ubc14\uc774\ud2b8\ub4e4\uc744 \uc800\uc7a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9cc\uc57d ro * width * channel + co * channel + ch \ub300\ub85c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4\uba74 1 \ucc28\uc6d0 \ubc30\uc5f4 imgBuf \uac00 \uc6d0\ub798\ub294 3 \ucc28\uc6d0 \ud150\uc800 \\(\\text{height} \\times \\text{width} \\times \\text{channel}\\) \uc600\ub2e4\ub294 \uc758\ubbf8\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc815\ub9d0 \uadf8\ub807\ub2e4\uba74 \ud615\uc0c1\uc744 Tensor<DTYPE>::Zeros(1, 1, height, width, channel); \ub85c \uc815\ud574\uc8fc\uc5c8\uc5b4\uc57c \ud55c\ub2e4. \ub0b4\uac00 \uc798\ubabb \ud310\ub2e8\ud55c \uac83\uc77c \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. \ubd84\uc11d \uacb0\ub860 Index5D \ub294 Shape \uc640 \ub370\uc774\ud130\uc14b \uac01 \ucd95\uc758 \uc778\ub371\uc2a4\uac00 \uc804\ub2ec\ub418\uba74 \uadf8\uac83\uc5d0 \ub300\uc751\ub418\ub294 LongArray \uc758 \uc6d0\uc18c\uc758 \uc778\ub371\uc2a4\ub97c \ubc18\ud658\ud574\uc900\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Tensor.hpp: Index5D \ud568\uc218"},{"location":"doit/fewshot/step1-2/#srctensorhpp-tensoroperator","text":"\ubd84\uc11d \ubaa9\ud45c (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 template < typename DTYPE > class Tensor { ... DTYPE & operator []( unsigned int index ); ... }; 3 : [] \uc5f0\uc0b0\uc790\ub294 Tensor \ud074\ub798\uc2a4\uc5d0\uc11c \uc774\ub807\uac8c \uc624\ubc84\ub85c\ub529 \ub418\uc5b4 \uc788\ub2e4. \uba54\uc18c\ub4dc\uc758 \uad6c\ud604\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 template < typename DTYPE > DTYPE & Tensor < DTYPE >:: operator []( unsigned int index ) { #ifdef __CUDNN__ if ( m_Device == GPU ) { this -> SetDeviceCPU (); } #endif // __CUDNN__ return ( * m_aLongArray )[ index ]; } 2-3 : Danger \uc5b4\ucc28\ud53c if (m_Device == GPU) \ub85c GPU \uc778\uc9c0 \uac80\uc99d\ud574\uc8fc\ub294\ub370 \uc65c #ifdef __CUDNN__ \uac00 \ud544\uc694\ud55c\uc9c0 \ubaa8\ub974\uaca0\ub2e4. 7 : LongArray<DTYPE> * m_aLongArray \uc758 operator[] \uc5d0 index \ub97c \uc804\ub2ec\ud574\uc8fc\uace0 \ubc18\ud658\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud574\ubcf4\ub824 \ud588\ub294\ub370 Tensor::operator[] \uba54\uc18c\ub4dc\uac00 \uc778\ub371\uc2a4\ub97c \uadf8\uc800 LongArray::operator[] \ub85c \uc804\ub2ec\ud574\uc900\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 LongArray::operator[] \uc744 \ubd84\uc11d\ud568\uc73c\ub85c\uc368 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LongArray::operator[] \uc744 \ubd84\uc11d\ud558\ub824\uba74 \uba3c\uc800 LongArray \uac1d\uccb4\uc758 \uc0dd\uc131\uc744 \uc774\ud574\ud574\uc57c \ud55c\ub2e4. LongArray \uac1d\uccb4\ub294 Tensor::Zeros \uba54\uc18c\ub4dc \ubd84\uc11d \uacfc\uc815\uc5d0\uc11c pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \ubcc0\uc218\ub85c LongArray<DTYPE> * m_aLongArray = new LongArray<DTYPE>(pTime, pCapacityPerTime); \uc640 \uac19\uc774 \uc0dd\uc131\ub418\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Tensor.hpp: Tensor::operator[] \uba54\uc18c\ub4dc"},{"location":"doit/fewshot/step1-2/#srclongarrayhpp-longarray","text":"\ubd84\uc11d \ubaa9\ud45c LongArray \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815\uc778 LongArray<DTYPE> * m_aLongArray = new LongArray<DTYPE>(pTime, pCapacityPerTime); \uc744 \uc774\ud574\ud558\uae30 \ud30c\ub77c\ubbf8\ud130\uc758 \uc758\ubbf8\ub294 pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 template < typename DTYPE > class LongArray { private : DTYPE ** m_aaHostLongArray ; ///< \uba54\ubaa8\ub9ac\uc5d0 \uc62c\ub77c\uac00 \uc788\ub294 \ub370\uc774\ud130\uc758 \uc8fc\uc18c \uac12. int m_CapacityOfLongArray ; ///< LongArray\uc758 \ucd1d \uc6a9\ub7c9. int m_TimeSize ; ///< Tensor\uc758 TimeSize int m_CapacityPerTime ; ///< Time\uc73c\ub85c \ub098\ub204\uc5b4\uc9c4 data\uc758 Capacity Device m_Device ; ///< \uc7a5\uce58 \uc0ac\uc6a9 \uad6c\ubd84\uc790 (CPU or GPU) int m_idOfDevice ; ///< GPU\uc0ac\uc6a9 \uc2dc, \uc0ac\uc6a9\ud558\ub824\ub294 GPU\uc758 \ubc88\ud638. #ifdef __CUDNN__ DTYPE ** m_aaDevLongArray ; ///< GPU\uba54\ubaa8\ub9ac\uc5d0 \uc62c\ub77c\uac00\uc788\ub294 \ub370\uc774\ud130\uc758 \uc8fc\uc18c \uac12. m_aaHostLongArray\uc640 \ube44\uc2b7\ud55c \uc5ed\ud560\uc744 \ud55c\ub2e4. #endif // __CUDNN int Alloc ( unsigned int pTimeSize , unsigned int pCapacityPerTime ); int Alloc ( LongArray * pLongArray ); void Delete (); ... public : LongArray ( unsigned int pCapacity ); LongArray ( unsigned int pTimeSize , unsigned int pCapacityPerTime ); LongArray ( LongArray * pLongArray ); // Copy Constructor ... DTYPE & operator []( unsigned int index ); ... }; 18 : \uc774 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. 19 : Danger \ub610\ud55c LongArray(unsigned int pCapacity); \ub85c \uc120\uc5b8\ub41c \uc0dd\uc131\uc790\ub294 \uc0ac\uc6a9\ub418\uace0 \uc788\uc9c0 \uc54a\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 template < typename DTYPE > LongArray < DTYPE >:: LongArray ( unsigned int pTimeSize , unsigned int pCapacity ) { m_TimeSize = 0 ; m_CapacityPerTime = 0 ; m_aaHostLongArray = NULL ; m_Device = CPU ; m_idOfDevice = - 1 ; #ifdef __CUDNN__ m_aaDevLongArray = NULL ; #endif // __CUDNN Alloc ( pTimeSize , pCapacity ); } 10 : \ud30c\ub77c\ubbf8\ud130\ub97c \uadf8\ub300\ub85c Alloc \uba54\uc18c\ub4dc\ub85c \ubcf4\ub0b4\uc900\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 template < typename DTYPE > int LongArray < DTYPE >:: Alloc ( unsigned int pTimeSize , unsigned int pCapacityPerTime ) { m_TimeSize = pTimeSize ; m_CapacityPerTime = pCapacityPerTime ; m_aaHostLongArray = new DTYPE * [ m_TimeSize ]; for ( int i = 0 ; i < m_TimeSize ; i ++ ) { m_aaHostLongArray [ i ] = new DTYPE [ m_CapacityPerTime ]; for ( int j = 0 ; j < m_CapacityPerTime ; j ++ ) { m_aaHostLongArray [ i ][ j ] = 0.f ; } } m_CapacityOfLongArray = m_TimeSize * m_CapacityPerTime ; m_Device = CPU ; return TRUE ; } 2-3 : \ud30c\ub77c\ubbf8\ud130( pTime : 0 \ubc88\uc9f8 \ucd95, pCapacityPerTime : 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \ub97c \uba64\ubc84\ubcc0\uc218 m_TimeSize , m_CapacityPerTime \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger \uadf8\ub7ec\ub098 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc131\ub2a5\uc774 \ub354 \uc88b\uc544\uc9c4\ub2e4. 6-7 : m_TimeSize \ub9cc\ud07c for \ubb38\uc744 \ub3cc\uba74\uc11c DTYPE ** m_aaHostLongArray \ub354\ube14\ud3ec\uc778\ud130\ub97c m_CapacityPerTime \ud06c\uae30\uc758 DTYPE \ubc30\uc5f4\uc758 \ubc30\uc5f4\ub85c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uc65c LongArray \ub97c \uc774\ub807\uac8c 2 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uc5c8\uc744\uae4c? 9-10 : m_aaHostLongArray \ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uadf8\ub7ec\ub098 \uc774\ub807\uac8c for \ubb38\uc73c\ub85c \uba54\ubaa8\ub9ac\ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uac83\uc740 \uc2dc\uac04\uc774 \uc624\ub798\uac78\ub9ac\ubbc0\ub85c memset \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ube60\ub974\ub2e4. \ud558\uc9c0\ub9cc C++ \uc5d0\uc11c\ub294 memset \ubcf4\ub2e4 std:fill \uc774 \uad8c\uc7a5\ub41c\ub2e4. \ud55c\ud3b8 LongArray \uc0dd\uc131\uc790\uac00 \ubc18\ub4dc\uc2dc Alloc() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc774 \uba54\uc18c\ub4dc\uac00 \ud56d\uc0c1 \uba54\ubaa8\ub9ac\ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\uc2dc\ud0a4\ubbc0\ub85c Tensor::Zeros \uba54\uc18c\ub4dc\uc758 \uc758\ubbf8\uac00 \ubb34\uc5c7\uc778\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. \uc65c\ub0d0\ud558\uba74 \ub2e4\ub978 Tensor \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud574\ub3c4 \ubc18\ub4dc\uc2dc 0 \uc73c\ub85c \ucd08\uae30\ud654 \ub418\uae30 \ub54c\ubb38\uc774\ub2e4. 13 : m_CapacityOfLongArray \uc5d0 LongArray \uc758 \ucd1d \ud06c\uae30\ub97c \uc800\uc7a5\ud574\uc900\ub2e4. pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774 m_TimeSize \uc640 m_CapacityPerTime \uc774 \ub418\uc5c8\uc73c\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc758 \ud615\uc0c1\uc744 \ubaa8\ub450 \uacf1\ud55c \uac12\uc744 \uc800\uc7a5\ud574\uc8fc\ub294 \uac83\uc774\ub2e4. 15 : Danger 1 \ubc14\uc774\ud2b8 bool \uc774 \uc544\ub2c8\ub77c 4 \ubc14\uc774\ud2b8 int \ud615\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \uba54\ubaa8\ub9ac\uac00 \ub0ad\ube44\ub41c\ub2e4. \ub610\ud55c \uba54\uc18c\ub4dc\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud588\uc744 \uacbd\uc6b0 return FALSE \ud574\uc8fc\ub294 \ucf54\ub4dc\uac00 \uc5c6\uc73c\ubbc0\ub85c \ube44\ub300\uce6d\uc801\uc778 \uba54\uc18c\ub4dc\ub85c \ubcfc \uc218 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 m_TimeSize \\(\\times\\) m_CapacityPerTime \ud615\uc0c1\uc758 \ubc30\uc5f4\uc744 \ub9cc\ub4e4\uc5b4\uc11c DTYPE ** m_aaHostLongArray \uc5d0 \uc800\uc7a5\ud574\uc8fc\uace0 0 \uc73c\ub85c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774 m_TimeSize \uc640 m_CapacityPerTime \uc774 \ub418\uc5c8\uc73c\ubbc0\ub85c \"\uccab\ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30 X \ub450\ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uae4c\uc9c0\uc758 \uacf1\" \uc758 \ubc30\uc5f4\uc774 \uc0dd\uc131\ub418\uace0 0 \uc73c\ub85c \ucd08\uae30\ud654\ub41c \uac83\uc774\ub2e4. \uc774 m_aaHostLongArray \uac00 LongArray \uc758 \uc2e4\uccb4\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/LongArray.hpp: LongArray \uc0dd\uc131\uc790"},{"location":"doit/fewshot/step1-2/#srclongarrayhpp-longarrayoperator","text":"\ubd84\uc11d \ubaa9\ud45c LongArray::operator[] \uc744 \ubd84\uc11d\ud568\uc73c\ub85c\uc368 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud558\uae30 1 2 3 4 5 template < typename DTYPE > class LongArray { ... DTYPE & operator []( unsigned int index ); ... }; 3 : [] \uc5f0\uc0b0\uc790\ub294 \uc774\ub807\uac8c \uc120\uc5b8\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 template < typename DTYPE > DTYPE & LongArray < DTYPE >:: operator []( unsigned int index ) { #ifdef __CUDNN__ if ( m_Device == GPU ) { this -> SetDeviceCPU (); } #endif // __CUDNN__ return m_aaHostLongArray [ index / m_CapacityPerTime ][ index % m_CapacityPerTime ]; } 1 : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc\uc758 for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = \\ imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; \uc5d0\uc11c Index5D(result->GetShape(), 0, 0, ch, ro, co) \uac00 index \ub85c \uc804\ub2ec\ub418\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. 7 : \uacb0\uad6d LFWDataset::Image2Tensor \ub780 Index5D(result->GetShape(), 0, 0, ch, ro, co) \uc73c\ub85c \uc804\ub2ec\ub41c index \ub85c\uc368 2 \ucc28\uc6d0 \ubc30\uc5f4 m_aaHostLongArray[index / m_CapacityPerTime][index % m_CapacityPerTime] \uc5d0 \ub370\uc774\ud130\uc14b imgBuf \uc758 \uc6d0\uc18c\ub97c \ud558\ub098\ud558\ub098 \ubcf5\uc0ac\ud558\uace0 \uc788\ub294 \uac83\uc774\ub2e4. Success \uc774\ub85c\uc368 \uc6b0\ub9ac\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc774\ud574\ud588\ub2e4. \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc774\ub780 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\uba74 \ub05d\uc774\ub2e4. Danger \uadfc\ub370 [index / m_CapacityPerTime][index % m_CapacityPerTime] \ub77c\ub294 \uc778\ub371\uc2f1 \ubc29\uc2dd\uc774 \ubb34\uc2a8 \uc758\ubbf8\ub97c \uac16\ub294\uac70\uc9c0? 5 \ucc28\uc6d0 \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\ub294 \uc778\ub371\uc2f1 \ubc29\uc2dd\uc744 \uac00\uc838\uc640\uc11c \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub97c \ud558\uae38\ub798 2 \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud574\uc904 \uc218 \uc788\ub294\uac70\uc9c0? Danger \uadf8\ub7f0\ub370 \uc2e4\uc81c\ub85c LongArray \uc758 DTYPE ** m_aaHostLongArray \ub294 m_TimeSize \\(\\times\\) m_CapacityPerTime \ud615\uc0c1\uc758 \ubc30\uc5f4\ub85c \uc800\uc7a5\ub418\uc5b4\uc788\ub2e4. m_TimeSize \ub294 0 \ubc88\uc9f8 \ucd95\uc744 \ub73b\ud558\uace0, m_CapacityPerTime \uc740 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1\uc744 \ub73b\ud588\ub2e4. Index5D \uc5d0\uc11c \uc804\ub2ec\ub41c 5 \ucc28\uc6d0 \ud150\uc800\ub294 \uc2e4\uc81c\ub85c Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub85c \uc815\uc758 \ub418\uc5c8\uc73c\ubbc0\ub85c \\(t_1 = t_2 = 1\\) \uc774\uace0, \uccab\ubc88\uc9f8\uc640 \ub450\ubc88\uc9f8 \uc778\ub371\uc2a4\uac00 \ud56d\uc0c1 \\(0\\) \uc774\ubbc0\ub85c \\(i_1=i_2=0\\) \uc774\ub2e4. \ub530\ub77c\uc11c 5 \ucc28\uc6d0 \ud150\uc800\uac00 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \uc800\uc7a5\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4\ub294 \\[i_1t_5t_4t_3t_2+i_2t_5t_4t_3+i_3t_5t_4+i_2t_5+i_5 = (((i_1t_2+i_2)t_3+i_3)t_4+i_2)t_5 + i_5\\] \\[\\iff 0 + 0 + i_3t_5t_4+i_2t_5+i_5 \\] \uac00 \ub418\uc5b4 3 \ucc28\uc6d0 \ubc30\uc5f4\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4\ub85c \ubc14\ub010\ub2e4. \uc65c \uc774\ub807\uac8c \ubc88\uac70\ub86d\uac8c \ud558\ub294\uac70\uc9c0? \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\ub4e4\uc774 \uc131\ub2a5\uc744 \uc800\ud558\uc2dc\ud0ac \uc218\ub3c4 \uc788\ub2e4. \uc5b4\uca0c\ub4e0 \uadf8 3 \ucc28\uc6d0 \ubc30\uc5f4, \uc989 3 \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud558\uae30 \uc704\ud55c index \uac00 \ub2e4\uc2dc 2 \ucc28\uc6d0 \ubc30\uc5f4 DTYPE ** m_aaHostLongArray \uc5d0 \uc800\uc7a5\ub418\uae30 \uc704\ud55c \uc778\ub371\uc2a4 \uc5f0\uc0b0 [index / m_CapacityPerTime][index % m_CapacityPerTime] \uc744 \uac70\uccd0\uac04\ub2e4. \ub300\uccb4 \uc65c 3 \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc744 5 \ucc28\uc6d0 Tensor \uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c 1 \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4 \uc5f0\uc0b0\uc744 \ud55c \ub2e4\uc74c 2 \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud558\ub294 \uac70\uc9c0???? \uc65c \uc774\ub807\uac8c \ud558\ub294\uac70\uc9c0? \ubd84\uc11d \uacb0\ub860 \uc774\ub85c\uc368 \uc6b0\ub9ac\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc774\ud574\ud588\ub2e4. \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc774\ub780 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\uba74 \ub05d\uc774\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \ubd84\uc11d \uc9c0\ub3c4\uc5d0 \ub530\ub974\uba74 \uc544\uc9c1 LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc \uc744 \ubd84\uc11d\ud558\uc9c0 \uc54a\uc558\uc9c0\ub9cc \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uacfc\uc815\uc744 \ucda9\ubd84\ud788 \uc774\ud574\ud588\uc73c\ubbc0\ub85c \uc774\ucbe4\uc5d0\uc11c \ub2e4\ub978 \ucf54\ub4dc \ubd84\uc11d\uc744 \uadf8\ub9cc\ub450\uace0, \ucf54\ub529\uc744 \uc2dc\uc791\ud574\ubcf8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ud6c4\uc5d0 \ubb3c\ub860 DataLoader \ub97c \uc815\uc758\ud574\uc57c \ud560 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \ubaa8\ub4e0 \uac74 \uc778\uacf5\uc2e0\uacbd\ub9dd \uad6c\ud604\uc744 \uc704\ud55c \uac83\uc774\uc5c8\uc73c\ubbc0\ub85c \ucf54\ub529\uc744 \uc2dc\uc791\ud560 \uae30\ubcf8\uc801\uc778 \uc900\ube44\ub77c\ub3c4 \ub05d\ub098\uba74 \uc77c\ub2e8 \ud560 \uc218 \uc788\ub294 \uc218\uc900\uae4c\uc9c0\uc758 \ucf54\ub529\uc740 \ud574\ub450\ub294 \uac83\uc774 \uc633\uc740 \ubc29\ud5a5\uc778 \uac83 \uac19\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/LongArray.hpp: LongArray::operator[] \uba54\uc18c\ub4dc"},{"location":"doit/fewshot/step2/","text":"(step2 \uc21c\uc804\ud30c)","title":"Step 2. \uc21c\uc804\ud30c"},{"location":"doit/fewshot/step3/","text":"(step3 \uc5ed\uc804\ud30c)","title":"Step 3. \uc5ed\uc804\ud30c"},{"location":"doit/fewshot/step4/","text":"(step4 \ucd5c\uc801\ud654)","title":"Step 4. \ucd5c\uc801\ud654"},{"location":"doit/fewshot/temp/","text":"\ubbf8\uc644\uc131 \u00b6 LFW/LFWSampler.hpp \u00b6 \ud074\ub798\uc2a4 \ubd84\uc11d\uc758 \uc2dc\uc791\uc740 \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\uc640 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud558\ub294 \uac83\uc774\ubbc0\ub85c \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 LFWSampler \uacfc LFWSampler::GetDataFromGlobalBuffer \uc744 \uc774\ud574\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ... template < typename DTYPE > class LFWSampler : public DataLoader < DTYPE > { private : /* data */ int m_numOfClass ; public : LFWSampler ( int numOfClass , Dataset < DTYPE > * dataset , int batchSize = 1 , int useShuffle = FALSE , int numOfWorker = 1 , int dropLast = TRUE ); virtual ~ LFWSampler (); virtual void MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ); virtual void DataPreprocess (); void Tensor2Image ( std :: string filename , Tensor < DTYPE > * imgTensor , int doValuerScaling ); }; 3 : LFWSampler \ub294 DataLoader \ub97c \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc785\ub2c8\ub2e4. 9 : \uba3c\uc800 \uc0dd\uc131\uc790\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. 1 2 3 4 template < typename DTYPE > LFWSampler < DTYPE >:: LFWSampler ( int numOfClass , Dataset < DTYPE > * dataset , int batchSize , int useShuffle , int numOfWorker , int dropLast ) : DataLoader < DTYPE > ( dataset , batchSize , useShuffle , numOfWorker , dropLast ) { m_numOfClass = numOfClass ; } 2 : \uc0dd\uc131\uc790\uc5d0\uc11c\ub294 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub85c \uc0c1\uc704 \ud074\ub798\uc2a4\uc778 DataLoader \ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. 3 : \uadf8\ub9ac\uace0 \ub2e8\uc9c0 numOfClass \ub97c m_numOfClass \uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ucf54\ub4dc\ub3c4 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub85c \ucd08\uae30\ud654\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc544\uc694. \ud558\uc9c0\ub9cc LFWSampler \uc5d0 GetDataFromGlobalBuffer \uac00 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc558\uc5b4\uc694. \uadf8\ub7ec\ub2c8\uae4c \uc0c1\uc704 \ud074\ub798\uc2a4\uc778 DataLoader \ub97c \ubd84\uc11d\ud574\uc57c \ud560 \uac83 \uac19\uc544\uc694. src/DataLoader.hpp \u00b6 \ud074\ub798\uc2a4 \ubd84\uc11d\uc758 \uc2dc\uc791\uc740 \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\uc640 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud558\ub294 \uac83\uc774\ubbc0\ub85c \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 template < typename DTYPE > class DataLoader { private : /* data */ Dataset < DTYPE > * m_pDataset ; int m_lenOfDataset ; int m_numOfEachDatasetMember ; std :: thread m_aThreadForDistInfo ; std :: thread * m_aaWorkerForProcess ; // dynamic allocation int m_numOfWorker ; int m_nowWorking ; // for distribute data info std :: queue < std :: vector < int > *> m_splitedIdxBuffer ; sem_t m_distIdxFull ; // numOfthread + 1; sem_t m_distIdxEmpty ; sem_t m_distIdxMutex ; int m_batchSize ; int m_dropLast ; // implement yet int m_useShuffle ; // for global buffer std :: queue < std :: vector < Tensor < DTYPE > *> *> m_globalBuffer ; sem_t m_globalFull ; // numOfthread * 2 sem_t m_globalEmpty ; sem_t m_globalMutex ; void Alloc (); void Delete (); void Init (); public : DataLoader ( Dataset < DTYPE > * dataset , int batchSize = 1 , int useShuffle = FALSE , int numOfWorker = 1 , int dropLast = TRUE ); virtual ~ DataLoader (); void StartProcess (); void StopProcess (); // distribute data idx to each thread void DistributeIdxOfData2Thread (); virtual void MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ); virtual void DataPreprocess (); void Push2IdxBuffer ( std :: vector < int > * setOfIdx ); std :: vector < int > * GetIdxSetFromIdxBuffer (); Tensor < DTYPE > * Concatenate ( std :: queue < Tensor < DTYPE > *>& setOfData ); void Push2GlobalBuffer ( std :: vector < Tensor < DTYPE > *> * preprocessedData ); std :: vector < Tensor < DTYPE > *>* GetDataFromGlobalBuffer (); int GetBatchSize (){ return m_batchSize ;} int GetWorkingSignal (){ return m_nowWorking ;} int GetNumOfEachDatasetMember (){ return m_numOfEachDatasetMember ;} Dataset < DTYPE > * GetDataset (){ return m_pDataset ;} // static int random_generator(int upperbound); }; 1 : DataLoader \ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 34 : \uc0dd\uc131\uc790\uac00 \uc774\ub807\uac8c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud574\ubd05\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 template < typename DTYPE > DataLoader < DTYPE >:: DataLoader ( Dataset < DTYPE > * dataset , int batchSize , int useShuffle , int numOfWorker , int dropLast ) { this -> Init (); // need to default value to run the data loader (background) m_pDataset = dataset ; // batch size m_batchSize = batchSize ; assert ( m_batchSize > 0 ); // random or not m_useShuffle = useShuffle ; // number of thread m_numOfWorker = numOfWorker ; assert ( m_numOfWorker > 0 ); // Drop last m_dropLast = dropLast ; // elicit information of data; m_lenOfDataset = m_pDataset -> GetLength (); assert ( m_lenOfDataset > 0 ); m_numOfEachDatasetMember = m_pDataset -> GetNumOfDatasetMember (); assert ( m_numOfEachDatasetMember > 0 ); sem_init ( & m_distIdxFull , 0 , 0 ); sem_init ( & m_distIdxEmpty , 0 , m_numOfWorker + 1 ); sem_init ( & m_distIdxMutex , 0 , 1 ); sem_init ( & m_globalFull , 0 , 0 ); sem_init ( & m_globalEmpty , 0 , m_numOfWorker * 2 ); sem_init ( & m_globalMutex , 0 , 1 ); this -> Alloc (); this -> StartProcess (); } 2 : Init \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc5b4\uc694. 1 2 3 4 5 6 7 8 9 10 11 template < typename DTYPE > void DataLoader < DTYPE >:: Init () { m_pDataset = NULL ; m_lenOfDataset = 1 ; m_numOfEachDatasetMember = 1 ; m_aaWorkerForProcess = NULL ; m_numOfWorker = 1 ; m_nowWorking = FALSE ; m_batchSize = 1 ; m_dropLast = FALSE ; m_useShuffle = FALSE ; } \uba64\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud574\uc8fc\ub294 \ud568\uc218\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5b4\uc694. \ud558\uc9c0\ub9cc \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. 4 : m_pDataset \uc5d0 dataset \uc744 \uc800\uc7a5\ud558\ub294\ub370 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud574\uc11c \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc544\uc694. 17 : m_pDataset \uc758 GetLength \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc774\uac83\uc744 \uc774\ud574\ud558\uae30 \uc704\ud558\uc5ec \uba3c\uc800 Dataset \ud074\ub798\uc2a4\ub97c \uc774\ud574\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uacc4\uc18d \ucf54\ub4dc\ub97c \uc774\ud574\ud560 \ub54c Dataset \ud074\ub798\uc2a4\uac00 \uac78\ub9ac\ub124\uc694. \ud558\uc9c0\ub9cc \uc6b0\uc120 \ub370\uc774\ud130 \uae38\uc774\ub97c \ubc18\ud658\ubc1b\ub294 \ud568\uc218\ub77c\uace0 \uc0dd\uac01\ud558\uace0 \uacc4\uc18d \uc9c4\ud589\ud569\ub2c8\ub2e4. 30 : Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 template < typename DTYPE > void DataLoader < DTYPE >:: Alloc () { // thread allocate m_aaWorkerForProcess = new std :: thread [ m_numOfWorker ]; } \uc2a4\ub808\ub4dc \ubc30\uc5f4\uc744 \uc0dd\uc131\ud558\uc5ec std::thread m_aaWorkerForProcess \ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. 31 : StartProcess \uba54\uc18c\ub4dc\uc758 \uc815\uc758\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 template < typename DTYPE > void DataLoader < DTYPE >:: StartProcess () { // Generate thread for Dist - DistributeIdxOfData2Thread() // Generate thread set for Process - m_nowWorking = TRUE ; m_aThreadForDistInfo = std :: thread ([ & ]() { this -> DistributeIdxOfData2Thread (); }); // lambda expression printf ( \"Generate dataloader base thread \\r\\n \" ); for ( int i = 0 ; i < m_numOfWorker ; i ++ ) { m_aaWorkerForProcess [ i ] = std :: thread ([ & ]() { this -> DataPreprocess (); }); // lambda expression printf ( \"Generate worker[%d] for data preprocessing \\r\\n \" , i ); } } 4 : int m_nowWorking \uc744 TRUE \ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc TRUE \uc640 FALSE \ub85c \uc0ac\uc6a9\ud560 \ubcc0\uc218\ub77c\uba74 \\(4\\) \ubc14\uc774\ud2b8\ub098 \ub418\ub294 int \uac00 \uc544\ub2c8\ub77c \\(1\\) \ubc14\uc774\ud2b8\uc9dc\ub9ac bool \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \ub098\uc744 \uac83 \uac19\uc544\uc694. 6-8 : \uc2a4\ub808\ub4dc\ub97c \uc0dd\uc131\ud558\uace0 \uc2a4\ub808\ub4dc \uc815\ubcf4\ub97c m_aThreadForDistInfo \uc5d0 \uc800\uc7a5\ud558\uba70 DistributeIdxOfData2Thread \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. \ud568\uc218 \uc774\ub984\ub9cc \ubd10\uc11c\ub294 \ucc98\ub9ac\ud560 \ub370\uc774\ud130\ub97c \uc2a4\ub808\ub4dc\uc5d0 \uacf5\ud3c9\ud558\uac8c \ubd84\ubc30\ud558\uae30 \uc704\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ubd84\ubc30\ud558\ub294 \uc0ac\uc804\uc791\uc5c5\uc744 \ud558\ub294 \ud568\uc218\uc778 \uac83 \uac19\uc544\uc694. \ud558\uc9c0\ub9cc \uc5b4\ucc28\ud53c \ud568\uc218 \ud558\ub098\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc65c \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc73c\ub85c \uc2a4\ub808\ub4dc\ub97c \ud638\ucd9c\ud588\ub294\uc9c0 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. \uc5f0\uad6c\ub97c \ud574\ubd10\uc57c\ud560\ub4ef. DistributeIdxOfData2Thread \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc544\uc694. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 template < typename DTYPE > void DataLoader < DTYPE >:: DistributeIdxOfData2Thread () { std :: vector < int > * allOfIdx = new std :: vector < int > (); this -> MakeAllOfIndex ( allOfIdx ); // virtual function std :: vector < int > * setOfIdx = NULL ; int dropLastSize = allOfIdx -> size () % m_batchSize ; // num of dropLast int numOfBatchBlockSize = allOfIdx -> size () / m_batchSize ; int cnt = 0 ; if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin (), allOfIdx -> end (), random_generator ); while ( m_nowWorking ) { setOfIdx = new std :: vector < int > ( m_batchSize ); for ( int i = 0 ; i < m_batchSize ; i ++ ) { ( * setOfIdx )[ i ] = ( * allOfIdx )[ m_batchSize * cnt + i ]; } cnt ++ ; this -> Push2IdxBuffer ( setOfIdx ); if ( cnt == numOfBatchBlockSize ) { if ( ! m_dropLast && dropLastSize ) { std :: reverse ( allOfIdx -> begin (), allOfIdx -> end ()); if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin () + dropLastSize , allOfIdx -> end (), random_generator ); } else { if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin (), allOfIdx -> end (), random_generator ); } cnt = 0 ; } } delete allOfIdx ; } 3 : MakeAllOfIndex \ud568\uc218\uc5d0 vector \ud3ec\uc778\ud130 allOfIdx \ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. MakeAllOfIndex \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc544\uc694. 1 2 3 4 5 6 template < typename DTYPE > void DataLoader < DTYPE >:: MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ) { pAllOfIndex -> resize ( m_lenOfDataset ); for ( int i = 0 ; i < m_lenOfDataset ; i ++ ) ( * pAllOfIndex )[ i ] = i ; } \ub2e8\uc21c\ud788 resize \ub85c \ubca1\ud130 \ud06c\uae30\ub97c \uc815\ud55c\ub2e4\uc74c 0, 1, ..., m_lenOfDataset-1 \uae4c\uc9c0 \ubca1\ud130\uc5d0 \ub300\uc785\ud574\uc8fc\ub124\uc694. std::vector \ub294 \uc6d0\uc18c\uac00 \ucd94\uac00\ub420 \ub54c\ub9c8\ub2e4 \uacf5\uac04\uc774 \ubd80\uc871\ud558\uba74 \\(2\\) \uc758 \ubc30\uc2b9\ub9cc\ud07c \uacf5\uac04\uc744 \ub298\ub9ac\ub294\ub370 \uadf8\uac83\uc5d0 \uc18c\ubaa8\ub418\ub294 \ube44\uc6a9\uc744 \uc904\uc774\uace0\uc790 \uc774\ub807\uac8c \uc9e0 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc std::vector::reserve \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc \ube44\uad50\ud558\uc5ec \uc5b4\ub5a4 \uac8c \ub354 \uc88b\uc740\uc9c0 \uc5f0\uad6c\uac00 \ud544\uc694\ud560 \uac83 \uac19\ub124\uc694. 13-16 : vector( size_type count, const T& value, const Allocator& alloc = Allocator()); \uc758 \ud615\ud0dc\ub85c \ubca1\ud130\ub97c \ucd08\uae30\ud654\ud558\uace0 \uc788\ub294\ub370 \uc774\ub294 C++11 \uae4c\uc9c0 \uc9c0\uc6d0\ub418\ub294 \ubb38\ubc95\uc774\ubbc0\ub85c \ub098\uc911 \uc0c1\uc704 \ud638\ud658\uc131\uc744 \ub9de\ucd94\uc5b4\uc57c\ud560 \ub54c \ubc14\uafd4\uc57c\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc5b4\uca0c\ub4e0 m_batchSize \ub9cc\ud07c allOfIdx \ub97c \ubd84\ubc30\ud574\uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4. 20 : Push2IdxBuffer \ud568\uc218\uc5d0 m_batchSize \ub9cc\ud07c allOfIdx \uac00 \ubd84\ubc30\ub41c setOfIdx \ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. Push2IdxBuffer \ub294 \uc774\ub807\uac8c \uc815\uc758\ub418\uc5b4 \uc788\uc5b4\uc694. 1 2 3 4 5 6 7 8 9 template < typename DTYPE > void DataLoader < DTYPE >:: Push2IdxBuffer ( std :: vector < int > * setOfIdx ) { sem_wait ( & m_distIdxEmpty ); sem_wait ( & m_distIdxMutex ); m_splitedIdxBuffer . push ( setOfIdx ); sem_post ( & m_distIdxMutex ); sem_post ( & m_distIdxFull ); } \ub2e8\uc21c\ud788 Critical Section \uc5d0 \ub4e4\uc5b4\uac00\uae30 \uc804\uc5d0 \uc2a4\ub808\ub4dc\ub4e4\uc744 \uc7a0\uad88\uc8fc\uace0 std::queue<std::vector<int> *> m_splitedIdxBuffer \uc5d0 setOfIdx \ub97c \ub123\uc5b4\uc8fc\ub124\uc694. \uc774\ub7f0 \uc2dd\uc73c\ub85c DistributeIdxOfData2Thread \uac00 \uc2a4\ub808\ub4dc\ub4e4\uc5d0 m_batchSize \ub9cc\ud07c allOfIdx \ub97c \ubd84\ubc30\ud574\uc900\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ub098\uc911\uc5d0 \uc8fc\uc11d\uc744 \uc880 \ub354 \uc790\uc138\ud558\uac8c \ub2ec\uc544\ub193\uac70\ub098 API \ub97c \uc880 \ub354 \uc790\uc138\ud788 \uc368\ub450\uba74 \uc0ac\ub78c\ub4e4\uc774 \uc0c1\uc138\ud55c \ucf54\ub4dc \ubd84\uc11d \uc5c6\uc774\ub3c4 \uc8fc\uc11d\ub9cc \ubcf4\uace0 \ucf54\ub4dc \ubd84\uc11d\uc744 \ube60\ub974\uac8c \uc9c4\ud589\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ucf54\ub4dc \ubd84\uc11d\uc744 \ud1b5\ud558\uc5ec \ud568\uc218 \uae30\ub2a5\uc744 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc2dc\uac04\uc774 \uc870\uae08 \uc624\ub798\uac78\ub9b4 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 API \uc640 \uc8fc\uc11d\uc73c\ub85c \uc774\ud574\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \uac83\uc774 \uc88b\uc744 \uac83 \uac19\uc544\uc694. 11-14 : m_numOfWorker \ub9cc\ud07c DataPreprocess \ub97c \uc2a4\ub808\ub4dc\ub85c \ud638\ucd9c\ud558\uba70 m_aaWorkerForProcess \ubca1\ud130\uc5d0 \uc2a4\ub808\ub4dc\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. DataPreprocess \ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 template < typename DTYPE > void DataLoader < DTYPE >:: DataPreprocess () { // for thread // doing all of thing befor push global buffer // arrange everything for worker std :: queue < Tensor < DTYPE > *> * localBuffer = new std :: queue < Tensor < DTYPE > *> [ m_numOfEachDatasetMember ]; std :: vector < int > * setOfIdx = NULL ; int idx = 0 ; std :: vector < Tensor < DTYPE > *> * data = NULL ; Tensor < DTYPE > * pick = NULL ; std :: vector < Tensor < DTYPE > *> * preprocessedData = NULL ; std :: cout << \"DataLoader worker\" << '\\n' ; while ( m_nowWorking ) { // get information from IdxBuffer setOfIdx = this -> GetIdxSetFromIdxBuffer (); for ( int i = 0 ; i < m_batchSize ; i ++ ) { idx = ( * setOfIdx )[ i ]; data = m_pDataset -> GetData ( idx ); for ( int j = 0 ; j < m_numOfEachDatasetMember ; j ++ ) { // Chech the type of Data for determine doing preprocessing (IMAGE) // if true do data Preprocessing // push data into local buffer localBuffer [ j ]. push (( * data )[ j ]); } delete data ; data = NULL ; } // delete set of idx vector delete setOfIdx ; setOfIdx = NULL ; preprocessedData = new std :: vector < Tensor < DTYPE > *> ( m_numOfEachDatasetMember , NULL ); // do not deallocate in this function! for ( int k = 0 ; k < m_numOfEachDatasetMember ; k ++ ) { // concatenate each localbuffer // push preprocessedData vector ( * preprocessedData )[ k ] = this -> Concatenate ( localBuffer [ k ]); } // push preprocessedData into Global buffer this -> Push2GlobalBuffer ( preprocessedData ); preprocessedData = NULL ; } delete [] localBuffer ; } \uc774\ub85c\uc368 StartProcess \ub294","title":"\ubbf8\uc644\uc131"},{"location":"doit/fewshot/temp/#_1","text":"","title":"\ubbf8\uc644\uc131"},{"location":"doit/fewshot/temp/#lfwlfwsamplerhpp","text":"\ud074\ub798\uc2a4 \ubd84\uc11d\uc758 \uc2dc\uc791\uc740 \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\uc640 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud558\ub294 \uac83\uc774\ubbc0\ub85c \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 LFWSampler \uacfc LFWSampler::GetDataFromGlobalBuffer \uc744 \uc774\ud574\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ... template < typename DTYPE > class LFWSampler : public DataLoader < DTYPE > { private : /* data */ int m_numOfClass ; public : LFWSampler ( int numOfClass , Dataset < DTYPE > * dataset , int batchSize = 1 , int useShuffle = FALSE , int numOfWorker = 1 , int dropLast = TRUE ); virtual ~ LFWSampler (); virtual void MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ); virtual void DataPreprocess (); void Tensor2Image ( std :: string filename , Tensor < DTYPE > * imgTensor , int doValuerScaling ); }; 3 : LFWSampler \ub294 DataLoader \ub97c \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc785\ub2c8\ub2e4. 9 : \uba3c\uc800 \uc0dd\uc131\uc790\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. 1 2 3 4 template < typename DTYPE > LFWSampler < DTYPE >:: LFWSampler ( int numOfClass , Dataset < DTYPE > * dataset , int batchSize , int useShuffle , int numOfWorker , int dropLast ) : DataLoader < DTYPE > ( dataset , batchSize , useShuffle , numOfWorker , dropLast ) { m_numOfClass = numOfClass ; } 2 : \uc0dd\uc131\uc790\uc5d0\uc11c\ub294 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub85c \uc0c1\uc704 \ud074\ub798\uc2a4\uc778 DataLoader \ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. 3 : \uadf8\ub9ac\uace0 \ub2e8\uc9c0 numOfClass \ub97c m_numOfClass \uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ucf54\ub4dc\ub3c4 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub85c \ucd08\uae30\ud654\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc544\uc694. \ud558\uc9c0\ub9cc LFWSampler \uc5d0 GetDataFromGlobalBuffer \uac00 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc558\uc5b4\uc694. \uadf8\ub7ec\ub2c8\uae4c \uc0c1\uc704 \ud074\ub798\uc2a4\uc778 DataLoader \ub97c \ubd84\uc11d\ud574\uc57c \ud560 \uac83 \uac19\uc544\uc694.","title":"LFW/LFWSampler.hpp"},{"location":"doit/fewshot/temp/#srcdataloaderhpp","text":"\ud074\ub798\uc2a4 \ubd84\uc11d\uc758 \uc2dc\uc791\uc740 \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\uc640 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud558\ub294 \uac83\uc774\ubbc0\ub85c \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 template < typename DTYPE > class DataLoader { private : /* data */ Dataset < DTYPE > * m_pDataset ; int m_lenOfDataset ; int m_numOfEachDatasetMember ; std :: thread m_aThreadForDistInfo ; std :: thread * m_aaWorkerForProcess ; // dynamic allocation int m_numOfWorker ; int m_nowWorking ; // for distribute data info std :: queue < std :: vector < int > *> m_splitedIdxBuffer ; sem_t m_distIdxFull ; // numOfthread + 1; sem_t m_distIdxEmpty ; sem_t m_distIdxMutex ; int m_batchSize ; int m_dropLast ; // implement yet int m_useShuffle ; // for global buffer std :: queue < std :: vector < Tensor < DTYPE > *> *> m_globalBuffer ; sem_t m_globalFull ; // numOfthread * 2 sem_t m_globalEmpty ; sem_t m_globalMutex ; void Alloc (); void Delete (); void Init (); public : DataLoader ( Dataset < DTYPE > * dataset , int batchSize = 1 , int useShuffle = FALSE , int numOfWorker = 1 , int dropLast = TRUE ); virtual ~ DataLoader (); void StartProcess (); void StopProcess (); // distribute data idx to each thread void DistributeIdxOfData2Thread (); virtual void MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ); virtual void DataPreprocess (); void Push2IdxBuffer ( std :: vector < int > * setOfIdx ); std :: vector < int > * GetIdxSetFromIdxBuffer (); Tensor < DTYPE > * Concatenate ( std :: queue < Tensor < DTYPE > *>& setOfData ); void Push2GlobalBuffer ( std :: vector < Tensor < DTYPE > *> * preprocessedData ); std :: vector < Tensor < DTYPE > *>* GetDataFromGlobalBuffer (); int GetBatchSize (){ return m_batchSize ;} int GetWorkingSignal (){ return m_nowWorking ;} int GetNumOfEachDatasetMember (){ return m_numOfEachDatasetMember ;} Dataset < DTYPE > * GetDataset (){ return m_pDataset ;} // static int random_generator(int upperbound); }; 1 : DataLoader \ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 34 : \uc0dd\uc131\uc790\uac00 \uc774\ub807\uac8c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud574\ubd05\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 template < typename DTYPE > DataLoader < DTYPE >:: DataLoader ( Dataset < DTYPE > * dataset , int batchSize , int useShuffle , int numOfWorker , int dropLast ) { this -> Init (); // need to default value to run the data loader (background) m_pDataset = dataset ; // batch size m_batchSize = batchSize ; assert ( m_batchSize > 0 ); // random or not m_useShuffle = useShuffle ; // number of thread m_numOfWorker = numOfWorker ; assert ( m_numOfWorker > 0 ); // Drop last m_dropLast = dropLast ; // elicit information of data; m_lenOfDataset = m_pDataset -> GetLength (); assert ( m_lenOfDataset > 0 ); m_numOfEachDatasetMember = m_pDataset -> GetNumOfDatasetMember (); assert ( m_numOfEachDatasetMember > 0 ); sem_init ( & m_distIdxFull , 0 , 0 ); sem_init ( & m_distIdxEmpty , 0 , m_numOfWorker + 1 ); sem_init ( & m_distIdxMutex , 0 , 1 ); sem_init ( & m_globalFull , 0 , 0 ); sem_init ( & m_globalEmpty , 0 , m_numOfWorker * 2 ); sem_init ( & m_globalMutex , 0 , 1 ); this -> Alloc (); this -> StartProcess (); } 2 : Init \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc5b4\uc694. 1 2 3 4 5 6 7 8 9 10 11 template < typename DTYPE > void DataLoader < DTYPE >:: Init () { m_pDataset = NULL ; m_lenOfDataset = 1 ; m_numOfEachDatasetMember = 1 ; m_aaWorkerForProcess = NULL ; m_numOfWorker = 1 ; m_nowWorking = FALSE ; m_batchSize = 1 ; m_dropLast = FALSE ; m_useShuffle = FALSE ; } \uba64\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud574\uc8fc\ub294 \ud568\uc218\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5b4\uc694. \ud558\uc9c0\ub9cc \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. 4 : m_pDataset \uc5d0 dataset \uc744 \uc800\uc7a5\ud558\ub294\ub370 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud574\uc11c \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc544\uc694. 17 : m_pDataset \uc758 GetLength \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc774\uac83\uc744 \uc774\ud574\ud558\uae30 \uc704\ud558\uc5ec \uba3c\uc800 Dataset \ud074\ub798\uc2a4\ub97c \uc774\ud574\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uacc4\uc18d \ucf54\ub4dc\ub97c \uc774\ud574\ud560 \ub54c Dataset \ud074\ub798\uc2a4\uac00 \uac78\ub9ac\ub124\uc694. \ud558\uc9c0\ub9cc \uc6b0\uc120 \ub370\uc774\ud130 \uae38\uc774\ub97c \ubc18\ud658\ubc1b\ub294 \ud568\uc218\ub77c\uace0 \uc0dd\uac01\ud558\uace0 \uacc4\uc18d \uc9c4\ud589\ud569\ub2c8\ub2e4. 30 : Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 template < typename DTYPE > void DataLoader < DTYPE >:: Alloc () { // thread allocate m_aaWorkerForProcess = new std :: thread [ m_numOfWorker ]; } \uc2a4\ub808\ub4dc \ubc30\uc5f4\uc744 \uc0dd\uc131\ud558\uc5ec std::thread m_aaWorkerForProcess \ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. 31 : StartProcess \uba54\uc18c\ub4dc\uc758 \uc815\uc758\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 template < typename DTYPE > void DataLoader < DTYPE >:: StartProcess () { // Generate thread for Dist - DistributeIdxOfData2Thread() // Generate thread set for Process - m_nowWorking = TRUE ; m_aThreadForDistInfo = std :: thread ([ & ]() { this -> DistributeIdxOfData2Thread (); }); // lambda expression printf ( \"Generate dataloader base thread \\r\\n \" ); for ( int i = 0 ; i < m_numOfWorker ; i ++ ) { m_aaWorkerForProcess [ i ] = std :: thread ([ & ]() { this -> DataPreprocess (); }); // lambda expression printf ( \"Generate worker[%d] for data preprocessing \\r\\n \" , i ); } } 4 : int m_nowWorking \uc744 TRUE \ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc TRUE \uc640 FALSE \ub85c \uc0ac\uc6a9\ud560 \ubcc0\uc218\ub77c\uba74 \\(4\\) \ubc14\uc774\ud2b8\ub098 \ub418\ub294 int \uac00 \uc544\ub2c8\ub77c \\(1\\) \ubc14\uc774\ud2b8\uc9dc\ub9ac bool \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \ub098\uc744 \uac83 \uac19\uc544\uc694. 6-8 : \uc2a4\ub808\ub4dc\ub97c \uc0dd\uc131\ud558\uace0 \uc2a4\ub808\ub4dc \uc815\ubcf4\ub97c m_aThreadForDistInfo \uc5d0 \uc800\uc7a5\ud558\uba70 DistributeIdxOfData2Thread \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. \ud568\uc218 \uc774\ub984\ub9cc \ubd10\uc11c\ub294 \ucc98\ub9ac\ud560 \ub370\uc774\ud130\ub97c \uc2a4\ub808\ub4dc\uc5d0 \uacf5\ud3c9\ud558\uac8c \ubd84\ubc30\ud558\uae30 \uc704\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ubd84\ubc30\ud558\ub294 \uc0ac\uc804\uc791\uc5c5\uc744 \ud558\ub294 \ud568\uc218\uc778 \uac83 \uac19\uc544\uc694. \ud558\uc9c0\ub9cc \uc5b4\ucc28\ud53c \ud568\uc218 \ud558\ub098\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc65c \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc73c\ub85c \uc2a4\ub808\ub4dc\ub97c \ud638\ucd9c\ud588\ub294\uc9c0 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. \uc5f0\uad6c\ub97c \ud574\ubd10\uc57c\ud560\ub4ef. DistributeIdxOfData2Thread \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc544\uc694. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 template < typename DTYPE > void DataLoader < DTYPE >:: DistributeIdxOfData2Thread () { std :: vector < int > * allOfIdx = new std :: vector < int > (); this -> MakeAllOfIndex ( allOfIdx ); // virtual function std :: vector < int > * setOfIdx = NULL ; int dropLastSize = allOfIdx -> size () % m_batchSize ; // num of dropLast int numOfBatchBlockSize = allOfIdx -> size () / m_batchSize ; int cnt = 0 ; if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin (), allOfIdx -> end (), random_generator ); while ( m_nowWorking ) { setOfIdx = new std :: vector < int > ( m_batchSize ); for ( int i = 0 ; i < m_batchSize ; i ++ ) { ( * setOfIdx )[ i ] = ( * allOfIdx )[ m_batchSize * cnt + i ]; } cnt ++ ; this -> Push2IdxBuffer ( setOfIdx ); if ( cnt == numOfBatchBlockSize ) { if ( ! m_dropLast && dropLastSize ) { std :: reverse ( allOfIdx -> begin (), allOfIdx -> end ()); if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin () + dropLastSize , allOfIdx -> end (), random_generator ); } else { if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin (), allOfIdx -> end (), random_generator ); } cnt = 0 ; } } delete allOfIdx ; } 3 : MakeAllOfIndex \ud568\uc218\uc5d0 vector \ud3ec\uc778\ud130 allOfIdx \ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. MakeAllOfIndex \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc544\uc694. 1 2 3 4 5 6 template < typename DTYPE > void DataLoader < DTYPE >:: MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ) { pAllOfIndex -> resize ( m_lenOfDataset ); for ( int i = 0 ; i < m_lenOfDataset ; i ++ ) ( * pAllOfIndex )[ i ] = i ; } \ub2e8\uc21c\ud788 resize \ub85c \ubca1\ud130 \ud06c\uae30\ub97c \uc815\ud55c\ub2e4\uc74c 0, 1, ..., m_lenOfDataset-1 \uae4c\uc9c0 \ubca1\ud130\uc5d0 \ub300\uc785\ud574\uc8fc\ub124\uc694. std::vector \ub294 \uc6d0\uc18c\uac00 \ucd94\uac00\ub420 \ub54c\ub9c8\ub2e4 \uacf5\uac04\uc774 \ubd80\uc871\ud558\uba74 \\(2\\) \uc758 \ubc30\uc2b9\ub9cc\ud07c \uacf5\uac04\uc744 \ub298\ub9ac\ub294\ub370 \uadf8\uac83\uc5d0 \uc18c\ubaa8\ub418\ub294 \ube44\uc6a9\uc744 \uc904\uc774\uace0\uc790 \uc774\ub807\uac8c \uc9e0 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc std::vector::reserve \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc \ube44\uad50\ud558\uc5ec \uc5b4\ub5a4 \uac8c \ub354 \uc88b\uc740\uc9c0 \uc5f0\uad6c\uac00 \ud544\uc694\ud560 \uac83 \uac19\ub124\uc694. 13-16 : vector( size_type count, const T& value, const Allocator& alloc = Allocator()); \uc758 \ud615\ud0dc\ub85c \ubca1\ud130\ub97c \ucd08\uae30\ud654\ud558\uace0 \uc788\ub294\ub370 \uc774\ub294 C++11 \uae4c\uc9c0 \uc9c0\uc6d0\ub418\ub294 \ubb38\ubc95\uc774\ubbc0\ub85c \ub098\uc911 \uc0c1\uc704 \ud638\ud658\uc131\uc744 \ub9de\ucd94\uc5b4\uc57c\ud560 \ub54c \ubc14\uafd4\uc57c\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc5b4\uca0c\ub4e0 m_batchSize \ub9cc\ud07c allOfIdx \ub97c \ubd84\ubc30\ud574\uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4. 20 : Push2IdxBuffer \ud568\uc218\uc5d0 m_batchSize \ub9cc\ud07c allOfIdx \uac00 \ubd84\ubc30\ub41c setOfIdx \ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. Push2IdxBuffer \ub294 \uc774\ub807\uac8c \uc815\uc758\ub418\uc5b4 \uc788\uc5b4\uc694. 1 2 3 4 5 6 7 8 9 template < typename DTYPE > void DataLoader < DTYPE >:: Push2IdxBuffer ( std :: vector < int > * setOfIdx ) { sem_wait ( & m_distIdxEmpty ); sem_wait ( & m_distIdxMutex ); m_splitedIdxBuffer . push ( setOfIdx ); sem_post ( & m_distIdxMutex ); sem_post ( & m_distIdxFull ); } \ub2e8\uc21c\ud788 Critical Section \uc5d0 \ub4e4\uc5b4\uac00\uae30 \uc804\uc5d0 \uc2a4\ub808\ub4dc\ub4e4\uc744 \uc7a0\uad88\uc8fc\uace0 std::queue<std::vector<int> *> m_splitedIdxBuffer \uc5d0 setOfIdx \ub97c \ub123\uc5b4\uc8fc\ub124\uc694. \uc774\ub7f0 \uc2dd\uc73c\ub85c DistributeIdxOfData2Thread \uac00 \uc2a4\ub808\ub4dc\ub4e4\uc5d0 m_batchSize \ub9cc\ud07c allOfIdx \ub97c \ubd84\ubc30\ud574\uc900\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ub098\uc911\uc5d0 \uc8fc\uc11d\uc744 \uc880 \ub354 \uc790\uc138\ud558\uac8c \ub2ec\uc544\ub193\uac70\ub098 API \ub97c \uc880 \ub354 \uc790\uc138\ud788 \uc368\ub450\uba74 \uc0ac\ub78c\ub4e4\uc774 \uc0c1\uc138\ud55c \ucf54\ub4dc \ubd84\uc11d \uc5c6\uc774\ub3c4 \uc8fc\uc11d\ub9cc \ubcf4\uace0 \ucf54\ub4dc \ubd84\uc11d\uc744 \ube60\ub974\uac8c \uc9c4\ud589\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ucf54\ub4dc \ubd84\uc11d\uc744 \ud1b5\ud558\uc5ec \ud568\uc218 \uae30\ub2a5\uc744 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc2dc\uac04\uc774 \uc870\uae08 \uc624\ub798\uac78\ub9b4 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 API \uc640 \uc8fc\uc11d\uc73c\ub85c \uc774\ud574\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \uac83\uc774 \uc88b\uc744 \uac83 \uac19\uc544\uc694. 11-14 : m_numOfWorker \ub9cc\ud07c DataPreprocess \ub97c \uc2a4\ub808\ub4dc\ub85c \ud638\ucd9c\ud558\uba70 m_aaWorkerForProcess \ubca1\ud130\uc5d0 \uc2a4\ub808\ub4dc\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. DataPreprocess \ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 template < typename DTYPE > void DataLoader < DTYPE >:: DataPreprocess () { // for thread // doing all of thing befor push global buffer // arrange everything for worker std :: queue < Tensor < DTYPE > *> * localBuffer = new std :: queue < Tensor < DTYPE > *> [ m_numOfEachDatasetMember ]; std :: vector < int > * setOfIdx = NULL ; int idx = 0 ; std :: vector < Tensor < DTYPE > *> * data = NULL ; Tensor < DTYPE > * pick = NULL ; std :: vector < Tensor < DTYPE > *> * preprocessedData = NULL ; std :: cout << \"DataLoader worker\" << '\\n' ; while ( m_nowWorking ) { // get information from IdxBuffer setOfIdx = this -> GetIdxSetFromIdxBuffer (); for ( int i = 0 ; i < m_batchSize ; i ++ ) { idx = ( * setOfIdx )[ i ]; data = m_pDataset -> GetData ( idx ); for ( int j = 0 ; j < m_numOfEachDatasetMember ; j ++ ) { // Chech the type of Data for determine doing preprocessing (IMAGE) // if true do data Preprocessing // push data into local buffer localBuffer [ j ]. push (( * data )[ j ]); } delete data ; data = NULL ; } // delete set of idx vector delete setOfIdx ; setOfIdx = NULL ; preprocessedData = new std :: vector < Tensor < DTYPE > *> ( m_numOfEachDatasetMember , NULL ); // do not deallocate in this function! for ( int k = 0 ; k < m_numOfEachDatasetMember ; k ++ ) { // concatenate each localbuffer // push preprocessedData vector ( * preprocessedData )[ k ] = this -> Concatenate ( localBuffer [ k ]); } // push preprocessedData into Global buffer this -> Push2GlobalBuffer ( preprocessedData ); preprocessedData = NULL ; } delete [] localBuffer ; } \uc774\ub85c\uc368 StartProcess \ub294","title":"src/DataLoader.hpp"},{"location":"usage/usage/","text":"Usage \u00b6 command... - \uc124\uba85 command2... - \uc124\uba852 WICWIU \uc0ac\uc6a9 \uac00\uc774\ub4dc \u00b6 WICWIU \ub85c \ub525\ub7ec\ub2dd\uc744 \ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU \ub525\ub7ec\ub2dd \uac00\uc774\ub4dc","title":"Usage"},{"location":"usage/usage/#usage","text":"command... - \uc124\uba85 command2... - \uc124\uba852","title":"Usage"},{"location":"usage/usage/#wicwiu","text":"WICWIU \ub85c \ub525\ub7ec\ub2dd\uc744 \ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU \ub525\ub7ec\ub2dd \uac00\uc774\ub4dc","title":"WICWIU \uc0ac\uc6a9 \uac00\uc774\ub4dc"},{"location":"write/admonitions/","text":"Admonitions \uc740 \uc0ac\uc774\ub4dc\ucee8\ud150\uce20\ub97c \uc791\uc131\ud558\uae30\uc5d0 \uc88b\uc740 \ud3ec\ub9e4\ud305\uae30\ub2a5\uc785\ub2c8\ub2e4. Usage \u00b6 Admonitions \uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \ub2e8\uc9c0 !!! \ub85c \ubb38\uc7a5\uc744 \uc2dc\uc791\ud558\uba74 \ub429\ub2c8\ub2e4. Example : !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \uc81c\ubaa9 \ubc14\uafb8\uae30 Admonitions \uc758 \uae30\ubcf8 \uc81c\ubaa9\uc740 \ud0c0\uc785 \uc9c0\uc815\uc790\uc5d0 \uc758\ud574 \uc815\ud574\uc9d1\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc81c\ubaa9\uc744 \ubc14\uafb8\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud070\ub530\uc634\ud45c\uc5d0 \uc81c\ubaa9\uc744 \uc9c0\uc815\ud558\uba74 \ub429\ub2c8\ub2e4. Example : !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \uc81c\ubaa9 \uc9c0\uc6b0\uae30 \uc81c\ubaa9\uc774 \uc5c6\ub294 Admonitions \uc744 \uc6d0\ud55c\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ube48 \ud070\ub530\uc634\ud45c\ub97c \uc4f0\uba74 \ub429\ub2c8\ub2e4. Example : !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \ucee8\ud150\uce20 \uc0bd\uc785 Admonitions \uc5d0\ub294 \ud5e4\ub4dc\ub77c\uc778, \ub9ac\uc2a4\ud2b8, \ub2e8\ub77d, \ube14\ub85d, \uc18c\uc2a4\ucf54\ub4dc \ub4f1\ub4f1\uc758 \ucee8\ud150\uce20\ub97c \uc0bd\uc785\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac00\ub839 \ub2e4\uc74c\uacfc \uac19\uc774 \uc18c\uc2a4\ucf54\ub4dc\ub3c4 \uc0bd\uc785\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` python def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Supported types \u00b6 \ub2e4\uc74c\uc740 \ub2e4\uc591\ud55c Admonitions \ud0c0\uc785\uc785\ub2c8\ub2e4. note , seealso Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Step 4. Admonitions"},{"location":"write/admonitions/#usage","text":"Admonitions \uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \ub2e8\uc9c0 !!! \ub85c \ubb38\uc7a5\uc744 \uc2dc\uc791\ud558\uba74 \ub429\ub2c8\ub2e4. Example : !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Usage"},{"location":"write/admonitions/#supported-types","text":"\ub2e4\uc74c\uc740 \ub2e4\uc591\ud55c Admonitions \ud0c0\uc785\uc785\ub2c8\ub2e4. note , seealso Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Supported types"},{"location":"write/api/","text":"WICWIU \ub294 doxygen \uc73c\ub85c API \ub97c \uc790\ub3d9\uc0dd\uc131\ud569\ub2c8\ub2e4. doxygen \uc740 \uc18c\uc2a4\ucf54\ub4dc\uc758 \uc8fc\uc11d\uc73c\ub85c\ubd80\ud130 HTML , LaTex , XML \ub4f1\uc758 \ubb38\uc11c\ub97c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ud574\uc8fc\ub294\ub370, Markdown \ud615\uc2dd\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c doxygen \uc73c\ub85c XML \ud615\uc2dd\uc758 API \ub97c \uc0dd\uc131\ud55c \ub2e4\uc74c moxygen \uc73c\ub85c Markdown \uc73c\ub85c \ubcc0\ud658\ud574\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4. HOW-TO \u00b6 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c clone \ud55c \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c doxygen -g \ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. Doxygen \ud30c\uc77c\uc5d0\uc11c GENERATE_XML = no \ub97c GENERATE_XML = yes \ub85c \ubc14\uafc9\ub2c8\ub2e4. doxygen Doxygen \uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. moxygen -a xml \uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 api.md \ud30c\uc77c\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4. api.md \ub2e4\ub4ec\uae30 \u00b6 \ud558\uc9c0\ub9cc \uc0dd\uc131\ub41c api.md \ub97c \uace7\ubc14\ub85c mkdocs-material \uc5d0 \uc5c5\ub85c\ub4dc\ud558\uba74 \uba87 \uac00\uc9c0 \ubb38\uc81c\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud074\ub798\uc2a4\ub9c8\ub2e4 \uc788\ub294 ## Summary \uc640 ## Members \uac00 Table-of-Contents \ub97c \ub108\ubb34 \ub354\ub7fd\uac8c \ub9cc\ub4e4\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c api.md \ud30c\uc77c\uc5d0\uc11c ## Summary \uc640 ## Members \ub97c <h2> Summary </h2> \uc640 <h2> Members </h2> \ub85c \ubc14\uafb8\uc5b4 \uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 api.md \uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud074\ub798\uc2a4 \uba64\ubc84\ub97c \uc124\uba85\ud558\ub294\ub370 #### `public inline `[`AdagradOptimizer`](#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85)`(`[`Container](#classContainer)< [Operator`](#classOperator)`< DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection)` {#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85} \ud5e4\ub354\uac00 #### \ub85c \ub418\uc5b4\uc788\uc5b4\uc11c \ucf54\ub4dc\uac00 \ub79c\ub354\ub9c1\ub420 \ub54c \ub300\ubb38\uc790\ub85c \ub79c\ub354\ub9c1\ub429\ub2c8\ub2e4. \uc774\uac83\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 #### \\` \ub4e4\uc744 ### \\` \ub85c \ubc14\uafc9\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc14\ub014 \uac83\uc785\ub2c8\ub2e4. ### `public inline `[`AdagradOptimizer`](#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85)`(`[`Container](#classContainer)< [Operator`](#classOperator)`< DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection)` {#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85} \uadf8\ub7ec\uba74 \uc5c5\ub85c\ub4dc\ud560 \uc218 \uc788\ub294 api.md \uac00 \uc644\uc131\ub429\ub2c8\ub2e4.","title":"Step 8. API \uc791\uc131"},{"location":"write/api/#how-to","text":"WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c clone \ud55c \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c doxygen -g \ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. Doxygen \ud30c\uc77c\uc5d0\uc11c GENERATE_XML = no \ub97c GENERATE_XML = yes \ub85c \ubc14\uafc9\ub2c8\ub2e4. doxygen Doxygen \uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. moxygen -a xml \uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 api.md \ud30c\uc77c\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4.","title":"HOW-TO"},{"location":"write/api/#apimd","text":"\ud558\uc9c0\ub9cc \uc0dd\uc131\ub41c api.md \ub97c \uace7\ubc14\ub85c mkdocs-material \uc5d0 \uc5c5\ub85c\ub4dc\ud558\uba74 \uba87 \uac00\uc9c0 \ubb38\uc81c\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud074\ub798\uc2a4\ub9c8\ub2e4 \uc788\ub294 ## Summary \uc640 ## Members \uac00 Table-of-Contents \ub97c \ub108\ubb34 \ub354\ub7fd\uac8c \ub9cc\ub4e4\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c api.md \ud30c\uc77c\uc5d0\uc11c ## Summary \uc640 ## Members \ub97c <h2> Summary </h2> \uc640 <h2> Members </h2> \ub85c \ubc14\uafb8\uc5b4 \uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 api.md \uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud074\ub798\uc2a4 \uba64\ubc84\ub97c \uc124\uba85\ud558\ub294\ub370 #### `public inline `[`AdagradOptimizer`](#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85)`(`[`Container](#classContainer)< [Operator`](#classOperator)`< DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection)` {#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85} \ud5e4\ub354\uac00 #### \ub85c \ub418\uc5b4\uc788\uc5b4\uc11c \ucf54\ub4dc\uac00 \ub79c\ub354\ub9c1\ub420 \ub54c \ub300\ubb38\uc790\ub85c \ub79c\ub354\ub9c1\ub429\ub2c8\ub2e4. \uc774\uac83\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 #### \\` \ub4e4\uc744 ### \\` \ub85c \ubc14\uafc9\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc14\ub014 \uac83\uc785\ub2c8\ub2e4. ### `public inline `[`AdagradOptimizer`](#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85)`(`[`Container](#classContainer)< [Operator`](#classOperator)`< DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection)` {#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85} \uadf8\ub7ec\uba74 \uc5c5\ub85c\ub4dc\ud560 \uc218 \uc788\ub294 api.md \uac00 \uc644\uc131\ub429\ub2c8\ub2e4.","title":"api.md \ub2e4\ub4ec\uae30"},{"location":"write/button/","text":"Material for MkDocs \uc740 \ub2e4\uc591\ud55c \ubc84\ud2bc \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Usage \u00b6 Adding buttons \ubc84\ud2bc\uc744 \ucd94\uac00\ud558\ub824\uba74 \ub2e8\uc21c\ud788 Markdown \uc5d0\uc11c \ud558\uc774\ud37c\ub9c1\ud06c\ub97c \ucd94\uac00\ud558\ub294 \ubb38\ubc95\uc5d0 `{: .md-button} \uc744 \ub367\ubd99\uc774\uba74 \ub429\ub2c8\ub2e4. Example : [Subscribe to our mailing list](#){: .md-button } Result : Subscribe to our mailing list Adding primary buttons \ubc30\uacbd\uc774 \ucc44\uc6cc\uc9c4 \ubc84\ud2bc\uc744 \ub9cc\ub4dc\ub824\uba74 \ubc84\ud2bc\uc744 \ub9cc\ub4dc\ub294 \ubb38\ubc95\uc5d0 .md-button \uc640 .md-button--primary \uc744 \ucd94\uac00\ud558\uba74 \ub429\ub2c8\ub2e4. Example : [Subscribe to our mailing list](#){: .md-button .md-button--primary } Result : Subscribe to our mailing list Adding icon buttons \uc544\uc774\ucf58\uc774 \uc788\ub294 \ubc84\ud2bc\uc744 \ub9cc\ub4e4\ub824\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud558\uba74 \ub429\ub2c8\ub2e4. Example : [Submit :fontawesome-solid-paper-plane:](#){: .md-button .md-button--primary } Result : Submit","title":"Step 6. \ubc84\ud2bc \ub123\uae30"},{"location":"write/button/#usage","text":"","title":"Usage"},{"location":"write/code/","text":"Makrdown \ud30c\uc77c\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud6a8\uacfc\uc801\uc778 \uc18c\uc2a4\ucf54\ub4dc \ud3ec\ub9e4\ud305 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. #include <iostream> using namespace std ; int fib ( int n ) { if ( n <= 1 ) return n ; return fib ( n - 1 ) + fib ( n - 2 ); } int main () { int n = 9 ; cout << fib ( n ); getchar (); return 0 ; } Markdown \ud30c\uc77c\uc758 \uae30\ucd08 \ubb38\ubc95\uc744 \uc54c\uace0 \uc788\uc5c8\ub2e4\uba74 \ub2f9\uc5f0\ud55c \ub0b4\uc6a9\uc77c \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc mkdocs \uc758 material \ud14c\ub9c8\uc5d0\uc11c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc880 \ub354 \ud6a8\uacfc\uc801\uc73c\ub85c \uafb8\ubc00 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub77c\uc778 \ub118\ubc84 \ubd99\uc774\uae30 \u00b6 \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc2dc\uc791\ud558\ub294 ``` \uc5d0 linenums=\"1\" \uc744 \ubd99\uc774\uba74 \ub77c\uc778 \ub118\ubc84\uac00 \uc0dd\uae41\ub2c8\ub2e4. Example : ``` python linenums=\"1\" def Fibonacci(n): if n<0: print(\"Incorrect input\") elif n==0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(9)) ``` Result : 1 2 3 4 5 6 7 8 9 10 def Fibonacci ( n ): if n < 0 : print ( \"Incorrect input\" ) elif n == 0 : return 0 elif n == 1 : return 1 else : return Fibonacci ( n - 1 ) + Fibonacci ( n - 2 ) print ( Fibonacci ( 9 )) \ud2b9\uc815 \ucf54\ub4dc \uac15\uc870\ud558\uae30 \u00b6 \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc2dc\uc791\ud558\ub294 ``` \uc5d0 hl_lines=\"2 5\" \uc744 \ubd99\uc774\uba74 \ub450\ubc88\uc9f8, \ub2e4\uc12f\ubc88\uc9f8 \ucf54\ub4dc\uac00 \uac15\uc870\ub429\ub2c8\ub2e4. Example : ``` python linenums=\"1\" hl_lines=\"2 5\" def Fibonacci(n): if n<0: print(\"Incorrect input\") elif n==0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(9)) ``` Result : 1 2 3 4 5 6 7 8 9 10 def Fibonacci ( n ): if n < 0 : print ( \"Incorrect input\" ) elif n == 0 : return 0 elif n == 1 : return 1 else : return Fibonacci ( n - 1 ) + Fibonacci ( n - 2 ) print ( Fibonacci ( 9 ))","title":"Step 2. \uc18c\uc2a4\ucf54\ub4dc \uc124\uba85\ud558\uae30"},{"location":"write/code/#_1","text":"\uc18c\uc2a4\ucf54\ub4dc\ub97c \uc2dc\uc791\ud558\ub294 ``` \uc5d0 linenums=\"1\" \uc744 \ubd99\uc774\uba74 \ub77c\uc778 \ub118\ubc84\uac00 \uc0dd\uae41\ub2c8\ub2e4. Example : ``` python linenums=\"1\" def Fibonacci(n): if n<0: print(\"Incorrect input\") elif n==0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(9)) ``` Result : 1 2 3 4 5 6 7 8 9 10 def Fibonacci ( n ): if n < 0 : print ( \"Incorrect input\" ) elif n == 0 : return 0 elif n == 1 : return 1 else : return Fibonacci ( n - 1 ) + Fibonacci ( n - 2 ) print ( Fibonacci ( 9 ))","title":"\ub77c\uc778 \ub118\ubc84 \ubd99\uc774\uae30"},{"location":"write/code/#_2","text":"\uc18c\uc2a4\ucf54\ub4dc\ub97c \uc2dc\uc791\ud558\ub294 ``` \uc5d0 hl_lines=\"2 5\" \uc744 \ubd99\uc774\uba74 \ub450\ubc88\uc9f8, \ub2e4\uc12f\ubc88\uc9f8 \ucf54\ub4dc\uac00 \uac15\uc870\ub429\ub2c8\ub2e4. Example : ``` python linenums=\"1\" hl_lines=\"2 5\" def Fibonacci(n): if n<0: print(\"Incorrect input\") elif n==0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(9)) ``` Result : 1 2 3 4 5 6 7 8 9 10 def Fibonacci ( n ): if n < 0 : print ( \"Incorrect input\" ) elif n == 0 : return 0 elif n == 1 : return 1 else : return Fibonacci ( n - 1 ) + Fibonacci ( n - 2 ) print ( Fibonacci ( 9 ))","title":"\ud2b9\uc815 \ucf54\ub4dc \uac15\uc870\ud558\uae30"},{"location":"write/format/","text":"Markdown \ud30c\uc77c\uc758 \uae30\ucd08 \ubb38\ubc95\uc5d0\uc11c \ub354 \ub098\uc544\uac00\uc11c Python Markdown extension \uc744 \ud1b5\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \uace0\uc624\uae09 \ud3ec\ub9e4\ud305\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Definition \ub9ac\uc2a4\ud2b8 \u00b6 \ub2e4\uc74c\uacfc \uac19\uc774 Definition \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : `Lorem ipsum dolor sit amet` : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. `Cras arcu libero` : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Result : Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. \ud615\uad11\ud39c \u00b6 == \ub85c \ubb38\uc7a5\uc744 \ubb36\uc73c\uba74 \ud615\uad11\ud39c\uc744 \uce60\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : \ud615\uad11\ud39c\uc785\ub2c8\ub2e4. \u200b==Highlighting== Result : \ud615\uad11\ud39c\uc785\ub2c8\ub2e4. Highlighting \ubc11\uc904 \u00b6 Example : \ubc11\uc904\uc785\ub2c8\ub2e4. \u200b^^\ubc11\uc904 \uadf8\uc740 \ubb38\uc7a5^^ Result : \ubc11\uc904\uc785\ub2c8\ub2e4. \u200b \ubc11\uc904 \uadf8\uc740 \ubb38\uc7a5 \ucde8\uc18c\uc120 \u00b6 Example : \ucde8\uc18c\uc120\uc785\ub2c8\ub2e4. \u200b~~\ucde8\uc18c\uc120 \uadf8\uc740 \ubb38\uc7a5~~ Result : \ucde8\uc18c\uc120\uc785\ub2c8\ub2e4. \u200b \ucde8\uc18c\uc120 \uadf8\uc740 \ubb38\uc7a5","title":"Step 3. \uace0\uc624\uae09 \ud3ec\ub9e4\ud305"},{"location":"write/format/#definition","text":"\ub2e4\uc74c\uacfc \uac19\uc774 Definition \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : `Lorem ipsum dolor sit amet` : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. `Cras arcu libero` : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Result : Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.","title":"Definition \ub9ac\uc2a4\ud2b8"},{"location":"write/format/#_1","text":"== \ub85c \ubb38\uc7a5\uc744 \ubb36\uc73c\uba74 \ud615\uad11\ud39c\uc744 \uce60\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : \ud615\uad11\ud39c\uc785\ub2c8\ub2e4. \u200b==Highlighting== Result : \ud615\uad11\ud39c\uc785\ub2c8\ub2e4. Highlighting","title":"\ud615\uad11\ud39c"},{"location":"write/format/#_2","text":"Example : \ubc11\uc904\uc785\ub2c8\ub2e4. \u200b^^\ubc11\uc904 \uadf8\uc740 \ubb38\uc7a5^^ Result : \ubc11\uc904\uc785\ub2c8\ub2e4. \u200b \ubc11\uc904 \uadf8\uc740 \ubb38\uc7a5","title":"\ubc11\uc904"},{"location":"write/format/#_3","text":"Example : \ucde8\uc18c\uc120\uc785\ub2c8\ub2e4. \u200b~~\ucde8\uc18c\uc120 \uadf8\uc740 \ubb38\uc7a5~~ Result : \ucde8\uc18c\uc120\uc785\ub2c8\ub2e4. \u200b \ucde8\uc18c\uc120 \uadf8\uc740 \ubb38\uc7a5","title":"\ucde8\uc18c\uc120"},{"location":"write/markdown/","text":"Markdown \uc740 \uc5ec\ub7ec\uac00\uc9c0 \ud615\uc2dd\uc73c\ub85c \ud14d\uc2a4\ud2b8\ub97c \uc791\uc131\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ub9c8\ud06c\uc5c5 \uc5b8\uc5b4 \uc785\ub2c8\ub2e4. Markdown \ud30c\uc77c\uc740 \ud655\uc7a5\uc790 .md \ub97c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. Markdown \uc744 \uc54c\uc544\uc57c \ud558\ub294 \uc8fc\ub41c \uc774\uc720 \uc911 \ud558\ub098\ub294 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c Github \uc5d0 \uacf5\uc720\ud560 \ub54c \ud504\ub85c\uadf8\ub7a8\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uc124\uba85\ud558\uae30 \uc704\ud574\uc11c\uc785\ub2c8\ub2e4. Markdown \uc774 \uc5bc\ub9c8\ub098 \ud6a8\uacfc\uc801\uc778 \ud3ec\ub9f7\ud305 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294\uc9c0\ub294 \uc9c0\uae08 \uc77d\uace0 \uc788\ub294 \uc774 \ud30c\uc77c\ub4e4\uc774 \uc804\ubd80\ub2e4 .md \ud30c\uc77c\uc778 \uac83\ub9cc \ubcf4\uc544\ub3c4 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Markdown \uc758 \ubb38\ubc95\uc740 \ub9e4\uc6b0 \uac04\ub2e8\ud558\uc9c0\ub9cc \ub9e4\uc6b0 \ub2e4\uc591\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Markdown \ud30c\uc77c\uc758 \uae30\ucd08 \ubb38\ubc95\uc744 \ubaa8\ub974\uc2e0\ub2e4\uba74 \uba3c\uc800 \uc774\uacf3 \uc744 \ucc38\uace0\ud574\uc8fc\uc138\uc694. Note \ub354 \uc790\uc138\ud55c Markdown \uc758 \ubb38\ubc95\uc744 \uc54c\uc544\ubcf4\ub824\uba74 Google \uc5d0 \uac80\uc0c9\ud558\uac70\ub098 Markdown-Cheatsheet markdown-it \uc744 \ucc38\uace0\ud558\uc138\uc694. \ubb38\uc11c \ucd94\uac00\ud558\uae30 \u00b6 Markdown \ud30c\uc77c\uc758 \uae30\ucd08 \ubb38\ubc95\uc744 \uc774\ud574\ud558\uc600\ub2e4\uba74, WICWIU Github Page \ub97c fork \ud558\uace0 clone \ud55c \ub2e4\uc74c docs \ub514\ub809\ud1a0\ub9ac \ubc11\uc5d0 .md \ud30c\uc77c\uc744 \ucd94\uac00\ud574\uc8fc\uc138\uc694. \uac00\ub839 RNN \uc744 \uc124\uba85\ud558\uae30 \uc704\ud55c \ud30c\uc77c\uc744 \uc791\uc131\ud558\uace0 \uc2f6\ub2e4\uba74 RNN.md \uc744 docs \ub514\ub809\ud1a0\ub9ac\uc5d0 \ucd94\uac00\ud558\uc5ec \ub0b4\uc6a9\uc744 \uc791\uc131\ud569\ub2c8\ub2e4. \uc774\ud6c4 mkdocs.yml \uc5d0 nav: - RNN: RNN.md \uc744 \ucd94\uac00\ud558\uba74 \ub429\ub2c8\ub2e4. \ud558\uc704 \uce74\ud14c\uace0\ub9ac\uc5d0 \ubb38\uc11c \ucd94\uac00\ud558\uae30 \ubb38\uc11c\ub97c Neural Network \ub77c\ub294 \ud558\uc704 \uce74\ud14c\uace0\ub9ac\uc5d0 \ucd94\uac00\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud558\uba74 \ub429\ub2c8\ub2e4. nav: - Neural Network - RNN: RNN.md Preview \u00b6 \ud558\uc9c0\ub9cc \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c .md \ud30c\uc77c\ub4e4\uc744 commit \ud558\uae30 \uc804\uc5d0 \uaf2d \ucd94\uac00\ub41c .md \ud30c\uc77c\uc774 \uc5b4\ub5bb\uac8c \ub79c\ub354\ub9c1\ub418\ub294\uc9c0 Preivew \ub97c \ud1b5\ud574 \ud655\uc778\ud574\uc57c \ud569\ub2c8\ub2e4. Preview \ub97c \ubcf4\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. pip install mkdocs-material \uba85\ub839\uc5b4\ub85c MkDocs \uc640 Material for MkDocs \ub97c \uc124\uce58\ud569\ub2c8\ub2e4. Note Windows \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 python -m pip install mkdocs-material \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\uc57c \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. mkdocs serve \ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 http://localhost:8000 \uc5d0 Preview \uc11c\ubc84\uac00 \uc5f4\ub9bd\ub2c8\ub2e4. \uc774\uacf3\uc5d0\uc11c \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c .md \ud30c\uc77c\uc774 \uc6d0\ud558\ub294\ub300\ub85c \uc798 \ub098\uc624\ub294\uc9c0 \ud655\uc778\ud574\uc8fc\uc138\uc694. \uadf8\ub9ac\uace0 commit , push \ud6c4 Pull Requests \ub97c \ud558\uba74 \ub429\ub2c8\ub2e4.","title":"Step 1. Markdown \ud30c\uc77c"},{"location":"write/markdown/#_1","text":"Markdown \ud30c\uc77c\uc758 \uae30\ucd08 \ubb38\ubc95\uc744 \uc774\ud574\ud558\uc600\ub2e4\uba74, WICWIU Github Page \ub97c fork \ud558\uace0 clone \ud55c \ub2e4\uc74c docs \ub514\ub809\ud1a0\ub9ac \ubc11\uc5d0 .md \ud30c\uc77c\uc744 \ucd94\uac00\ud574\uc8fc\uc138\uc694. \uac00\ub839 RNN \uc744 \uc124\uba85\ud558\uae30 \uc704\ud55c \ud30c\uc77c\uc744 \uc791\uc131\ud558\uace0 \uc2f6\ub2e4\uba74 RNN.md \uc744 docs \ub514\ub809\ud1a0\ub9ac\uc5d0 \ucd94\uac00\ud558\uc5ec \ub0b4\uc6a9\uc744 \uc791\uc131\ud569\ub2c8\ub2e4. \uc774\ud6c4 mkdocs.yml \uc5d0 nav: - RNN: RNN.md \uc744 \ucd94\uac00\ud558\uba74 \ub429\ub2c8\ub2e4.","title":"\ubb38\uc11c \ucd94\uac00\ud558\uae30"},{"location":"write/markdown/#preview","text":"\ud558\uc9c0\ub9cc \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c .md \ud30c\uc77c\ub4e4\uc744 commit \ud558\uae30 \uc804\uc5d0 \uaf2d \ucd94\uac00\ub41c .md \ud30c\uc77c\uc774 \uc5b4\ub5bb\uac8c \ub79c\ub354\ub9c1\ub418\ub294\uc9c0 Preivew \ub97c \ud1b5\ud574 \ud655\uc778\ud574\uc57c \ud569\ub2c8\ub2e4. Preview \ub97c \ubcf4\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. pip install mkdocs-material \uba85\ub839\uc5b4\ub85c MkDocs \uc640 Material for MkDocs \ub97c \uc124\uce58\ud569\ub2c8\ub2e4. Note Windows \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 python -m pip install mkdocs-material \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\uc57c \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. mkdocs serve \ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 http://localhost:8000 \uc5d0 Preview \uc11c\ubc84\uac00 \uc5f4\ub9bd\ub2c8\ub2e4. \uc774\uacf3\uc5d0\uc11c \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c .md \ud30c\uc77c\uc774 \uc6d0\ud558\ub294\ub300\ub85c \uc798 \ub098\uc624\ub294\uc9c0 \ud655\uc778\ud574\uc8fc\uc138\uc694. \uadf8\ub9ac\uace0 commit , push \ud6c4 Pull Requests \ub97c \ud558\uba74 \ub429\ub2c8\ub2e4.","title":"Preview"},{"location":"write/math-sample-matrix-derivatives/","text":"Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84 \u00b6 Affine \ubcc0\ud658\uc758 \uc5ed\uc804\ud30c : \uc785\ub825 \ud589\ub82c \\(\\mathbf{X,W}\\) \uacfc \ucd9c\ub825\ud589\ub82c \\(\\mathbf{Y} = \\mathbf{XW}\\) \ub97c \uac16\ub294 Affine \ub808\uc774\uc5b4\uc758 \uc5ed\uc804\ud30c\ub294 \uc190\uc2e4\uac12 \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84 \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\cdot \\mathbf{W} ^{\\intercal }, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc774\ub2e4. Affine Layer \ub294 \ubcf4\ud1b5 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc131\ub41c\ub2e4. Affine Layer \ucf54\ub4dc \uad6c\ud604 \u00b6 \ud589\ub82c\uacf1 \uc5f0\uc0b0\uacfc \ud589\ub82c\ub367\uc148 \uc5f0\uc0b0\uc744 \ud558\ub294 Affine \ub808\uc774\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . dW = None self . db = None def forward ( self , x ): self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) return dx \ub2e4\uc74c \ucf54\ub4dc\ub294 \uc785\ub825 \ub370\uc774\ud130\uac00 \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ud150\uc11c\uc778 \uacbd\uc6b0, \uc989 4\ucc28\uc6d0 \ub370\uc774\ud130\uc778 \uacbd\uc6b0\ub3c4 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\ud604\ud55c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . original_x_shape = None self . dW = None self . db = None def forward ( self , x ): # \ud150\uc11c \ub300\uc751 self . original_x_shape = x . shape x = x . reshape ( x . shape [ 0 ], - 1 ) self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) dx = dx . reshape ( * self . original_x_shape ) # \uc785\ub825 \ub370\uc774\ud130 \ubaa8\uc591 \ubcc0\uacbd(\ud150\uc11c \ub300\uc751) return dx \ud589\ub82c\uacf1 \ubbf8\ubd84 \uc815\ub9ac \u00b6 \\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c \\(\\mathbf{Y=XW}\\) \uacfc \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\] \uc774\ub2e4. (1) \uc99d\uba85 \\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1 \\(\\mathbf{Y}\\) \ub294 \\(n \\times m\\) \ud589\ub82c \\[ \\mathbf{Y} = \\mathbf{XW} = \\begin{pmatrix} x _{11}&x _{12}&\\dots&x _{1d}\\\\ x _{21}&x _{22}&\\dots&x _{2d}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}&x _{n2}&\\dots&x _{nd}\\\\ \\end{pmatrix} \\begin{pmatrix} w _{11} & w _{12} &\\dots & w _{1m} \\\\ w _{21} & w _{22} &\\dots & w _{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ w _{d1} & w _{d2} &\\dots & w _{dm} \\\\ \\end{pmatrix} \\] \\[ = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{km} \\\\ \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{km} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{km} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774 \uc21c\uc804\ud30c \ucd9c\ub825 \\(\\mathbf{Y}\\) \uc774 \uc190\uc2e4\ud568\uc218 \\(l\\) \ub85c \uc804\ub2ec\ub418\uc5b4 \ucd5c\uc885\uc801\uc73c\ub85c \uc2a4\uce7c\ub77c \\(L\\) \uc774 \ub418\uc5c8\ub2e4\uace0 \ud558\uba74 \\[ L = l(\\mathbf{Y}) = l(\\mathbf{XW}) \\] \uc774\ub2e4. \\(L\\) \uc774 \uc2a4\uce7c\ub77c\uace0 \\(\\mathbf{Y}\\) \ub294 \\(n \\times m\\) \ud589\ub82c\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \\(\\mathbf{Y}\\) \ub294 \\(\\mathbf{X, W}\\) \uc5d0 \ub300\ud55c \ud568\uc218\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X, W}\\) \uc758 \ubbf8\ubd84\uc740 \uc774\ub3c5\ub9bd\ubcc0\uc218\uc640 \uc77c\ub9e4\uac1c\ubcc0\uc218\uc758 \ud569\uc131\ud568\uc218\uc758 \ubbf8\ubd84 \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}}, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial x _{11}}& \\dfrac{\\partial L}{\\partial x _{12}}& \\dots& \\dfrac{\\partial L}{\\partial x _{1d}}\\\\ \\dfrac{\\partial L}{\\partial x _{21}}& \\dfrac{\\partial L}{\\partial x _{22}}& \\dots& \\dfrac{\\partial L}{\\partial x _{2d}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial x _{n1}}& \\dfrac{\\partial L}{\\partial x _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial x _{nd}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(x_{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Y}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial x _{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial x _{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial y _{ij}}\\dfrac{\\partial y _{ij}}{\\partial x _{11}} \\] \uc774\ub2e4. \uadf8\ub7f0\ub370 \uadc0\ucc2e\uc740 \ub367\uc148 \uc5f0\uc0b0\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial L}{\\partial y _{ij}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \ub85c \uc4f0\uace0, \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial y _{ij}}{\\partial x _{11}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}}\\) \ub85c \uc4f0\uba74 \uc774\uac83\uc744 Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uc774\ub54c \\[ \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} = \\begin{pmatrix} w _{11}& w _{12}& \\dots& w _{1m} \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial Y} , \\dfrac{\\partial Y}{\\partial x _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} w _{11}& w _{12}& \\dots& w _{1m} \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial y _{11}} w _{11} + \\dfrac{\\partial L}{\\partial y _{12}} w _{12} + \\dots+ \\dfrac{\\partial L}{\\partial y _{1m}} w _{1m} = \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial x _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{12}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{12}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{2k}\\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{21}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{21}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{1k}\\] \\[ \\vdots \\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{ij}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{ik}}w _{jk}\\] \uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \ucd5c\uc885\uc801\uc73c\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times d\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{dk} \\\\ \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{dk} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{dk} \\\\ \\end{pmatrix}\\] \\[ = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}\\begin{pmatrix} w_{11}& w_{21}& \\dots & w_{d1} \\\\ w_{12}& w_{22}& \\dots & w_{d2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ w_{1m}& w_{2m}& \\dots & w_{dm} \\\\ \\end{pmatrix} \\] \\[ = \\boxed{\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } } \\] \uc774\ub2e4. \u25a0 (2) \uc99d\uba85 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial w_{11}}& \\dfrac{\\partial L}{\\partial w_{12}}& \\dots& \\dfrac{\\partial L}{\\partial w_{1m}}\\\\ \\dfrac{\\partial L}{\\partial w_{21}}& \\dfrac{\\partial L}{\\partial w_{22}}& \\dots& \\dfrac{\\partial L}{\\partial w_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial w_{d1}}& \\dfrac{\\partial L}{\\partial w_{d2}}& \\dots& \\dfrac{\\partial L}{\\partial w_{dm}}\\\\ \\end{pmatrix} \\] \uc778\ub370 \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(w _{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Y}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial w _{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial w_{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial y _{ij}}\\dfrac{\\partial y _{ij}}{\\partial w_{11}} \\] \uc774\ub2e4. \uc774\uac83\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uadf8\ub7ec\uba74 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[ \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} = \\begin{pmatrix} x _{11}& 0& \\dots& 0 \\\\ x _{21}& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} x _{11}& 0& \\dots& 0 \\\\ x _{21}& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial y _{11}}x _{11} + \\dfrac{\\partial L}{\\partial y _{21}}x _{21} + \\dots+ \\dfrac{\\partial L}{\\partial y _{n1}}x _{n1} = \\sum_{k=1}^{n} \\dfrac{\\partial L}{\\partial y _{k1}}x _{k1} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial w _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k1}}x _{k1}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{12}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{12}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k2}}x_{k1}\\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{21}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{21}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k1}}x_{k2}\\] \\[ \\vdots \\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{ij}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{kj}}x_{ki}\\] \uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \ucd5c\uc885\uc801\uc73c\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 \\(d \\times m\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{k1}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{k1}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{k1} \\\\ \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{k2}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{k2}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{k2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{kd}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{kd}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{kd} \\\\ \\end{pmatrix}\\] \\[ = \\begin{pmatrix} x_{11}& x_{21}& \\dots & x_{n1} \\\\ x_{12}& x_{22}& \\dots & x_{n2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x_{1d}& x_{2d}& \\dots & x_{nd} \\\\ \\end{pmatrix}\\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix} \\] \\[ = \\boxed{\\mathbf{X}^{\\intercal }\\dfrac{\\partial L}{\\partial \\mathbf{Y}}} \\] \uc774\ub2e4. \u25a0 \ud589\ub82c\ub367\uc148 \ubbf8\ubd84 \uc815\ub9ac \u00b6 \\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \uc21c\uc785\ub825 \ud589\ub82c \\(\\mathbf{Z=Y + B}\\) \uc640 \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4. (1) \uc99d\uba85 \\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \ud589\ub82c \\(\\mathbf{Z = Y + B}\\) \ub294 \\(n \\times m\\) \ud589\ub82c \\[ \\mathbf{Z} = \\mathbf{Y + B} = \\begin{pmatrix} y_{11}&y_{12}&\\dots&y_{1m}\\\\ y_{21}&y_{22}&\\dots&y_{2m}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ y_{n1}&y_{n2}&\\dots&y_{nm}\\\\ \\end{pmatrix} + \\begin{pmatrix} b_{11} & b_{12} &\\dots & b_{1m} \\\\ b_{21} & b_{22} &\\dots & b_{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ b_{n1} & b_{n2} &\\dots & b_{nm} \\\\ \\end{pmatrix} \\] \\[ = \\begin{pmatrix} \\displaystyle y_{11}+b_{11} & \\displaystyle y_{12}+b_{12} & \\dots & \\displaystyle y_{1m}+b_{1m} \\\\ \\displaystyle y_{21}+b_{21} & \\displaystyle y_{22}+b_{22} & \\dots & \\displaystyle y_{2m}+b_{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle y_{n1}+b_{n1} & \\displaystyle y_{n2}+b_{n2} & \\dots & \\displaystyle y_{nm}+b_{nm} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774 \\(\\mathbf{Z}\\) \uc774 \uc190\uc2e4\ud568\uc218 \\(l\\) \ub85c \uc804\ub2ec\ub418\uc5b4 \ucd5c\uc885\uc801\uc73c\ub85c \uc2a4\uce7c\ub77c \\(L\\) \uc774 \ub418\uc5c8\ub2e4\uace0 \ud558\uba74 \\[ L = l(\\mathbf{Z}) = l(\\mathbf{Y + B}) \\] \uc774\ub2e4. \\(L\\) \uc774 \uc2a4\uce7c\ub77c\uace0 \\(\\mathbf{Z}\\) \ub294 \\(n \\times m\\) \ud589\ub82c\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Z}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Z}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z_{11}}& \\dfrac{\\partial L}{\\partial z_{12}}& \\dots& \\dfrac{\\partial L}{\\partial z_{1m}}\\\\ \\dfrac{\\partial L}{\\partial z_{21}}& \\dfrac{\\partial L}{\\partial z_{22}}& \\dots& \\dfrac{\\partial L}{\\partial z_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z_{n1}}& \\dfrac{\\partial L}{\\partial z_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z_{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \\(\\mathbf{Z}\\) \ub294 \\(\\mathbf{Y, B}\\) \uc5d0 \ub300\ud55c \ud568\uc218\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y, B}\\) \uc758 \ubbf8\ubd84\uc740 \uc774\ub3c5\ub9bd\ubcc0\uc218\uc640 \uc77c\ub9e4\uac1c\ubcc0\uc218\uc758 \ud569\uc131\ud568\uc218\uc758 \ubbf8\ubd84 \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\dfrac{\\partial \\mathbf{Z}}{\\partial \\mathbf{Y}}, \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\dfrac{\\partial \\mathbf{Z}}{\\partial \\mathbf{B}} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y_{11}}& \\dfrac{\\partial L}{\\partial y_{12}}& \\dots& \\dfrac{\\partial L}{\\partial y_{1m}}\\\\ \\dfrac{\\partial L}{\\partial y_{21}}& \\dfrac{\\partial L}{\\partial y_{22}}& \\dots& \\dfrac{\\partial L}{\\partial y_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y_{n1}}& \\dfrac{\\partial L}{\\partial y_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y_{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(y_{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Z}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial y_{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial y_{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial z _{ij}}\\dfrac{\\partial z _{ij}}{\\partial y_{11}} \\] \uc774\ub2e4. \uadf8\ub7f0\ub370 \uadc0\ucc2e\uc740 \ub367\uc148 \uc5f0\uc0b0\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial L}{\\partial z _{ij}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\) \ub85c \uc4f0\uace0, \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial z _{ij}}{\\partial y_{11}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}}\\) \ub85c \uc4f0\uba74 \uc774\uac83\uc744 Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uc774\ub54c \\[ \\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}} = \\begin{pmatrix} 1 & 0& \\dots& 0 \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z_{11}}& \\dfrac{\\partial L}{\\partial z_{12}}& \\dots& \\dfrac{\\partial L}{\\partial z_{1m}}\\\\ \\dfrac{\\partial L}{\\partial z_{21}}& \\dfrac{\\partial L}{\\partial z_{22}}& \\dots& \\dfrac{\\partial L}{\\partial z_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z_{n1}}& \\dfrac{\\partial L}{\\partial z_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z_{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} 1& 0& \\dots& 0 \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial z_{11}} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial y _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{11}} \\bigg > _{\\mathbf{F}}= \\dfrac{\\partial L}{\\partial z _{11}}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial y _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{ij}} \\bigg > _{\\mathbf{F}}= \\dfrac{\\partial L}{\\partial z _{ij}}\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z _{11}}& \\dfrac{\\partial L}{\\partial z _{12}}& \\dots& \\dfrac{\\partial L}{\\partial z _{1m}}\\\\ \\dfrac{\\partial L}{\\partial z _{21}}& \\dfrac{\\partial L}{\\partial z _{22}}& \\dots& \\dfrac{\\partial L}{\\partial z _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z _{n1}}& \\dfrac{\\partial L}{\\partial z _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z _{nm}}\\\\ \\end{pmatrix} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4. \u25a0 \ucc38\uace0 \ubc0f \ucd9c\ucc98 : http://cs231n.stanford.edu/handouts/derivatives.pdf http://cs231n.stanford.edu/handouts/linear-backprop.pdf","title":"Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84"},{"location":"write/math-sample-matrix-derivatives/#affine-layer","text":"Affine \ubcc0\ud658\uc758 \uc5ed\uc804\ud30c : \uc785\ub825 \ud589\ub82c \\(\\mathbf{X,W}\\) \uacfc \ucd9c\ub825\ud589\ub82c \\(\\mathbf{Y} = \\mathbf{XW}\\) \ub97c \uac16\ub294 Affine \ub808\uc774\uc5b4\uc758 \uc5ed\uc804\ud30c\ub294 \uc190\uc2e4\uac12 \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84 \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\cdot \\mathbf{W} ^{\\intercal }, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc774\ub2e4. Affine Layer \ub294 \ubcf4\ud1b5 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc131\ub41c\ub2e4.","title":"Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84"},{"location":"write/math-sample-matrix-derivatives/#affine-layer_1","text":"\ud589\ub82c\uacf1 \uc5f0\uc0b0\uacfc \ud589\ub82c\ub367\uc148 \uc5f0\uc0b0\uc744 \ud558\ub294 Affine \ub808\uc774\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . dW = None self . db = None def forward ( self , x ): self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) return dx \ub2e4\uc74c \ucf54\ub4dc\ub294 \uc785\ub825 \ub370\uc774\ud130\uac00 \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ud150\uc11c\uc778 \uacbd\uc6b0, \uc989 4\ucc28\uc6d0 \ub370\uc774\ud130\uc778 \uacbd\uc6b0\ub3c4 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\ud604\ud55c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . original_x_shape = None self . dW = None self . db = None def forward ( self , x ): # \ud150\uc11c \ub300\uc751 self . original_x_shape = x . shape x = x . reshape ( x . shape [ 0 ], - 1 ) self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) dx = dx . reshape ( * self . original_x_shape ) # \uc785\ub825 \ub370\uc774\ud130 \ubaa8\uc591 \ubcc0\uacbd(\ud150\uc11c \ub300\uc751) return dx","title":"Affine Layer \ucf54\ub4dc \uad6c\ud604"},{"location":"write/math-sample-matrix-derivatives/#_1","text":"\\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c \\(\\mathbf{Y=XW}\\) \uacfc \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\] \uc774\ub2e4.","title":"\ud589\ub82c\uacf1 \ubbf8\ubd84 \uc815\ub9ac"},{"location":"write/math-sample-matrix-derivatives/#_2","text":"\\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \uc21c\uc785\ub825 \ud589\ub82c \\(\\mathbf{Z=Y + B}\\) \uc640 \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4.","title":"\ud589\ub82c\ub367\uc148 \ubbf8\ubd84 \uc815\ub9ac"},{"location":"write/math-sample-perceptron-convergence/","text":"\ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac \u00b6 \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac(perceptron convergence theorem) : \ud37c\uc149\ud2b8\ub860\uc774 \uc120\ud615 \ubd84\ub9ac \uac00\ub2a5 \ubb38\uc81c\ub4e4, \uc989 \uc9c1\uc120\uc73c\ub85c \ubd84\ub958\uac00 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc798 \ubd84\ub958\ud558\ub294 \uac00\uc911\uce58\ub97c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4 \ub294 \uc815\ub9ac\uc774\ub2e4. \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 metamath1/ml-simple-works/perceptron/perceptron.ipynb \uc758 \ub0b4\uc6a9\uc744 \ub2e4\uc2dc \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \uc5c4\ubc00\ud55c \uc815\ub9ac \u00b6 \" \\(\\|\\mathbf{w} ^{*}\\|=1\\) \uc778 \uacc4\uc218\ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \uc640 \\(\\forall k \\in \\{1, \\dots, n\\}\\) \uc5d0 \ub300\ud55c \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \\(k\\) \ubc88\uc9f8 \ucd9c\ub825\uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc88\uc9f8 \uc2a4\uce7c\ub77c \\(y_k \\in \\{-1,1\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\uace0, \\(\\|\\mathbf{x}_{k}\\| \\leq R\\) \uc778 \\(R \\in \\mathbb{R}\\) \uc774 \uc874\uc7ac\ud558\uba74, \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc758 \uc5d0\ub7ec \\(y_k \\neq \\hat{y}_{k} = \\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}\\) \uc5d0 \ub300\ud55c \uc5d0\ub7ec \ubc1c\uc0dd\ud69f\uc218 \\(\\epsilon\\) \uc740 \\(\\epsilon \\leq \\dfrac{R ^{2}}{\\gamma ^{2}}\\) \uc774\ub2e4.\" \uc815\ub9ac\uc758 \uc774\ud574 \u00b6 \uba3c\uc800 \uc5ec\uae30\uc5d0\uc11c\ub294 \ud65c\uc131\ud654\ud568\uc218\ub85c \uc591\uadf9\uc131 \uacc4\ub2e8\ud568\uc218 \\(\\displaystyle y = h(x) = \\begin{cases} 1 &x > 0\\\\ -1 &x \\leq 0\\\\ \\end{cases}\\) \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac\ub97c \ud55c\uc904\uc529 \ud480\uc5b4\uc11c \uc774\ud574\ud574\ubcf4\uc790. \uc704 \uadf8\ub9bc\uc5d0\uc11c \\(\\mathbf{w} ^{*}\\) \uc5d0 \uc758\ud574 \uacb0\uc815\ub418\ub294 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc740 \ubd89\uc740\uc120\uc774\ub2e4. \uc774 \ubd89\uc740\uc120\uc774 \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \uc62c\ubc14\ub974\uac8c \uc120\ud615 \ubd84\ub9ac\ud558\ub294 \uc120\uc774\ub77c\uace0 \ud558\uc790. \uadf8 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc744 \ud3b8\ud5a5\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c \\(w_0 = b, x_0 = 1\\) \uc640 \uc790\uc720\ubcc0\uc218 \\(x_1, x_2\\) \uc5d0 \ub300\ud55c \\(\\mathbf{x} = \\big <1, x_1, x_2\\big >\\) \uc640 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}=\\big <b, w_1, w_2\\big >\\) \uc5d0 \ub300\ud558\uc5ec \\(x_1x_2\\) \ud3c9\uba74 \uc704\uc758 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \\[ \\mathbf{w} ^{*}\\cdot \\mathbf{x} = b + w_1x_1 + w_2x_2 = 0 \\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uc774\uc640\uac19\uc740 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\uc558\ub2e4\uba74 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc5ec \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} > 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc704\ucabd, \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} < 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud55c\ub2e4\uace0 \ud310\ubcc4\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud558\uc5ec \\(y_k(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}) = y_k \\hat{y_k} \\geq \\gamma > 0\\) \uc778 \\(\\gamma\\) \uac00 \uc788\ub2e4\ub294 \uac83\uc740 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \\(2\\) \uac1c\uc758 \ud074\ub798\uc2a4\ub85c \uc798 \uc120\ud615\ubd84\ub9ac \ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc704\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k > 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc704\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k > 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uace0, \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k < 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k < 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\uace0 \uc788\ub2e4\uba74 \ud56d\uc0c1 \\(y_k \\hat{y_k} > 0\\) \uac00 \ub420 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub54c \uacb0\uacfc\uac12, \uc989 \\(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}\\) \uc774 \\(0\\) \uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uac00 \uac00\uae4c\uc6cc\uc9c4\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(\\gamma\\) \ub294 \uc544\ubb34\ub9ac \ucee4\ubd24\uc790 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc \uac70\ub9ac\uac00 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uc774\ub2e4. \ub610\ud55c \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc758 \ud06c\uae30, \uc989 \\(\\|\\mathbf{x}_{k}\\|\\) \uc640 \uac19\uac70\ub098 \ud070 \\(R \\in \\mathbb{R}\\) \uc744 \uc815\ud560 \uc218 \uc788\ub2e4. \uc774 \uc870\uac74\uc774 \ucda9\uc871\ub418\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\ub9cc\uc5d0 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\ub294 \uacc4\uc218 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4. \uc99d\uba85 \u00b6 \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\ubbc0\ub85c \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\uc2dc\ud0ac \uc218 \uc788\ub294 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uac00\uc911\uce58 \ud559\uc2b5\uc744 \ubc18\ubcf5\ud558\uba74\uc11c \\(\\mathbf{w} ^{*}\\) \uc744 \ucc3e\uc73c\ub824\ud560\ud150\ub370 \uc774\ub54c \\(t\\) \ubc88\uc9f8 \ud559\uc2b5\uc5d0\uc11c\uc758 \uac00\uc911\uce58 \\(\\mathbf{w} ^{(t)}\\) \uac00 \\(\\mathbf{w}^{*}\\) \uc640 \ud3c9\ud589\ud558\ub2e4\uba74 \ub450 \ubca1\ud130\uc758 \uc0ac\uc774\uac01\uc774 \\(0\\) \uac00 \ub418\uc5b4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w} ^{(t)}\\) \uac12\uc774 \ucd5c\ub300\uac00 \ub41c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w} ^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud568\uc744 \ubcf4\uc774\uba74 \uac00\uc911\uce58\uac00 \uc218\ub834\ud558\uace0 \uc788\uc74c\uc744 \ubcf4\uc778\ub290 \uac83\uc774 \ub41c\ub2e4. \uc774\ub54c \ub450 \ubca1\ud130\uc758 \uac01\ub3c4\uac00 \uc904\uc5b4\ub4e6\uc73c\ub85c\uc368 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \\(\\mathbf{w} ^{(t)}\\) \uc758 \uac12 \uc790\uccb4\uac00 \ucee4\uc838\uc11c \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud560 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w} ^{(t)}\\) \uc758 \ud06c\uae30 \uc0c1\ud55c\uac12\ub3c4 \ud568\uaed8 \ubcf4\uc5ec\uc57c \uac00\uc911\uce58\uac00 \uc218\ub834\ud55c\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \\(t\\) \ubc88\uc9f8 \ubc18\ubcf5\uc5d0\uc11c \\(k\\) \ubc88\uc9f8 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uadf8\uac83\uc758 \ud074\ub798\uc2a4 \ub808\uc774\ube14 \\(y _{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(y _{k}(\\mathbf{w} ^{(t-1)} \\cdot \\mathbf{x}_{k}) < 0\\) \uc774 \ub418\uc5c8\ub2e4\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uac83\uc774\ubbc0\ub85c \uac00\uc911\uce58\ub97c \uc870\uc815\ud574\uc57c \ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w} ^{(t)} := \\mathbf{w}^{(t-1)} + \\eta (y _{k} - \\hat{y} _{k})\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uc774\ub54c \\(\\eta = 1\\) \ub85c \ub450\uace0 \ud37c\uc149\ud2b8\ub860\uc758 \uc608\uce21\uac12 \\(\\hat{y}_{k}\\) \ub294 \ud3b8\uc758\ub97c \uc704\ud558\uc5ec \uc81c\uac70\ud558\uc790. \uadf8\ub807\uac8c \ud574\ub3c4 \uc591\uc774 \uc5b4\ub290\uc815\ub3c4 \ubc14\ub014 \ubfd0 \ubd80\ud638\ub294 \ubc14\ub00c\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uac00\uc911\uce58 \uc870\uc815\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\uba74 \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w}^{(t)} := \\mathbf{w}^{(t-1)} + y _{k}\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \uadf8\ub7ec\uba74 \uc774\ub54c \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w}^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc744 \uacc4\uc0b0\ud574\ubcf4\uba74 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} = \\mathbf{w}^{*}\\cdot (\\mathbf{w}^{(t-1)}+y _{k} \\mathbf{x}_{k}) \\] \\[ = \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}+y _{k} \\mathbf{w}^{*}\\cdot \\mathbf{x}_{k} \\] \\[ \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} + \\gamma \\ \\ (\\because y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma ) \\] \uc774\ub2e4. \uc989, \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}- \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} \\geq \\gamma > 0\\) \uc774\ubbc0\ub85c \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc774 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}\\) \ubcf4\ub2e4 \\(\\gamma\\) \uc774\uc0c1 \ud06c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774\ub85c\uc368 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uac00 \uc99d\uac00\ud55c\ub2e4\ub294 \uac83\uc774, \uc989 \uac00\uc911\uce58 \ubca1\ud130\uac00 \uc218\ub834\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc774 \uc99d\uba85\ub418\uc5c8\ub2e4. \u25b2 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub0b4\uc801 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc758 \uac12\uc774 \ucd5c\uc18c \\(\\gamma\\) \uc774\uc0c1 \uc99d\uac00\ud558\uae30 \ub54c\ubb38\uc5d0 \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\|\\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88 \ud559\uc2b5 \ud6c4 \ub0b4\uc801\uac12\uc774 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma \\] \uc774\ub77c\ub294 \uac83 \uc989, \ucd5c\uc18c \\(t \\gamma\\) \uc774\uc0c1\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 \ucf54\uc2dc-\uc288\ubc14\ub974\uce20 \ubd80\ub4f1\uc2dd\uc5d0 \uc758\ud574 \\[ \\|\\mathbf{w}^{*}\\|\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\] \uc778\ub370 \\(\\|\\mathbf{w}^{*}\\| = 1\\) \uc774\ubbc0\ub85c \\(\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma\\) \uc5d0\uc11c \\[\\|\\mathbf{w}^{(t)}\\| \\geq t \\gamma\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(t \\gamma\\) \uac00 \\(\\|\\mathbf{w}^{(t)}\\|\\) \uc758 \ucd5c\ub300\ud558\uacc4, \uc989 \ud558\ud55c \\[ \\therefore \\inf \\| \\mathbf{w}^{(t)}\\| = t \\gamma \\] \uc774 \ub41c\ub2e4. \u25b2 \\(t\\) \ubc88\uc9f8 \ud559\uc2b5 \uc774\ud6c4 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{(t)}\\) \uc758 \uae38\uc774\uc758 \uc81c\uacf1\uc740 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} = \\|\\mathbf{w}^{(t-1)} + y _{k} \\mathbf{x} _{k}\\|^{2} \\] \\[ = \\|\\mathbf{w}^{(t-1)}\\| ^{2} + y _{k} ^{2} \\|\\mathbf{x} _{k}\\| ^{2} + 2y _{k} \\mathbf{w}^{(t-1)}\\cdot \\mathbf{x} _{k} \\] \uc778\ub370 \\(y _{k} \\in \\{-1,1\\}\\) \uc774\ubbc0\ub85c \\(y _{k}^{2} = 1\\) \uc774\uace0 \\(\\|x _{k}\\| \\leq R \\implies \\|x _{k}\\|^{2}\\leq R ^{2}\\) \uc774\uace0 \uc608\uce21\uac12\uc774 \ucd9c\ub825\uac12\uacfc \ud2c0\ub838\uc73c\ubbc0\ub85c \\(y _{k} \\mathbf{w}^{(t-1)} \\cdot \\mathbf{x} = y _{k}\\hat{y}_{k} < 0\\) \uc774\ub2e4. \ub530\ub77c\uc11c \\[ \\|\\mathbf{w}^{(t)}\\| ^{2} \\leq \\|\\mathbf{w}^{(t-1)}\\| ^{2} + R ^{2} \\] \uc774\ub2e4. \uc989, \\(\\|\\mathbf{w}^{(t)}\\| ^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2}\\) \uc774\ubbc0\ub85c \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\| \\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88\uc740 \ud559\uc2b5\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \\[ \\|\\mathbf{w}^{1}\\|^{2} - \\|\\mathbf{w}^{0}\\| ^{2} \\leq R ^{2} \\] \\[ \\|\\mathbf{w}^{2}\\|^{2} - \\|\\mathbf{w}^{1}\\| ^{2} \\leq R ^{2} \\] \\[ \\dots \\] \\[ \\|\\mathbf{w}^{(t)}\\|^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2} \\] \uc774\uac83\ub4e4\uc744 \ubaa8\ub450 \ub354\ud558\uba74 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc744 \uc5bb\ub294\ub2e4. \uc774\uac83\uc774 \\(\\|\\mathbf{w}\\|^{2}\\) \uc758 \ucd5c\uc18c\uc0c1\uacc4, \uc989 \uc0c1\ud55c \\[ \\sup \\|\\mathbf{w}^{(t)}\\| ^{2} = t R ^{2} \\] \uc774\ub2e4. \u25b2 \uc0c1\ud55c\uacfc \ud558\ud55c\uc744 \uac19\uc740 \ubd80\ub4f1\uc2dd\uc5d0 \uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. \\[ (\\inf \\|\\mathbf{w}^{(t)}\\|) ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq \\sup \\|\\mathbf{w}^{(t)}\\|^{2} \\] \\[ \\iff t ^{2} \\gamma ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc5ec\uae30\uc5d0\uc11c \\[ \\iff t \\leq \\dfrac{R ^{2}}{\\gamma ^{2}} \\] \ub97c \uc5bb\ub294\ub2e4. \uc774\uac83\uc740 \uace7 \ud559\uc2b5 \ud69f\uc218 \\(t\\) \uac00 \uc0c1\uacc4\ub97c \uac16\ub294\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c \uacb0\uacfc\uc801\uc73c\ub85c \uc120\ud615\ubd84\ub9ac \uac00\ub2a5 \ub370\uc774\ud130\uc5d0 \uc870\uac74 \\(\\eta =1, \\|\\mathbf{w}^{0}\\| = 0\\) \uc744 \uc801\uc6a9\ud558\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c, \uc989 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\uc758 \ud559\uc2b5\uc73c\ub85c(\uc5d0\ub7ec\ub85c) \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218 \\(\\mathbf{w}\\) \ub97c \ucd5c\uc801\uc758 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub85c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \u25a0 Note \uc774\ub294 \ubd84\ub958\ud574\uc57c \ud558\ub294 \ud074\ub798\uc2a4\uac04 \uac70\ub9ac\uac00 \uac00\uae4c\uc6b8\uc218\ub85d \uc54c\uace0\ub9ac\uc998 \ubc18\ubcf5 \ud69f\uc218(\ud559\uc2b5\ud69f\uc218, \uc5d0\ub7ec\ud69f\uc218)\ub294 \ub298\uc5b4\ub098\uc9c0\ub9cc \uc5b4\uca0c\ub4e0 \uc218\ub834\uc740 \ud55c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \\(\\gamma\\) \uac00 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \uc904\uc5b4\ub4e4\uace0, \\(R\\) \uc774 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \ub9ce\uc544\uc9c4\ub2e4. \ucc38\uace0 \ubc0f \ucd9c\ucc98 : https://nbviewer.jupyter.org/github/metamath1/ml-simple-works/blob/master/perceptron/perceptron.ipynb \uc54c\uace0\ub9ac\uc998 \uc911\uc2ec\uc758 \uba38\uc2e0\ub7ec\ub2dd \uac00\uc774\ub4dcMachine Learning: An Algorithmic Perspective, 2 nd ed., \uc2a4\ud2f0\ube10 \ub9c8\uc2ac\ub79c\ub4dc http://www.cs.columbia.edu/~mcollins/courses/6998-2012/notes/perc.converge.pdf","title":"\ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac"},{"location":"write/math-sample-perceptron-convergence/#_1","text":"\ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac(perceptron convergence theorem) : \ud37c\uc149\ud2b8\ub860\uc774 \uc120\ud615 \ubd84\ub9ac \uac00\ub2a5 \ubb38\uc81c\ub4e4, \uc989 \uc9c1\uc120\uc73c\ub85c \ubd84\ub958\uac00 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc798 \ubd84\ub958\ud558\ub294 \uac00\uc911\uce58\ub97c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4 \ub294 \uc815\ub9ac\uc774\ub2e4.","title":"\ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac"},{"location":"write/math-sample-perceptron-convergence/#_2","text":"\" \\(\\|\\mathbf{w} ^{*}\\|=1\\) \uc778 \uacc4\uc218\ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \uc640 \\(\\forall k \\in \\{1, \\dots, n\\}\\) \uc5d0 \ub300\ud55c \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \\(k\\) \ubc88\uc9f8 \ucd9c\ub825\uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc88\uc9f8 \uc2a4\uce7c\ub77c \\(y_k \\in \\{-1,1\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\uace0, \\(\\|\\mathbf{x}_{k}\\| \\leq R\\) \uc778 \\(R \\in \\mathbb{R}\\) \uc774 \uc874\uc7ac\ud558\uba74, \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc758 \uc5d0\ub7ec \\(y_k \\neq \\hat{y}_{k} = \\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}\\) \uc5d0 \ub300\ud55c \uc5d0\ub7ec \ubc1c\uc0dd\ud69f\uc218 \\(\\epsilon\\) \uc740 \\(\\epsilon \\leq \\dfrac{R ^{2}}{\\gamma ^{2}}\\) \uc774\ub2e4.\"","title":"\uc5c4\ubc00\ud55c \uc815\ub9ac"},{"location":"write/math-sample-perceptron-convergence/#_3","text":"\uba3c\uc800 \uc5ec\uae30\uc5d0\uc11c\ub294 \ud65c\uc131\ud654\ud568\uc218\ub85c \uc591\uadf9\uc131 \uacc4\ub2e8\ud568\uc218 \\(\\displaystyle y = h(x) = \\begin{cases} 1 &x > 0\\\\ -1 &x \\leq 0\\\\ \\end{cases}\\) \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac\ub97c \ud55c\uc904\uc529 \ud480\uc5b4\uc11c \uc774\ud574\ud574\ubcf4\uc790. \uc704 \uadf8\ub9bc\uc5d0\uc11c \\(\\mathbf{w} ^{*}\\) \uc5d0 \uc758\ud574 \uacb0\uc815\ub418\ub294 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc740 \ubd89\uc740\uc120\uc774\ub2e4. \uc774 \ubd89\uc740\uc120\uc774 \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \uc62c\ubc14\ub974\uac8c \uc120\ud615 \ubd84\ub9ac\ud558\ub294 \uc120\uc774\ub77c\uace0 \ud558\uc790. \uadf8 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc744 \ud3b8\ud5a5\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c \\(w_0 = b, x_0 = 1\\) \uc640 \uc790\uc720\ubcc0\uc218 \\(x_1, x_2\\) \uc5d0 \ub300\ud55c \\(\\mathbf{x} = \\big <1, x_1, x_2\\big >\\) \uc640 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}=\\big <b, w_1, w_2\\big >\\) \uc5d0 \ub300\ud558\uc5ec \\(x_1x_2\\) \ud3c9\uba74 \uc704\uc758 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \\[ \\mathbf{w} ^{*}\\cdot \\mathbf{x} = b + w_1x_1 + w_2x_2 = 0 \\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uc774\uc640\uac19\uc740 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\uc558\ub2e4\uba74 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc5ec \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} > 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc704\ucabd, \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} < 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud55c\ub2e4\uace0 \ud310\ubcc4\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud558\uc5ec \\(y_k(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}) = y_k \\hat{y_k} \\geq \\gamma > 0\\) \uc778 \\(\\gamma\\) \uac00 \uc788\ub2e4\ub294 \uac83\uc740 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \\(2\\) \uac1c\uc758 \ud074\ub798\uc2a4\ub85c \uc798 \uc120\ud615\ubd84\ub9ac \ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc704\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k > 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc704\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k > 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uace0, \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k < 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k < 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\uace0 \uc788\ub2e4\uba74 \ud56d\uc0c1 \\(y_k \\hat{y_k} > 0\\) \uac00 \ub420 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub54c \uacb0\uacfc\uac12, \uc989 \\(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}\\) \uc774 \\(0\\) \uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uac00 \uac00\uae4c\uc6cc\uc9c4\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(\\gamma\\) \ub294 \uc544\ubb34\ub9ac \ucee4\ubd24\uc790 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc \uac70\ub9ac\uac00 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uc774\ub2e4. \ub610\ud55c \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc758 \ud06c\uae30, \uc989 \\(\\|\\mathbf{x}_{k}\\|\\) \uc640 \uac19\uac70\ub098 \ud070 \\(R \\in \\mathbb{R}\\) \uc744 \uc815\ud560 \uc218 \uc788\ub2e4. \uc774 \uc870\uac74\uc774 \ucda9\uc871\ub418\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\ub9cc\uc5d0 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\ub294 \uacc4\uc218 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4.","title":"\uc815\ub9ac\uc758 \uc774\ud574"},{"location":"write/math-sample-perceptron-convergence/#_4","text":"\\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\ubbc0\ub85c \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\uc2dc\ud0ac \uc218 \uc788\ub294 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uac00\uc911\uce58 \ud559\uc2b5\uc744 \ubc18\ubcf5\ud558\uba74\uc11c \\(\\mathbf{w} ^{*}\\) \uc744 \ucc3e\uc73c\ub824\ud560\ud150\ub370 \uc774\ub54c \\(t\\) \ubc88\uc9f8 \ud559\uc2b5\uc5d0\uc11c\uc758 \uac00\uc911\uce58 \\(\\mathbf{w} ^{(t)}\\) \uac00 \\(\\mathbf{w}^{*}\\) \uc640 \ud3c9\ud589\ud558\ub2e4\uba74 \ub450 \ubca1\ud130\uc758 \uc0ac\uc774\uac01\uc774 \\(0\\) \uac00 \ub418\uc5b4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w} ^{(t)}\\) \uac12\uc774 \ucd5c\ub300\uac00 \ub41c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w} ^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud568\uc744 \ubcf4\uc774\uba74 \uac00\uc911\uce58\uac00 \uc218\ub834\ud558\uace0 \uc788\uc74c\uc744 \ubcf4\uc778\ub290 \uac83\uc774 \ub41c\ub2e4. \uc774\ub54c \ub450 \ubca1\ud130\uc758 \uac01\ub3c4\uac00 \uc904\uc5b4\ub4e6\uc73c\ub85c\uc368 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \\(\\mathbf{w} ^{(t)}\\) \uc758 \uac12 \uc790\uccb4\uac00 \ucee4\uc838\uc11c \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud560 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w} ^{(t)}\\) \uc758 \ud06c\uae30 \uc0c1\ud55c\uac12\ub3c4 \ud568\uaed8 \ubcf4\uc5ec\uc57c \uac00\uc911\uce58\uac00 \uc218\ub834\ud55c\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \\(t\\) \ubc88\uc9f8 \ubc18\ubcf5\uc5d0\uc11c \\(k\\) \ubc88\uc9f8 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uadf8\uac83\uc758 \ud074\ub798\uc2a4 \ub808\uc774\ube14 \\(y _{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(y _{k}(\\mathbf{w} ^{(t-1)} \\cdot \\mathbf{x}_{k}) < 0\\) \uc774 \ub418\uc5c8\ub2e4\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uac83\uc774\ubbc0\ub85c \uac00\uc911\uce58\ub97c \uc870\uc815\ud574\uc57c \ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w} ^{(t)} := \\mathbf{w}^{(t-1)} + \\eta (y _{k} - \\hat{y} _{k})\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uc774\ub54c \\(\\eta = 1\\) \ub85c \ub450\uace0 \ud37c\uc149\ud2b8\ub860\uc758 \uc608\uce21\uac12 \\(\\hat{y}_{k}\\) \ub294 \ud3b8\uc758\ub97c \uc704\ud558\uc5ec \uc81c\uac70\ud558\uc790. \uadf8\ub807\uac8c \ud574\ub3c4 \uc591\uc774 \uc5b4\ub290\uc815\ub3c4 \ubc14\ub014 \ubfd0 \ubd80\ud638\ub294 \ubc14\ub00c\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uac00\uc911\uce58 \uc870\uc815\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\uba74 \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w}^{(t)} := \\mathbf{w}^{(t-1)} + y _{k}\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \uadf8\ub7ec\uba74 \uc774\ub54c \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w}^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc744 \uacc4\uc0b0\ud574\ubcf4\uba74 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} = \\mathbf{w}^{*}\\cdot (\\mathbf{w}^{(t-1)}+y _{k} \\mathbf{x}_{k}) \\] \\[ = \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}+y _{k} \\mathbf{w}^{*}\\cdot \\mathbf{x}_{k} \\] \\[ \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} + \\gamma \\ \\ (\\because y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma ) \\] \uc774\ub2e4. \uc989, \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}- \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} \\geq \\gamma > 0\\) \uc774\ubbc0\ub85c \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc774 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}\\) \ubcf4\ub2e4 \\(\\gamma\\) \uc774\uc0c1 \ud06c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774\ub85c\uc368 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uac00 \uc99d\uac00\ud55c\ub2e4\ub294 \uac83\uc774, \uc989 \uac00\uc911\uce58 \ubca1\ud130\uac00 \uc218\ub834\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc774 \uc99d\uba85\ub418\uc5c8\ub2e4. \u25b2 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub0b4\uc801 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc758 \uac12\uc774 \ucd5c\uc18c \\(\\gamma\\) \uc774\uc0c1 \uc99d\uac00\ud558\uae30 \ub54c\ubb38\uc5d0 \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\|\\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88 \ud559\uc2b5 \ud6c4 \ub0b4\uc801\uac12\uc774 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma \\] \uc774\ub77c\ub294 \uac83 \uc989, \ucd5c\uc18c \\(t \\gamma\\) \uc774\uc0c1\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 \ucf54\uc2dc-\uc288\ubc14\ub974\uce20 \ubd80\ub4f1\uc2dd\uc5d0 \uc758\ud574 \\[ \\|\\mathbf{w}^{*}\\|\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\] \uc778\ub370 \\(\\|\\mathbf{w}^{*}\\| = 1\\) \uc774\ubbc0\ub85c \\(\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma\\) \uc5d0\uc11c \\[\\|\\mathbf{w}^{(t)}\\| \\geq t \\gamma\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(t \\gamma\\) \uac00 \\(\\|\\mathbf{w}^{(t)}\\|\\) \uc758 \ucd5c\ub300\ud558\uacc4, \uc989 \ud558\ud55c \\[ \\therefore \\inf \\| \\mathbf{w}^{(t)}\\| = t \\gamma \\] \uc774 \ub41c\ub2e4. \u25b2 \\(t\\) \ubc88\uc9f8 \ud559\uc2b5 \uc774\ud6c4 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{(t)}\\) \uc758 \uae38\uc774\uc758 \uc81c\uacf1\uc740 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} = \\|\\mathbf{w}^{(t-1)} + y _{k} \\mathbf{x} _{k}\\|^{2} \\] \\[ = \\|\\mathbf{w}^{(t-1)}\\| ^{2} + y _{k} ^{2} \\|\\mathbf{x} _{k}\\| ^{2} + 2y _{k} \\mathbf{w}^{(t-1)}\\cdot \\mathbf{x} _{k} \\] \uc778\ub370 \\(y _{k} \\in \\{-1,1\\}\\) \uc774\ubbc0\ub85c \\(y _{k}^{2} = 1\\) \uc774\uace0 \\(\\|x _{k}\\| \\leq R \\implies \\|x _{k}\\|^{2}\\leq R ^{2}\\) \uc774\uace0 \uc608\uce21\uac12\uc774 \ucd9c\ub825\uac12\uacfc \ud2c0\ub838\uc73c\ubbc0\ub85c \\(y _{k} \\mathbf{w}^{(t-1)} \\cdot \\mathbf{x} = y _{k}\\hat{y}_{k} < 0\\) \uc774\ub2e4. \ub530\ub77c\uc11c \\[ \\|\\mathbf{w}^{(t)}\\| ^{2} \\leq \\|\\mathbf{w}^{(t-1)}\\| ^{2} + R ^{2} \\] \uc774\ub2e4. \uc989, \\(\\|\\mathbf{w}^{(t)}\\| ^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2}\\) \uc774\ubbc0\ub85c \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\| \\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88\uc740 \ud559\uc2b5\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \\[ \\|\\mathbf{w}^{1}\\|^{2} - \\|\\mathbf{w}^{0}\\| ^{2} \\leq R ^{2} \\] \\[ \\|\\mathbf{w}^{2}\\|^{2} - \\|\\mathbf{w}^{1}\\| ^{2} \\leq R ^{2} \\] \\[ \\dots \\] \\[ \\|\\mathbf{w}^{(t)}\\|^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2} \\] \uc774\uac83\ub4e4\uc744 \ubaa8\ub450 \ub354\ud558\uba74 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc744 \uc5bb\ub294\ub2e4. \uc774\uac83\uc774 \\(\\|\\mathbf{w}\\|^{2}\\) \uc758 \ucd5c\uc18c\uc0c1\uacc4, \uc989 \uc0c1\ud55c \\[ \\sup \\|\\mathbf{w}^{(t)}\\| ^{2} = t R ^{2} \\] \uc774\ub2e4. \u25b2 \uc0c1\ud55c\uacfc \ud558\ud55c\uc744 \uac19\uc740 \ubd80\ub4f1\uc2dd\uc5d0 \uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. \\[ (\\inf \\|\\mathbf{w}^{(t)}\\|) ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq \\sup \\|\\mathbf{w}^{(t)}\\|^{2} \\] \\[ \\iff t ^{2} \\gamma ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc5ec\uae30\uc5d0\uc11c \\[ \\iff t \\leq \\dfrac{R ^{2}}{\\gamma ^{2}} \\] \ub97c \uc5bb\ub294\ub2e4. \uc774\uac83\uc740 \uace7 \ud559\uc2b5 \ud69f\uc218 \\(t\\) \uac00 \uc0c1\uacc4\ub97c \uac16\ub294\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c \uacb0\uacfc\uc801\uc73c\ub85c \uc120\ud615\ubd84\ub9ac \uac00\ub2a5 \ub370\uc774\ud130\uc5d0 \uc870\uac74 \\(\\eta =1, \\|\\mathbf{w}^{0}\\| = 0\\) \uc744 \uc801\uc6a9\ud558\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c, \uc989 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\uc758 \ud559\uc2b5\uc73c\ub85c(\uc5d0\ub7ec\ub85c) \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218 \\(\\mathbf{w}\\) \ub97c \ucd5c\uc801\uc758 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub85c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \u25a0 Note \uc774\ub294 \ubd84\ub958\ud574\uc57c \ud558\ub294 \ud074\ub798\uc2a4\uac04 \uac70\ub9ac\uac00 \uac00\uae4c\uc6b8\uc218\ub85d \uc54c\uace0\ub9ac\uc998 \ubc18\ubcf5 \ud69f\uc218(\ud559\uc2b5\ud69f\uc218, \uc5d0\ub7ec\ud69f\uc218)\ub294 \ub298\uc5b4\ub098\uc9c0\ub9cc \uc5b4\uca0c\ub4e0 \uc218\ub834\uc740 \ud55c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \\(\\gamma\\) \uac00 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \uc904\uc5b4\ub4e4\uace0, \\(R\\) \uc774 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \ub9ce\uc544\uc9c4\ub2e4. \ucc38\uace0 \ubc0f \ucd9c\ucc98 : https://nbviewer.jupyter.org/github/metamath1/ml-simple-works/blob/master/perceptron/perceptron.ipynb \uc54c\uace0\ub9ac\uc998 \uc911\uc2ec\uc758 \uba38\uc2e0\ub7ec\ub2dd \uac00\uc774\ub4dcMachine Learning: An Algorithmic Perspective, 2 nd ed., \uc2a4\ud2f0\ube10 \ub9c8\uc2ac\ub79c\ub4dc http://www.cs.columbia.edu/~mcollins/courses/6998-2012/notes/perc.converge.pdf","title":"\uc99d\uba85"},{"location":"write/math/","text":"LaTex \uc5d0 \uc775\uc219\ud558\uc2e0 \ubd84\uc774\ub77c\uba74 WICWIU \ub098 \uc218\uc2dd\uc774 \ub4e4\uc5b4\uac00\ub294 \ub0b4\uc6a9\ub4e4\uc744 \uc124\uba85\ud558\uae30 \uc704\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \uc218\uc2dd\uc744 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc778\ub77c\uc778 \uc218\uc2dd \u00b6 \ubb38\uc7a5\uc5d0 \uc218\uc2dd\uc744 \ud3ec\ud568\uc2dc\ud0a4\ub824\uba74 $$ \uc548\uc5d0 \uc218\uc2dd\uc744 \uc4f0\uba74 \ub429\ub2c8\ub2e4. Example Result \uc9c1\uac01 \uc0bc\uac01\ud615\uc758 \ub450 \uc9c1\uac01\ubcc0 \\(a , b\\) \ub97c \uac01\uac01 \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615 \uba74\uc801\uc758 \ud569\uc740 \ube57\ubcc0 \\(c\\) \ub97c \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615\uc758 \uba74\uc801\uacfc \uac19\ub2e4. \uc774\ub97c \ud53c\ud0c0\uace0\ub77c\uc2a4 \uc815\ub9ac \\(a ^{2} + b ^{2} = c ^{2}\\) \ub77c\uace0 \ud55c\ub2e4. Example \uc9c1\uac01 \uc0bc\uac01\ud615\uc758 \ub450 \uc9c1\uac01\ubcc0 $a , b$ \ub97c \uac01\uac01 \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615 \uba74\uc801\uc758 \ud569\uc740 \ube57\ubcc0 $c$ \ub97c \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615\uc758 \uba74\uc801\uacfc \uac19\ub2e4. \uc774\ub97c \ud53c\ud0c0\uace0\ub77c\uc2a4 \uc815\ub9ac $a ^{2} + b ^{2} = c ^{2}$ \ub77c\uace0 \ud55c\ub2e4. \ub514\uc2a4\ud50c\ub808\uc774 \uc218\uc2dd \u00b6 \uc218\uc2dd\uc744 \uac15\uc870\ud558\uae30 \uc704\ud558\uc5ec \ub514\uc2a4\ud50c\ub808\uc774 \uc2a4\ud0c0\uc77c\ub85c \uc218\uc2dd\uc744 \uc4f0\ub824\uba74 $$ $$ \uc548\uc5d0 \uc4f0\uba74 \ub429\ub2c8\ub2e4. Example Result \\(m \\times n\\) \ud589\ub82c \\(\\mathbf{A}\\) , \\(n \\times p\\) \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1\uc740 \\(m \\times p\\) \ud589\ub82c \\[ \\mathbf{AB} = \\begin{pmatrix} \\sum_{k=1}^{n}A _{1k}B _{k1}& \\sum_{k=1}^{n}A _{1k}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{1k}B _{kp} \\\\ \\sum_{k=1}^{n}A _{2k}B _{k1}& \\sum_{k=1}^{n}A _{2k}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{2k}B _{kp} \\\\ \\vdots& \\vdots& \\ddots& \\vdots \\\\ \\sum_{k=1}^{n}A _{mk}B _{k1}& \\sum_{k=1}^{n}A _{mk}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{mk}B _{kp} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. Example $m \\times n$ \ud589\ub82c $\\mathbf{A}$, $n \\times p$ \ud589\ub82c $\\mathbf{B}$ \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1\uc740 $m \\times p$ \ud589\ub82c $$ \\mathbf{AB} = \\begin{pmatrix} \\sum_{k=1}^{n}A {1k}B _{k1}& \\sum ^{n}A {1k}B _{k2}& \\dots& \\sum ^{n}A {1k}B _{kp} \\ \\sum ^{n}A {2k}B _{k1}& \\sum ^{n}A {2k}B _{k2}& \\dots& \\sum ^{n}A {2k}B _{kp} \\ \\vdots& \\vdots& \\ddots& \\vdots \\ \\sum ^{n}A {mk}B _{k1}& \\sum ^{n}A {mk}B _{k2}& \\dots& \\sum ^{n}A _{mk}B _{kp} \\ \\end{pmatrix} $$ \uc774\ub2e4. Info \uc544\ub798\uc758 \ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac\uc640 \uc99d\uba85\uacfc\uc815\uc744 Source \uc5d0\uc11c\uc640 \uac19\uc774 Markdown \uacfc LaTex \ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uc2dc 1: \ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac \u00b6 \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac(perceptron convergence theorem) : \ud37c\uc149\ud2b8\ub860\uc774 \uc120\ud615 \ubd84\ub9ac \uac00\ub2a5 \ubb38\uc81c\ub4e4, \uc989 \uc9c1\uc120\uc73c\ub85c \ubd84\ub958\uac00 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc798 \ubd84\ub958\ud558\ub294 \uac00\uc911\uce58\ub97c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4 \ub294 \uc815\ub9ac\uc774\ub2e4. \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 metamath1/ml-simple-works/perceptron/perceptron.ipynb \uc758 \ub0b4\uc6a9\uc744 \ub2e4\uc2dc \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \uc5c4\ubc00\ud55c \uc815\ub9ac \u00b6 \" \\(\\|\\mathbf{w} ^{*}\\|=1\\) \uc778 \uacc4\uc218\ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \uc640 \\(\\forall k \\in \\{1, \\dots, n\\}\\) \uc5d0 \ub300\ud55c \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \\(k\\) \ubc88\uc9f8 \ucd9c\ub825\uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc88\uc9f8 \uc2a4\uce7c\ub77c \\(y_k \\in \\{-1,1\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\uace0, \\(\\|\\mathbf{x}_{k}\\| \\leq R\\) \uc778 \\(R \\in \\mathbb{R}\\) \uc774 \uc874\uc7ac\ud558\uba74, \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc758 \uc5d0\ub7ec \\(y_k \\neq \\hat{y}_{k} = \\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}\\) \uc5d0 \ub300\ud55c \uc5d0\ub7ec \ubc1c\uc0dd\ud69f\uc218 \\(\\epsilon\\) \uc740 \\(\\epsilon \\leq \\dfrac{R ^{2}}{\\gamma ^{2}}\\) \uc774\ub2e4.\" \uc815\ub9ac\uc758 \uc774\ud574 \u00b6 \uba3c\uc800 \uc5ec\uae30\uc5d0\uc11c\ub294 \ud65c\uc131\ud654\ud568\uc218\ub85c \uc591\uadf9\uc131 \uacc4\ub2e8\ud568\uc218 \\(\\displaystyle y = h(x) = \\begin{cases} 1 &x > 0\\\\ -1 &x \\leq 0\\\\ \\end{cases}\\) \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac\ub97c \ud55c\uc904\uc529 \ud480\uc5b4\uc11c \uc774\ud574\ud574\ubcf4\uc790. \uc704 \uadf8\ub9bc\uc5d0\uc11c \\(\\mathbf{w} ^{*}\\) \uc5d0 \uc758\ud574 \uacb0\uc815\ub418\ub294 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc740 \ubd89\uc740\uc120\uc774\ub2e4. \uc774 \ubd89\uc740\uc120\uc774 \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \uc62c\ubc14\ub974\uac8c \uc120\ud615 \ubd84\ub9ac\ud558\ub294 \uc120\uc774\ub77c\uace0 \ud558\uc790. \uadf8 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc744 \ud3b8\ud5a5\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c \\(w_0 = b, x_0 = 1\\) \uc640 \uc790\uc720\ubcc0\uc218 \\(x_1, x_2\\) \uc5d0 \ub300\ud55c \\(\\mathbf{x} = \\big <1, x_1, x_2\\big >\\) \uc640 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}=\\big <b, w_1, w_2\\big >\\) \uc5d0 \ub300\ud558\uc5ec \\(x_1x_2\\) \ud3c9\uba74 \uc704\uc758 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \\[ \\mathbf{w} ^{*}\\cdot \\mathbf{x} = b + w_1x_1 + w_2x_2 = 0 \\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uc774\uc640\uac19\uc740 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\uc558\ub2e4\uba74 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc5ec \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} > 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc704\ucabd, \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} < 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud55c\ub2e4\uace0 \ud310\ubcc4\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud558\uc5ec \\(y_k(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}) = y_k \\hat{y_k} \\geq \\gamma > 0\\) \uc778 \\(\\gamma\\) \uac00 \uc788\ub2e4\ub294 \uac83\uc740 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \\(2\\) \uac1c\uc758 \ud074\ub798\uc2a4\ub85c \uc798 \uc120\ud615\ubd84\ub9ac \ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc704\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k > 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc704\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k > 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uace0, \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k < 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k < 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\uace0 \uc788\ub2e4\uba74 \ud56d\uc0c1 \\(y_k \\hat{y_k} > 0\\) \uac00 \ub420 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub54c \uacb0\uacfc\uac12, \uc989 \\(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}\\) \uc774 \\(0\\) \uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uac00 \uac00\uae4c\uc6cc\uc9c4\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(\\gamma\\) \ub294 \uc544\ubb34\ub9ac \ucee4\ubd24\uc790 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc \uac70\ub9ac\uac00 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uc774\ub2e4. \ub610\ud55c \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc758 \ud06c\uae30, \uc989 \\(\\|\\mathbf{x}_{k}\\|\\) \uc640 \uac19\uac70\ub098 \ud070 \\(R \\in \\mathbb{R}\\) \uc744 \uc815\ud560 \uc218 \uc788\ub2e4. \uc774 \uc870\uac74\uc774 \ucda9\uc871\ub418\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\ub9cc\uc5d0 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\ub294 \uacc4\uc218 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4. \uc99d\uba85 \u00b6 \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\ubbc0\ub85c \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\uc2dc\ud0ac \uc218 \uc788\ub294 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uac00\uc911\uce58 \ud559\uc2b5\uc744 \ubc18\ubcf5\ud558\uba74\uc11c \\(\\mathbf{w} ^{*}\\) \uc744 \ucc3e\uc73c\ub824\ud560\ud150\ub370 \uc774\ub54c \\(t\\) \ubc88\uc9f8 \ud559\uc2b5\uc5d0\uc11c\uc758 \uac00\uc911\uce58 \\(\\mathbf{w} ^{(t)}\\) \uac00 \\(\\mathbf{w}^{*}\\) \uc640 \ud3c9\ud589\ud558\ub2e4\uba74 \ub450 \ubca1\ud130\uc758 \uc0ac\uc774\uac01\uc774 \\(0\\) \uac00 \ub418\uc5b4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w} ^{(t)}\\) \uac12\uc774 \ucd5c\ub300\uac00 \ub41c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w} ^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud568\uc744 \ubcf4\uc774\uba74 \uac00\uc911\uce58\uac00 \uc218\ub834\ud558\uace0 \uc788\uc74c\uc744 \ubcf4\uc778\ub290 \uac83\uc774 \ub41c\ub2e4. \uc774\ub54c \ub450 \ubca1\ud130\uc758 \uac01\ub3c4\uac00 \uc904\uc5b4\ub4e6\uc73c\ub85c\uc368 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \\(\\mathbf{w} ^{(t)}\\) \uc758 \uac12 \uc790\uccb4\uac00 \ucee4\uc838\uc11c \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud560 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w} ^{(t)}\\) \uc758 \ud06c\uae30 \uc0c1\ud55c\uac12\ub3c4 \ud568\uaed8 \ubcf4\uc5ec\uc57c \uac00\uc911\uce58\uac00 \uc218\ub834\ud55c\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \\(t\\) \ubc88\uc9f8 \ubc18\ubcf5\uc5d0\uc11c \\(k\\) \ubc88\uc9f8 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uadf8\uac83\uc758 \ud074\ub798\uc2a4 \ub808\uc774\ube14 \\(y _{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(y _{k}(\\mathbf{w} ^{(t-1)} \\cdot \\mathbf{x}_{k}) < 0\\) \uc774 \ub418\uc5c8\ub2e4\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uac83\uc774\ubbc0\ub85c \uac00\uc911\uce58\ub97c \uc870\uc815\ud574\uc57c \ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w} ^{(t)} := \\mathbf{w}^{(t-1)} + \\eta (y _{k} - \\hat{y} _{k})\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uc774\ub54c \\(\\eta = 1\\) \ub85c \ub450\uace0 \ud37c\uc149\ud2b8\ub860\uc758 \uc608\uce21\uac12 \\(\\hat{y}_{k}\\) \ub294 \ud3b8\uc758\ub97c \uc704\ud558\uc5ec \uc81c\uac70\ud558\uc790. \uadf8\ub807\uac8c \ud574\ub3c4 \uc591\uc774 \uc5b4\ub290\uc815\ub3c4 \ubc14\ub014 \ubfd0 \ubd80\ud638\ub294 \ubc14\ub00c\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uac00\uc911\uce58 \uc870\uc815\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\uba74 \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w}^{(t)} := \\mathbf{w}^{(t-1)} + y _{k}\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \uadf8\ub7ec\uba74 \uc774\ub54c \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w}^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc744 \uacc4\uc0b0\ud574\ubcf4\uba74 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} = \\mathbf{w}^{*}\\cdot (\\mathbf{w}^{(t-1)}+y _{k} \\mathbf{x}_{k}) \\] \\[ = \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}+y _{k} \\mathbf{w}^{*}\\cdot \\mathbf{x}_{k} \\] \\[ \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} + \\gamma \\ \\ (\\because y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma ) \\] \uc774\ub2e4. \uc989, \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}- \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} \\geq \\gamma > 0\\) \uc774\ubbc0\ub85c \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc774 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}\\) \ubcf4\ub2e4 \\(\\gamma\\) \uc774\uc0c1 \ud06c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774\ub85c\uc368 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uac00 \uc99d\uac00\ud55c\ub2e4\ub294 \uac83\uc774, \uc989 \uac00\uc911\uce58 \ubca1\ud130\uac00 \uc218\ub834\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc774 \uc99d\uba85\ub418\uc5c8\ub2e4. \u25b2 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub0b4\uc801 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc758 \uac12\uc774 \ucd5c\uc18c \\(\\gamma\\) \uc774\uc0c1 \uc99d\uac00\ud558\uae30 \ub54c\ubb38\uc5d0 \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\|\\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88 \ud559\uc2b5 \ud6c4 \ub0b4\uc801\uac12\uc774 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma \\] \uc774\ub77c\ub294 \uac83 \uc989, \ucd5c\uc18c \\(t \\gamma\\) \uc774\uc0c1\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 \ucf54\uc2dc-\uc288\ubc14\ub974\uce20 \ubd80\ub4f1\uc2dd\uc5d0 \uc758\ud574 \\[ \\|\\mathbf{w}^{*}\\|\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\] \uc778\ub370 \\(\\|\\mathbf{w}^{*}\\| = 1\\) \uc774\ubbc0\ub85c \\(\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma\\) \uc5d0\uc11c \\[\\|\\mathbf{w}^{(t)}\\| \\geq t \\gamma\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(t \\gamma\\) \uac00 \\(\\|\\mathbf{w}^{(t)}\\|\\) \uc758 \ucd5c\ub300\ud558\uacc4, \uc989 \ud558\ud55c \\[ \\therefore \\inf \\| \\mathbf{w}^{(t)}\\| = t \\gamma \\] \uc774 \ub41c\ub2e4. \u25b2 \\(t\\) \ubc88\uc9f8 \ud559\uc2b5 \uc774\ud6c4 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{(t)}\\) \uc758 \uae38\uc774\uc758 \uc81c\uacf1\uc740 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} = \\|\\mathbf{w}^{(t-1)} + y _{k} \\mathbf{x} _{k}\\|^{2} \\] \\[ = \\|\\mathbf{w}^{(t-1)}\\| ^{2} + y _{k} ^{2} \\|\\mathbf{x} _{k}\\| ^{2} + 2y _{k} \\mathbf{w}^{(t-1)}\\cdot \\mathbf{x} _{k} \\] \uc778\ub370 \\(y _{k} \\in \\{-1,1\\}\\) \uc774\ubbc0\ub85c \\(y _{k}^{2} = 1\\) \uc774\uace0 \\(\\|x _{k}\\| \\leq R \\implies \\|x _{k}\\|^{2}\\leq R ^{2}\\) \uc774\uace0 \uc608\uce21\uac12\uc774 \ucd9c\ub825\uac12\uacfc \ud2c0\ub838\uc73c\ubbc0\ub85c \\(y _{k} \\mathbf{w}^{(t-1)} \\cdot \\mathbf{x} = y _{k}\\hat{y}_{k} < 0\\) \uc774\ub2e4. \ub530\ub77c\uc11c \\[ \\|\\mathbf{w}^{(t)}\\| ^{2} \\leq \\|\\mathbf{w}^{(t-1)}\\| ^{2} + R ^{2} \\] \uc774\ub2e4. \uc989, \\(\\|\\mathbf{w}^{(t)}\\| ^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2}\\) \uc774\ubbc0\ub85c \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\| \\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88\uc740 \ud559\uc2b5\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \\[ \\|\\mathbf{w}^{1}\\|^{2} - \\|\\mathbf{w}^{0}\\| ^{2} \\leq R ^{2} \\] \\[ \\|\\mathbf{w}^{2}\\|^{2} - \\|\\mathbf{w}^{1}\\| ^{2} \\leq R ^{2} \\] \\[ \\dots \\] \\[ \\|\\mathbf{w}^{(t)}\\|^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2} \\] \uc774\uac83\ub4e4\uc744 \ubaa8\ub450 \ub354\ud558\uba74 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc744 \uc5bb\ub294\ub2e4. \uc774\uac83\uc774 \\(\\|\\mathbf{w}\\|^{2}\\) \uc758 \ucd5c\uc18c\uc0c1\uacc4, \uc989 \uc0c1\ud55c \\[ \\sup \\|\\mathbf{w}^{(t)}\\| ^{2} = t R ^{2} \\] \uc774\ub2e4. \u25b2 \uc0c1\ud55c\uacfc \ud558\ud55c\uc744 \uac19\uc740 \ubd80\ub4f1\uc2dd\uc5d0 \uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. \\[ (\\inf \\|\\mathbf{w}^{(t)}\\|) ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq \\sup \\|\\mathbf{w}^{(t)}\\|^{2} \\] \\[ \\iff t ^{2} \\gamma ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc5ec\uae30\uc5d0\uc11c \\[ \\iff t \\leq \\dfrac{R ^{2}}{\\gamma ^{2}} \\] \ub97c \uc5bb\ub294\ub2e4. \uc774\uac83\uc740 \uace7 \ud559\uc2b5 \ud69f\uc218 \\(t\\) \uac00 \uc0c1\uacc4\ub97c \uac16\ub294\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c \uacb0\uacfc\uc801\uc73c\ub85c \uc120\ud615\ubd84\ub9ac \uac00\ub2a5 \ub370\uc774\ud130\uc5d0 \uc870\uac74 \\(\\eta =1, \\|\\mathbf{w}^{0}\\| = 0\\) \uc744 \uc801\uc6a9\ud558\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c, \uc989 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\uc758 \ud559\uc2b5\uc73c\ub85c(\uc5d0\ub7ec\ub85c) \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218 \\(\\mathbf{w}\\) \ub97c \ucd5c\uc801\uc758 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub85c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \u25a0 Note \uc774\ub294 \ubd84\ub958\ud574\uc57c \ud558\ub294 \ud074\ub798\uc2a4\uac04 \uac70\ub9ac\uac00 \uac00\uae4c\uc6b8\uc218\ub85d \uc54c\uace0\ub9ac\uc998 \ubc18\ubcf5 \ud69f\uc218(\ud559\uc2b5\ud69f\uc218, \uc5d0\ub7ec\ud69f\uc218)\ub294 \ub298\uc5b4\ub098\uc9c0\ub9cc \uc5b4\uca0c\ub4e0 \uc218\ub834\uc740 \ud55c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \\(\\gamma\\) \uac00 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \uc904\uc5b4\ub4e4\uace0, \\(R\\) \uc774 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \ub9ce\uc544\uc9c4\ub2e4. \ucc38\uace0 \ubc0f \ucd9c\ucc98 : https://nbviewer.jupyter.org/github/metamath1/ml-simple-works/blob/master/perceptron/perceptron.ipynb \uc54c\uace0\ub9ac\uc998 \uc911\uc2ec\uc758 \uba38\uc2e0\ub7ec\ub2dd \uac00\uc774\ub4dcMachine Learning: An Algorithmic Perspective, 2 nd ed., \uc2a4\ud2f0\ube10 \ub9c8\uc2ac\ub79c\ub4dc http://www.cs.columbia.edu/~mcollins/courses/6998-2012/notes/perc.converge.pdf Info \uc544\ub798\uc758 Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84 \uc815\ub9ac\uc640 \uc99d\uba85\uacfc\uc815\uc744 Source \uc5d0\uc11c\uc640 \uac19\uc774 Markdown \uacfc LaTex \ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uc2dc 2: Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84 \u00b6 Affine \ubcc0\ud658\uc758 \uc5ed\uc804\ud30c : \uc785\ub825 \ud589\ub82c \\(\\mathbf{X,W}\\) \uacfc \ucd9c\ub825\ud589\ub82c \\(\\mathbf{Y} = \\mathbf{XW}\\) \ub97c \uac16\ub294 Affine \ub808\uc774\uc5b4\uc758 \uc5ed\uc804\ud30c\ub294 \uc190\uc2e4\uac12 \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84 \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\cdot \\mathbf{W} ^{\\intercal }, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc774\ub2e4. Affine Layer \ub294 \ubcf4\ud1b5 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc131\ub41c\ub2e4. Affine Layer \ucf54\ub4dc \uad6c\ud604 \u00b6 \ud589\ub82c\uacf1 \uc5f0\uc0b0\uacfc \ud589\ub82c\ub367\uc148 \uc5f0\uc0b0\uc744 \ud558\ub294 Affine \ub808\uc774\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . dW = None self . db = None def forward ( self , x ): self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) return dx \ub2e4\uc74c \ucf54\ub4dc\ub294 \uc785\ub825 \ub370\uc774\ud130\uac00 \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ud150\uc11c\uc778 \uacbd\uc6b0, \uc989 4\ucc28\uc6d0 \ub370\uc774\ud130\uc778 \uacbd\uc6b0\ub3c4 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\ud604\ud55c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . original_x_shape = None self . dW = None self . db = None def forward ( self , x ): # \ud150\uc11c \ub300\uc751 self . original_x_shape = x . shape x = x . reshape ( x . shape [ 0 ], - 1 ) self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) dx = dx . reshape ( * self . original_x_shape ) # \uc785\ub825 \ub370\uc774\ud130 \ubaa8\uc591 \ubcc0\uacbd(\ud150\uc11c \ub300\uc751) return dx \ud589\ub82c\uacf1 \ubbf8\ubd84 \uc815\ub9ac \u00b6 \\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c \\(\\mathbf{Y=XW}\\) \uacfc \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\] \uc774\ub2e4. (1) \uc99d\uba85 \\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1 \\(\\mathbf{Y}\\) \ub294 \\(n \\times m\\) \ud589\ub82c \\[ \\mathbf{Y} = \\mathbf{XW} = \\begin{pmatrix} x _{11}&x _{12}&\\dots&x _{1d}\\\\ x _{21}&x _{22}&\\dots&x _{2d}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}&x _{n2}&\\dots&x _{nd}\\\\ \\end{pmatrix} \\begin{pmatrix} w _{11} & w _{12} &\\dots & w _{1m} \\\\ w _{21} & w _{22} &\\dots & w _{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ w _{d1} & w _{d2} &\\dots & w _{dm} \\\\ \\end{pmatrix} \\] \\[ = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{km} \\\\ \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{km} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{km} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774 \uc21c\uc804\ud30c \ucd9c\ub825 \\(\\mathbf{Y}\\) \uc774 \uc190\uc2e4\ud568\uc218 \\(l\\) \ub85c \uc804\ub2ec\ub418\uc5b4 \ucd5c\uc885\uc801\uc73c\ub85c \uc2a4\uce7c\ub77c \\(L\\) \uc774 \ub418\uc5c8\ub2e4\uace0 \ud558\uba74 \\[ L = l(\\mathbf{Y}) = l(\\mathbf{XW}) \\] \uc774\ub2e4. \\(L\\) \uc774 \uc2a4\uce7c\ub77c\uace0 \\(\\mathbf{Y}\\) \ub294 \\(n \\times m\\) \ud589\ub82c\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \\(\\mathbf{Y}\\) \ub294 \\(\\mathbf{X, W}\\) \uc5d0 \ub300\ud55c \ud568\uc218\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X, W}\\) \uc758 \ubbf8\ubd84\uc740 \uc774\ub3c5\ub9bd\ubcc0\uc218\uc640 \uc77c\ub9e4\uac1c\ubcc0\uc218\uc758 \ud569\uc131\ud568\uc218\uc758 \ubbf8\ubd84 \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}}, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial x _{11}}& \\dfrac{\\partial L}{\\partial x _{12}}& \\dots& \\dfrac{\\partial L}{\\partial x _{1d}}\\\\ \\dfrac{\\partial L}{\\partial x _{21}}& \\dfrac{\\partial L}{\\partial x _{22}}& \\dots& \\dfrac{\\partial L}{\\partial x _{2d}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial x _{n1}}& \\dfrac{\\partial L}{\\partial x _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial x _{nd}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(x_{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Y}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial x _{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial x _{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial y _{ij}}\\dfrac{\\partial y _{ij}}{\\partial x _{11}} \\] \uc774\ub2e4. \uadf8\ub7f0\ub370 \uadc0\ucc2e\uc740 \ub367\uc148 \uc5f0\uc0b0\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial L}{\\partial y _{ij}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \ub85c \uc4f0\uace0, \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial y _{ij}}{\\partial x _{11}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}}\\) \ub85c \uc4f0\uba74 \uc774\uac83\uc744 Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uc774\ub54c \\[ \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} = \\begin{pmatrix} w _{11}& w _{12}& \\dots& w _{1m} \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial Y} , \\dfrac{\\partial Y}{\\partial x _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} w _{11}& w _{12}& \\dots& w _{1m} \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial y _{11}} w _{11} + \\dfrac{\\partial L}{\\partial y _{12}} w _{12} + \\dots+ \\dfrac{\\partial L}{\\partial y _{1m}} w _{1m} = \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial x _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{12}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{12}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{2k}\\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{21}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{21}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{1k}\\] \\[ \\vdots \\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{ij}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{ik}}w _{jk}\\] \uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \ucd5c\uc885\uc801\uc73c\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times d\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{dk} \\\\ \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{dk} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{dk} \\\\ \\end{pmatrix}\\] \\[ = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}\\begin{pmatrix} w_{11}& w_{21}& \\dots & w_{d1} \\\\ w_{12}& w_{22}& \\dots & w_{d2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ w_{1m}& w_{2m}& \\dots & w_{dm} \\\\ \\end{pmatrix} \\] \\[ = \\boxed{\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } } \\] \uc774\ub2e4. \u25a0 (2) \uc99d\uba85 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial w_{11}}& \\dfrac{\\partial L}{\\partial w_{12}}& \\dots& \\dfrac{\\partial L}{\\partial w_{1m}}\\\\ \\dfrac{\\partial L}{\\partial w_{21}}& \\dfrac{\\partial L}{\\partial w_{22}}& \\dots& \\dfrac{\\partial L}{\\partial w_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial w_{d1}}& \\dfrac{\\partial L}{\\partial w_{d2}}& \\dots& \\dfrac{\\partial L}{\\partial w_{dm}}\\\\ \\end{pmatrix} \\] \uc778\ub370 \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(w _{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Y}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial w _{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial w_{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial y _{ij}}\\dfrac{\\partial y _{ij}}{\\partial w_{11}} \\] \uc774\ub2e4. \uc774\uac83\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uadf8\ub7ec\uba74 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[ \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} = \\begin{pmatrix} x _{11}& 0& \\dots& 0 \\\\ x _{21}& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} x _{11}& 0& \\dots& 0 \\\\ x _{21}& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial y _{11}}x _{11} + \\dfrac{\\partial L}{\\partial y _{21}}x _{21} + \\dots+ \\dfrac{\\partial L}{\\partial y _{n1}}x _{n1} = \\sum_{k=1}^{n} \\dfrac{\\partial L}{\\partial y _{k1}}x _{k1} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial w _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k1}}x _{k1}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{12}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{12}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k2}}x_{k1}\\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{21}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{21}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k1}}x_{k2}\\] \\[ \\vdots \\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{ij}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{kj}}x_{ki}\\] \uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \ucd5c\uc885\uc801\uc73c\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 \\(d \\times m\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{k1}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{k1}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{k1} \\\\ \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{k2}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{k2}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{k2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{kd}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{kd}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{kd} \\\\ \\end{pmatrix}\\] \\[ = \\begin{pmatrix} x_{11}& x_{21}& \\dots & x_{n1} \\\\ x_{12}& x_{22}& \\dots & x_{n2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x_{1d}& x_{2d}& \\dots & x_{nd} \\\\ \\end{pmatrix}\\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix} \\] \\[ = \\boxed{\\mathbf{X}^{\\intercal }\\dfrac{\\partial L}{\\partial \\mathbf{Y}}} \\] \uc774\ub2e4. \u25a0 \ud589\ub82c\ub367\uc148 \ubbf8\ubd84 \uc815\ub9ac \u00b6 \\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \uc21c\uc785\ub825 \ud589\ub82c \\(\\mathbf{Z=Y + B}\\) \uc640 \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\uace0, \\(\\mathbf{B}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4. (1) \uc99d\uba85 \\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \ud589\ub82c \\(\\mathbf{Z = Y + B}\\) \ub294 \\(n \\times m\\) \ud589\ub82c \\[ \\mathbf{Z} = \\mathbf{Y + B} = \\begin{pmatrix} y_{11}&y_{12}&\\dots&y_{1m}\\\\ y_{21}&y_{22}&\\dots&y_{2m}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ y_{n1}&y_{n2}&\\dots&y_{nm}\\\\ \\end{pmatrix} + \\begin{pmatrix} b_{11} & b_{12} &\\dots & b_{1m} \\\\ b_{21} & b_{22} &\\dots & b_{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ b_{n1} & b_{n2} &\\dots & b_{nm} \\\\ \\end{pmatrix} \\] \\[ = \\begin{pmatrix} \\displaystyle y_{11}+b_{11} & \\displaystyle y_{12}+b_{12} & \\dots & \\displaystyle y_{1m}+b_{1m} \\\\ \\displaystyle y_{21}+b_{21} & \\displaystyle y_{22}+b_{22} & \\dots & \\displaystyle y_{2m}+b_{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle y_{n1}+b_{n1} & \\displaystyle y_{n2}+b_{n2} & \\dots & \\displaystyle y_{nm}+b_{nm} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774 \\(\\mathbf{Z}\\) \uc774 \uc190\uc2e4\ud568\uc218 \\(l\\) \ub85c \uc804\ub2ec\ub418\uc5b4 \ucd5c\uc885\uc801\uc73c\ub85c \uc2a4\uce7c\ub77c \\(L\\) \uc774 \ub418\uc5c8\ub2e4\uace0 \ud558\uba74 \\[ L = l(\\mathbf{Z}) = l(\\mathbf{Y + B}) \\] \uc774\ub2e4. \\(L\\) \uc774 \uc2a4\uce7c\ub77c\uace0 \\(\\mathbf{Z}\\) \ub294 \\(n \\times m\\) \ud589\ub82c\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Z}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Z}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z_{11}}& \\dfrac{\\partial L}{\\partial z_{12}}& \\dots& \\dfrac{\\partial L}{\\partial z_{1m}}\\\\ \\dfrac{\\partial L}{\\partial z_{21}}& \\dfrac{\\partial L}{\\partial z_{22}}& \\dots& \\dfrac{\\partial L}{\\partial z_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z_{n1}}& \\dfrac{\\partial L}{\\partial z_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z_{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \\(\\mathbf{Z}\\) \ub294 \\(\\mathbf{Y, B}\\) \uc5d0 \ub300\ud55c \ud568\uc218\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y, B}\\) \uc758 \ubbf8\ubd84\uc740 \uc774\ub3c5\ub9bd\ubcc0\uc218\uc640 \uc77c\ub9e4\uac1c\ubcc0\uc218\uc758 \ud569\uc131\ud568\uc218\uc758 \ubbf8\ubd84 \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\dfrac{\\partial \\mathbf{Z}}{\\partial \\mathbf{Y}}, \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\dfrac{\\partial \\mathbf{Z}}{\\partial \\mathbf{B}} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y_{11}}& \\dfrac{\\partial L}{\\partial y_{12}}& \\dots& \\dfrac{\\partial L}{\\partial y_{1m}}\\\\ \\dfrac{\\partial L}{\\partial y_{21}}& \\dfrac{\\partial L}{\\partial y_{22}}& \\dots& \\dfrac{\\partial L}{\\partial y_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y_{n1}}& \\dfrac{\\partial L}{\\partial y_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y_{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(y_{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Z}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial y_{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial y_{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial z _{ij}}\\dfrac{\\partial z _{ij}}{\\partial y_{11}} \\] \uc774\ub2e4. \uadf8\ub7f0\ub370 \uadc0\ucc2e\uc740 \ub367\uc148 \uc5f0\uc0b0\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial L}{\\partial z _{ij}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\) \ub85c \uc4f0\uace0, \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial z _{ij}}{\\partial y_{11}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}}\\) \ub85c \uc4f0\uba74 \uc774\uac83\uc744 Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uc774\ub54c \\[ \\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}} = \\begin{pmatrix} 1 & 0& \\dots& 0 \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z_{11}}& \\dfrac{\\partial L}{\\partial z_{12}}& \\dots& \\dfrac{\\partial L}{\\partial z_{1m}}\\\\ \\dfrac{\\partial L}{\\partial z_{21}}& \\dfrac{\\partial L}{\\partial z_{22}}& \\dots& \\dfrac{\\partial L}{\\partial z_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z_{n1}}& \\dfrac{\\partial L}{\\partial z_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z_{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} 1& 0& \\dots& 0 \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial z_{11}} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial y _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{11}} \\bigg > _{\\mathbf{F}}= \\dfrac{\\partial L}{\\partial z _{11}}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial y _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{ij}} \\bigg > _{\\mathbf{F}}= \\dfrac{\\partial L}{\\partial z _{ij}}\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z _{11}}& \\dfrac{\\partial L}{\\partial z _{12}}& \\dots& \\dfrac{\\partial L}{\\partial z _{1m}}\\\\ \\dfrac{\\partial L}{\\partial z _{21}}& \\dfrac{\\partial L}{\\partial z _{22}}& \\dots& \\dfrac{\\partial L}{\\partial z _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z _{n1}}& \\dfrac{\\partial L}{\\partial z _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z _{nm}}\\\\ \\end{pmatrix} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4. \u25a0 \ucc38\uace0 \ubc0f \ucd9c\ucc98 : http://cs231n.stanford.edu/handouts/derivatives.pdf http://cs231n.stanford.edu/handouts/linear-backprop.pdf","title":"Step 7. \uc218\uc2dd \ubcf4\uc5ec\uc8fc\uae30"},{"location":"write/math/#_1","text":"\ubb38\uc7a5\uc5d0 \uc218\uc2dd\uc744 \ud3ec\ud568\uc2dc\ud0a4\ub824\uba74 $$ \uc548\uc5d0 \uc218\uc2dd\uc744 \uc4f0\uba74 \ub429\ub2c8\ub2e4. Example Result \uc9c1\uac01 \uc0bc\uac01\ud615\uc758 \ub450 \uc9c1\uac01\ubcc0 \\(a , b\\) \ub97c \uac01\uac01 \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615 \uba74\uc801\uc758 \ud569\uc740 \ube57\ubcc0 \\(c\\) \ub97c \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615\uc758 \uba74\uc801\uacfc \uac19\ub2e4. \uc774\ub97c \ud53c\ud0c0\uace0\ub77c\uc2a4 \uc815\ub9ac \\(a ^{2} + b ^{2} = c ^{2}\\) \ub77c\uace0 \ud55c\ub2e4. Example \uc9c1\uac01 \uc0bc\uac01\ud615\uc758 \ub450 \uc9c1\uac01\ubcc0 $a , b$ \ub97c \uac01\uac01 \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615 \uba74\uc801\uc758 \ud569\uc740 \ube57\ubcc0 $c$ \ub97c \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615\uc758 \uba74\uc801\uacfc \uac19\ub2e4. \uc774\ub97c \ud53c\ud0c0\uace0\ub77c\uc2a4 \uc815\ub9ac $a ^{2} + b ^{2} = c ^{2}$ \ub77c\uace0 \ud55c\ub2e4.","title":"\uc778\ub77c\uc778 \uc218\uc2dd"},{"location":"write/math/#_2","text":"\uc218\uc2dd\uc744 \uac15\uc870\ud558\uae30 \uc704\ud558\uc5ec \ub514\uc2a4\ud50c\ub808\uc774 \uc2a4\ud0c0\uc77c\ub85c \uc218\uc2dd\uc744 \uc4f0\ub824\uba74 $$ $$ \uc548\uc5d0 \uc4f0\uba74 \ub429\ub2c8\ub2e4. Example Result \\(m \\times n\\) \ud589\ub82c \\(\\mathbf{A}\\) , \\(n \\times p\\) \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1\uc740 \\(m \\times p\\) \ud589\ub82c \\[ \\mathbf{AB} = \\begin{pmatrix} \\sum_{k=1}^{n}A _{1k}B _{k1}& \\sum_{k=1}^{n}A _{1k}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{1k}B _{kp} \\\\ \\sum_{k=1}^{n}A _{2k}B _{k1}& \\sum_{k=1}^{n}A _{2k}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{2k}B _{kp} \\\\ \\vdots& \\vdots& \\ddots& \\vdots \\\\ \\sum_{k=1}^{n}A _{mk}B _{k1}& \\sum_{k=1}^{n}A _{mk}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{mk}B _{kp} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. Example $m \\times n$ \ud589\ub82c $\\mathbf{A}$, $n \\times p$ \ud589\ub82c $\\mathbf{B}$ \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1\uc740 $m \\times p$ \ud589\ub82c $$ \\mathbf{AB} = \\begin{pmatrix} \\sum_{k=1}^{n}A {1k}B _{k1}& \\sum ^{n}A {1k}B _{k2}& \\dots& \\sum ^{n}A {1k}B _{kp} \\ \\sum ^{n}A {2k}B _{k1}& \\sum ^{n}A {2k}B _{k2}& \\dots& \\sum ^{n}A {2k}B _{kp} \\ \\vdots& \\vdots& \\ddots& \\vdots \\ \\sum ^{n}A {mk}B _{k1}& \\sum ^{n}A {mk}B _{k2}& \\dots& \\sum ^{n}A _{mk}B _{kp} \\ \\end{pmatrix} $$ \uc774\ub2e4. Info \uc544\ub798\uc758 \ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac\uc640 \uc99d\uba85\uacfc\uc815\uc744 Source \uc5d0\uc11c\uc640 \uac19\uc774 Markdown \uacfc LaTex \ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub514\uc2a4\ud50c\ub808\uc774 \uc218\uc2dd"},{"location":"write/math/#1","text":"\ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac(perceptron convergence theorem) : \ud37c\uc149\ud2b8\ub860\uc774 \uc120\ud615 \ubd84\ub9ac \uac00\ub2a5 \ubb38\uc81c\ub4e4, \uc989 \uc9c1\uc120\uc73c\ub85c \ubd84\ub958\uac00 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc798 \ubd84\ub958\ud558\ub294 \uac00\uc911\uce58\ub97c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4 \ub294 \uc815\ub9ac\uc774\ub2e4.","title":"\uc608\uc2dc 1: \ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac"},{"location":"write/math/#_3","text":"\" \\(\\|\\mathbf{w} ^{*}\\|=1\\) \uc778 \uacc4\uc218\ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \uc640 \\(\\forall k \\in \\{1, \\dots, n\\}\\) \uc5d0 \ub300\ud55c \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \\(k\\) \ubc88\uc9f8 \ucd9c\ub825\uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc88\uc9f8 \uc2a4\uce7c\ub77c \\(y_k \\in \\{-1,1\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\uace0, \\(\\|\\mathbf{x}_{k}\\| \\leq R\\) \uc778 \\(R \\in \\mathbb{R}\\) \uc774 \uc874\uc7ac\ud558\uba74, \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc758 \uc5d0\ub7ec \\(y_k \\neq \\hat{y}_{k} = \\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}\\) \uc5d0 \ub300\ud55c \uc5d0\ub7ec \ubc1c\uc0dd\ud69f\uc218 \\(\\epsilon\\) \uc740 \\(\\epsilon \\leq \\dfrac{R ^{2}}{\\gamma ^{2}}\\) \uc774\ub2e4.\"","title":"\uc5c4\ubc00\ud55c \uc815\ub9ac"},{"location":"write/math/#_4","text":"\uba3c\uc800 \uc5ec\uae30\uc5d0\uc11c\ub294 \ud65c\uc131\ud654\ud568\uc218\ub85c \uc591\uadf9\uc131 \uacc4\ub2e8\ud568\uc218 \\(\\displaystyle y = h(x) = \\begin{cases} 1 &x > 0\\\\ -1 &x \\leq 0\\\\ \\end{cases}\\) \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac\ub97c \ud55c\uc904\uc529 \ud480\uc5b4\uc11c \uc774\ud574\ud574\ubcf4\uc790. \uc704 \uadf8\ub9bc\uc5d0\uc11c \\(\\mathbf{w} ^{*}\\) \uc5d0 \uc758\ud574 \uacb0\uc815\ub418\ub294 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc740 \ubd89\uc740\uc120\uc774\ub2e4. \uc774 \ubd89\uc740\uc120\uc774 \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \uc62c\ubc14\ub974\uac8c \uc120\ud615 \ubd84\ub9ac\ud558\ub294 \uc120\uc774\ub77c\uace0 \ud558\uc790. \uadf8 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc744 \ud3b8\ud5a5\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c \\(w_0 = b, x_0 = 1\\) \uc640 \uc790\uc720\ubcc0\uc218 \\(x_1, x_2\\) \uc5d0 \ub300\ud55c \\(\\mathbf{x} = \\big <1, x_1, x_2\\big >\\) \uc640 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}=\\big <b, w_1, w_2\\big >\\) \uc5d0 \ub300\ud558\uc5ec \\(x_1x_2\\) \ud3c9\uba74 \uc704\uc758 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \\[ \\mathbf{w} ^{*}\\cdot \\mathbf{x} = b + w_1x_1 + w_2x_2 = 0 \\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uc774\uc640\uac19\uc740 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\uc558\ub2e4\uba74 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc5ec \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} > 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc704\ucabd, \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} < 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud55c\ub2e4\uace0 \ud310\ubcc4\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud558\uc5ec \\(y_k(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}) = y_k \\hat{y_k} \\geq \\gamma > 0\\) \uc778 \\(\\gamma\\) \uac00 \uc788\ub2e4\ub294 \uac83\uc740 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \\(2\\) \uac1c\uc758 \ud074\ub798\uc2a4\ub85c \uc798 \uc120\ud615\ubd84\ub9ac \ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc704\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k > 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc704\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k > 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uace0, \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k < 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k < 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\uace0 \uc788\ub2e4\uba74 \ud56d\uc0c1 \\(y_k \\hat{y_k} > 0\\) \uac00 \ub420 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub54c \uacb0\uacfc\uac12, \uc989 \\(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}\\) \uc774 \\(0\\) \uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uac00 \uac00\uae4c\uc6cc\uc9c4\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(\\gamma\\) \ub294 \uc544\ubb34\ub9ac \ucee4\ubd24\uc790 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc \uac70\ub9ac\uac00 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uc774\ub2e4. \ub610\ud55c \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc758 \ud06c\uae30, \uc989 \\(\\|\\mathbf{x}_{k}\\|\\) \uc640 \uac19\uac70\ub098 \ud070 \\(R \\in \\mathbb{R}\\) \uc744 \uc815\ud560 \uc218 \uc788\ub2e4. \uc774 \uc870\uac74\uc774 \ucda9\uc871\ub418\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\ub9cc\uc5d0 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\ub294 \uacc4\uc218 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4.","title":"\uc815\ub9ac\uc758 \uc774\ud574"},{"location":"write/math/#_5","text":"\\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\ubbc0\ub85c \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\uc2dc\ud0ac \uc218 \uc788\ub294 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uac00\uc911\uce58 \ud559\uc2b5\uc744 \ubc18\ubcf5\ud558\uba74\uc11c \\(\\mathbf{w} ^{*}\\) \uc744 \ucc3e\uc73c\ub824\ud560\ud150\ub370 \uc774\ub54c \\(t\\) \ubc88\uc9f8 \ud559\uc2b5\uc5d0\uc11c\uc758 \uac00\uc911\uce58 \\(\\mathbf{w} ^{(t)}\\) \uac00 \\(\\mathbf{w}^{*}\\) \uc640 \ud3c9\ud589\ud558\ub2e4\uba74 \ub450 \ubca1\ud130\uc758 \uc0ac\uc774\uac01\uc774 \\(0\\) \uac00 \ub418\uc5b4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w} ^{(t)}\\) \uac12\uc774 \ucd5c\ub300\uac00 \ub41c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w} ^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud568\uc744 \ubcf4\uc774\uba74 \uac00\uc911\uce58\uac00 \uc218\ub834\ud558\uace0 \uc788\uc74c\uc744 \ubcf4\uc778\ub290 \uac83\uc774 \ub41c\ub2e4. \uc774\ub54c \ub450 \ubca1\ud130\uc758 \uac01\ub3c4\uac00 \uc904\uc5b4\ub4e6\uc73c\ub85c\uc368 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \\(\\mathbf{w} ^{(t)}\\) \uc758 \uac12 \uc790\uccb4\uac00 \ucee4\uc838\uc11c \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud560 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w} ^{(t)}\\) \uc758 \ud06c\uae30 \uc0c1\ud55c\uac12\ub3c4 \ud568\uaed8 \ubcf4\uc5ec\uc57c \uac00\uc911\uce58\uac00 \uc218\ub834\ud55c\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \\(t\\) \ubc88\uc9f8 \ubc18\ubcf5\uc5d0\uc11c \\(k\\) \ubc88\uc9f8 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uadf8\uac83\uc758 \ud074\ub798\uc2a4 \ub808\uc774\ube14 \\(y _{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(y _{k}(\\mathbf{w} ^{(t-1)} \\cdot \\mathbf{x}_{k}) < 0\\) \uc774 \ub418\uc5c8\ub2e4\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uac83\uc774\ubbc0\ub85c \uac00\uc911\uce58\ub97c \uc870\uc815\ud574\uc57c \ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w} ^{(t)} := \\mathbf{w}^{(t-1)} + \\eta (y _{k} - \\hat{y} _{k})\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uc774\ub54c \\(\\eta = 1\\) \ub85c \ub450\uace0 \ud37c\uc149\ud2b8\ub860\uc758 \uc608\uce21\uac12 \\(\\hat{y}_{k}\\) \ub294 \ud3b8\uc758\ub97c \uc704\ud558\uc5ec \uc81c\uac70\ud558\uc790. \uadf8\ub807\uac8c \ud574\ub3c4 \uc591\uc774 \uc5b4\ub290\uc815\ub3c4 \ubc14\ub014 \ubfd0 \ubd80\ud638\ub294 \ubc14\ub00c\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uac00\uc911\uce58 \uc870\uc815\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\uba74 \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w}^{(t)} := \\mathbf{w}^{(t-1)} + y _{k}\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \uadf8\ub7ec\uba74 \uc774\ub54c \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w}^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc744 \uacc4\uc0b0\ud574\ubcf4\uba74 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} = \\mathbf{w}^{*}\\cdot (\\mathbf{w}^{(t-1)}+y _{k} \\mathbf{x}_{k}) \\] \\[ = \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}+y _{k} \\mathbf{w}^{*}\\cdot \\mathbf{x}_{k} \\] \\[ \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} + \\gamma \\ \\ (\\because y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma ) \\] \uc774\ub2e4. \uc989, \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}- \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} \\geq \\gamma > 0\\) \uc774\ubbc0\ub85c \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc774 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}\\) \ubcf4\ub2e4 \\(\\gamma\\) \uc774\uc0c1 \ud06c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774\ub85c\uc368 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uac00 \uc99d\uac00\ud55c\ub2e4\ub294 \uac83\uc774, \uc989 \uac00\uc911\uce58 \ubca1\ud130\uac00 \uc218\ub834\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc774 \uc99d\uba85\ub418\uc5c8\ub2e4. \u25b2 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub0b4\uc801 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc758 \uac12\uc774 \ucd5c\uc18c \\(\\gamma\\) \uc774\uc0c1 \uc99d\uac00\ud558\uae30 \ub54c\ubb38\uc5d0 \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\|\\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88 \ud559\uc2b5 \ud6c4 \ub0b4\uc801\uac12\uc774 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma \\] \uc774\ub77c\ub294 \uac83 \uc989, \ucd5c\uc18c \\(t \\gamma\\) \uc774\uc0c1\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 \ucf54\uc2dc-\uc288\ubc14\ub974\uce20 \ubd80\ub4f1\uc2dd\uc5d0 \uc758\ud574 \\[ \\|\\mathbf{w}^{*}\\|\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\] \uc778\ub370 \\(\\|\\mathbf{w}^{*}\\| = 1\\) \uc774\ubbc0\ub85c \\(\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma\\) \uc5d0\uc11c \\[\\|\\mathbf{w}^{(t)}\\| \\geq t \\gamma\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(t \\gamma\\) \uac00 \\(\\|\\mathbf{w}^{(t)}\\|\\) \uc758 \ucd5c\ub300\ud558\uacc4, \uc989 \ud558\ud55c \\[ \\therefore \\inf \\| \\mathbf{w}^{(t)}\\| = t \\gamma \\] \uc774 \ub41c\ub2e4. \u25b2 \\(t\\) \ubc88\uc9f8 \ud559\uc2b5 \uc774\ud6c4 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{(t)}\\) \uc758 \uae38\uc774\uc758 \uc81c\uacf1\uc740 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} = \\|\\mathbf{w}^{(t-1)} + y _{k} \\mathbf{x} _{k}\\|^{2} \\] \\[ = \\|\\mathbf{w}^{(t-1)}\\| ^{2} + y _{k} ^{2} \\|\\mathbf{x} _{k}\\| ^{2} + 2y _{k} \\mathbf{w}^{(t-1)}\\cdot \\mathbf{x} _{k} \\] \uc778\ub370 \\(y _{k} \\in \\{-1,1\\}\\) \uc774\ubbc0\ub85c \\(y _{k}^{2} = 1\\) \uc774\uace0 \\(\\|x _{k}\\| \\leq R \\implies \\|x _{k}\\|^{2}\\leq R ^{2}\\) \uc774\uace0 \uc608\uce21\uac12\uc774 \ucd9c\ub825\uac12\uacfc \ud2c0\ub838\uc73c\ubbc0\ub85c \\(y _{k} \\mathbf{w}^{(t-1)} \\cdot \\mathbf{x} = y _{k}\\hat{y}_{k} < 0\\) \uc774\ub2e4. \ub530\ub77c\uc11c \\[ \\|\\mathbf{w}^{(t)}\\| ^{2} \\leq \\|\\mathbf{w}^{(t-1)}\\| ^{2} + R ^{2} \\] \uc774\ub2e4. \uc989, \\(\\|\\mathbf{w}^{(t)}\\| ^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2}\\) \uc774\ubbc0\ub85c \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\| \\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88\uc740 \ud559\uc2b5\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \\[ \\|\\mathbf{w}^{1}\\|^{2} - \\|\\mathbf{w}^{0}\\| ^{2} \\leq R ^{2} \\] \\[ \\|\\mathbf{w}^{2}\\|^{2} - \\|\\mathbf{w}^{1}\\| ^{2} \\leq R ^{2} \\] \\[ \\dots \\] \\[ \\|\\mathbf{w}^{(t)}\\|^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2} \\] \uc774\uac83\ub4e4\uc744 \ubaa8\ub450 \ub354\ud558\uba74 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc744 \uc5bb\ub294\ub2e4. \uc774\uac83\uc774 \\(\\|\\mathbf{w}\\|^{2}\\) \uc758 \ucd5c\uc18c\uc0c1\uacc4, \uc989 \uc0c1\ud55c \\[ \\sup \\|\\mathbf{w}^{(t)}\\| ^{2} = t R ^{2} \\] \uc774\ub2e4. \u25b2 \uc0c1\ud55c\uacfc \ud558\ud55c\uc744 \uac19\uc740 \ubd80\ub4f1\uc2dd\uc5d0 \uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. \\[ (\\inf \\|\\mathbf{w}^{(t)}\\|) ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq \\sup \\|\\mathbf{w}^{(t)}\\|^{2} \\] \\[ \\iff t ^{2} \\gamma ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc5ec\uae30\uc5d0\uc11c \\[ \\iff t \\leq \\dfrac{R ^{2}}{\\gamma ^{2}} \\] \ub97c \uc5bb\ub294\ub2e4. \uc774\uac83\uc740 \uace7 \ud559\uc2b5 \ud69f\uc218 \\(t\\) \uac00 \uc0c1\uacc4\ub97c \uac16\ub294\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c \uacb0\uacfc\uc801\uc73c\ub85c \uc120\ud615\ubd84\ub9ac \uac00\ub2a5 \ub370\uc774\ud130\uc5d0 \uc870\uac74 \\(\\eta =1, \\|\\mathbf{w}^{0}\\| = 0\\) \uc744 \uc801\uc6a9\ud558\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c, \uc989 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\uc758 \ud559\uc2b5\uc73c\ub85c(\uc5d0\ub7ec\ub85c) \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218 \\(\\mathbf{w}\\) \ub97c \ucd5c\uc801\uc758 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub85c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \u25a0 Note \uc774\ub294 \ubd84\ub958\ud574\uc57c \ud558\ub294 \ud074\ub798\uc2a4\uac04 \uac70\ub9ac\uac00 \uac00\uae4c\uc6b8\uc218\ub85d \uc54c\uace0\ub9ac\uc998 \ubc18\ubcf5 \ud69f\uc218(\ud559\uc2b5\ud69f\uc218, \uc5d0\ub7ec\ud69f\uc218)\ub294 \ub298\uc5b4\ub098\uc9c0\ub9cc \uc5b4\uca0c\ub4e0 \uc218\ub834\uc740 \ud55c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \\(\\gamma\\) \uac00 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \uc904\uc5b4\ub4e4\uace0, \\(R\\) \uc774 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \ub9ce\uc544\uc9c4\ub2e4. \ucc38\uace0 \ubc0f \ucd9c\ucc98 : https://nbviewer.jupyter.org/github/metamath1/ml-simple-works/blob/master/perceptron/perceptron.ipynb \uc54c\uace0\ub9ac\uc998 \uc911\uc2ec\uc758 \uba38\uc2e0\ub7ec\ub2dd \uac00\uc774\ub4dcMachine Learning: An Algorithmic Perspective, 2 nd ed., \uc2a4\ud2f0\ube10 \ub9c8\uc2ac\ub79c\ub4dc http://www.cs.columbia.edu/~mcollins/courses/6998-2012/notes/perc.converge.pdf Info \uc544\ub798\uc758 Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84 \uc815\ub9ac\uc640 \uc99d\uba85\uacfc\uc815\uc744 Source \uc5d0\uc11c\uc640 \uac19\uc774 Markdown \uacfc LaTex \ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc99d\uba85"},{"location":"write/math/#2-affine-layer","text":"Affine \ubcc0\ud658\uc758 \uc5ed\uc804\ud30c : \uc785\ub825 \ud589\ub82c \\(\\mathbf{X,W}\\) \uacfc \ucd9c\ub825\ud589\ub82c \\(\\mathbf{Y} = \\mathbf{XW}\\) \ub97c \uac16\ub294 Affine \ub808\uc774\uc5b4\uc758 \uc5ed\uc804\ud30c\ub294 \uc190\uc2e4\uac12 \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84 \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\cdot \\mathbf{W} ^{\\intercal }, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc774\ub2e4. Affine Layer \ub294 \ubcf4\ud1b5 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc131\ub41c\ub2e4.","title":"\uc608\uc2dc 2: Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84"},{"location":"write/math/#affine-layer","text":"\ud589\ub82c\uacf1 \uc5f0\uc0b0\uacfc \ud589\ub82c\ub367\uc148 \uc5f0\uc0b0\uc744 \ud558\ub294 Affine \ub808\uc774\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . dW = None self . db = None def forward ( self , x ): self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) return dx \ub2e4\uc74c \ucf54\ub4dc\ub294 \uc785\ub825 \ub370\uc774\ud130\uac00 \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ud150\uc11c\uc778 \uacbd\uc6b0, \uc989 4\ucc28\uc6d0 \ub370\uc774\ud130\uc778 \uacbd\uc6b0\ub3c4 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\ud604\ud55c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . original_x_shape = None self . dW = None self . db = None def forward ( self , x ): # \ud150\uc11c \ub300\uc751 self . original_x_shape = x . shape x = x . reshape ( x . shape [ 0 ], - 1 ) self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) dx = dx . reshape ( * self . original_x_shape ) # \uc785\ub825 \ub370\uc774\ud130 \ubaa8\uc591 \ubcc0\uacbd(\ud150\uc11c \ub300\uc751) return dx","title":"Affine Layer \ucf54\ub4dc \uad6c\ud604"},{"location":"write/math/#_6","text":"\\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c \\(\\mathbf{Y=XW}\\) \uacfc \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\] \uc774\ub2e4.","title":"\ud589\ub82c\uacf1 \ubbf8\ubd84 \uc815\ub9ac"},{"location":"write/math/#_7","text":"\\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \uc21c\uc785\ub825 \ud589\ub82c \\(\\mathbf{Z=Y + B}\\) \uc640 \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\uace0, \\(\\mathbf{B}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4.","title":"\ud589\ub82c\ub367\uc148 \ubbf8\ubd84 \uc815\ub9ac"},{"location":"write/tab/","text":"\uc2e0\uacbd\ub9dd\uc744 Python \uc73c\ub85c \ucf54\ub529\ud55c \uac83\uacfc C++ \ub85c \ucf54\ub529\ud55c \uac83\uc744 \ube44\uad50\ud558\uace0 \uc2f6\uc740 \uc0c1\ud669\uc774\ub098 \ub0b4\uc6a9\uc744 \ube44\uad50\ud558\uace0 \uc2f6\uc740 \uc0c1\ud669\uc5d0 \ucee8\ud150\uce20 \ud0ed\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ucee8\ud150\uce20 \ud0ed \ub9cc\ub4e4\uae30 \u00b6 === \ub85c \ud0ed\uc744 \uad6c\ubd84\ud558\uace0 \ud070 \ub530\uc634\ud45c\uc5d0 \ud0ed \uc81c\ubaa9\uc744 \uc0bd\uc785\ud558\uba74 \uac04\ub2e8\ud558\uac8c \ucee8\ud150\uce20 \ud0ed\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` Result : C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Step 5. \ucee8\ud150\uce20 \ud0ed"},{"location":"write/tab/#_1","text":"=== \ub85c \ud0ed\uc744 \uad6c\ubd84\ud558\uace0 \ud070 \ub530\uc634\ud45c\uc5d0 \ud0ed \uc81c\ubaa9\uc744 \uc0bd\uc785\ud558\uba74 \uac04\ub2e8\ud558\uac8c \ucee8\ud150\uce20 \ud0ed\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` Result : C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"\ucee8\ud150\uce20 \ud0ed \ub9cc\ub4e4\uae30"}]}